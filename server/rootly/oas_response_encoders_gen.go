// Code generated by ogen, DO NOT EDIT.

package rootly

import (
	"net/http"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/trace"
)

func encodeScimUsersGetResponse(response ScimUsersGetRes, w http.ResponseWriter, span trace.Span) error {
	switch response := response.(type) {
	case *ScimUsersGetOK:
		w.WriteHeader(200)
		span.SetStatus(codes.Ok, http.StatusText(200))
		return nil

	case *ScimUsersGetUnauthorized:
		w.WriteHeader(401)
		span.SetStatus(codes.Error, http.StatusText(401))
		return nil

	default:
		return errors.Errorf("/scim/Users"+`: unexpected response type: %T`, response)
	}
}
func encodeScimUsersIDDeleteResponse(response ScimUsersIDDeleteNoContent, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(204)
	span.SetStatus(codes.Ok, http.StatusText(204))
	return nil

}
func encodeScimUsersIDGetResponse(response ScimUsersIDGetOK, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))
	return nil

}
func encodeScimUsersIDPatchResponse(response ScimUsersIDPatchOK, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(200)
	span.SetStatus(codes.Ok, http.StatusText(200))
	return nil

}
func encodeScimUsersPostResponse(response ScimUsersPostCreated, w http.ResponseWriter, span trace.Span) error {
	w.WriteHeader(201)
	span.SetStatus(codes.Ok, http.StatusText(201))
	return nil

}
