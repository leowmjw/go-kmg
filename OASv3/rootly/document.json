{
  "openapi": "3.0.1",
  "info": {
    "title": "Rootly API v1",
    "version": "v1",
    "description": "# How to generate an API Key\n- **Account** > **Manage API keys** > **Generate New API Key**\n# JSON:API Specification\nRootly is using **JSON:API** (https://jsonapi.org) specification: \n- JSON:API is a specification for how a client should request that resources be fetched or modified, and how a server should respond to those requests. \n- JSON:API is designed to minimize both the number of requests and the amount of data transmitted between clients and servers. This efficiency is achieved without compromising readability, flexibility, or discoverability. \n- JSON:API requires use of the JSON:API media type (**application/vnd.api+json**) for exchanging data.\n# Authentication and Requests\nWe use standard HTTP Authentication over HTTPS to authorize your requests.\n<pre><code>curl --request GET \\\n--header 'Content-Type: application/vnd.api+json' \\\n--header 'Authorization: Bearer YOUR-TOKEN' \\\n--url https://api.rootly.com/v1/services</code></pre>",
    "x-logo": {
      "url": "https://assets.rootly.com/assets/logo/logo-d5b67e47267a3f53faa93c10c36fe96a3115b50d3b1700808cecb514eecbeb5c.png",
      "alt": "Rootly"
    }
  },
  "paths": {
    "/v1/incidents/{incident_id}/alerts": {
      "parameters": [
        {
          "name": "incident_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Attach alerts to an incident",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Alerts"
        ],
        "description": "Attach alerts to an incident from provided data",
        "operationId": "attachAlert",
        "parameters": [],
        "responses": {
          "200": {
            "description": "alert created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": [
                    {
                      "id": "798609c1-d7ce-4f77-9d29-a13a3ce0540a",
                      "type": "alerts",
                      "attributes": {
                        "source": "pagerduty",
                        "summary": "Architecto esse quae molestias.",
                        "labels": [],
                        "services": [],
                        "environments": [],
                        "data": {},
                        "started_at": "2022-05-26T19:55:28.097-07:00",
                        "ended_at": null,
                        "created_at": "2022-05-26T19:55:28.097-07:00",
                        "updated_at": "2022-05-26T19:55:28.097-07:00"
                      }
                    }
                  ],
                  "links": {
                    "self": "http://www.example.com/v1/incidents/22490891-dd5e-4dcd-b3c3-4561ac65b79e/alerts?page%5Bnumber%5D=1&page%5Bsize%5D=10",
                    "first": "http://www.example.com/v1/incidents/22490891-dd5e-4dcd-b3c3-4561ac65b79e/alerts?page%5Bnumber%5D=1&page%5Bsize%5D=10",
                    "prev": null,
                    "next": null,
                    "last": "http://www.example.com/v1/incidents/22490891-dd5e-4dcd-b3c3-4561ac65b79e/alerts?page%5Bnumber%5D=1&page%5Bsize%5D=10"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/alert_list"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_alert"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/incidents/%7Bincident_id%7D/alerts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"alerts\",\"attributes\":{\"source\":\"pagerduty\",\"summary\":\"string\",\"service_ids\":[\"string\"],\"environment_ids\":[\"string\"],\"started_at\":\"2019-08-24T14:15:22Z\",\"ended_at\":\"2019-08-24T14:15:22Z\",\"labels\":[{\"key\":\"string\",\"value\":\"string\"}],\"data\":{}}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/alerts\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"alerts\\\",\\\"attributes\\\":{\\\"source\\\":\\\"pagerduty\\\",\\\"summary\\\":\\\"string\\\",\\\"service_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"ended_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"labels\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"data\\\":{}}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bincident_id%7D/alerts\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"alerts\\\",\\\"attributes\\\":{\\\"source\\\":\\\"pagerduty\\\",\\\"summary\\\":\\\"string\\\",\\\"service_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"ended_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"labels\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"data\\\":{}}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/alerts\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"alerts\\\",\\\"attributes\\\":{\\\"source\\\":\\\"pagerduty\\\",\\\"summary\\\":\\\"string\\\",\\\"service_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"ended_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"labels\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"data\\\":{}}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List alerts",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Alerts"
        ],
        "description": "List alerts",
        "operationId": "listAlert",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/alert_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/incidents/%7Bincident_id%7D/alerts?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/alerts?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bincident_id%7D/alerts?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/alerts?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/alerts": {
      "post": {
        "summary": "Creates a alert",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Alerts"
        ],
        "description": "Creates a new alert from provided data",
        "operationId": "createAlert",
        "parameters": [],
        "responses": {
          "201": {
            "description": "alert created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "a0b81aa0-0d7d-46e2-9c08-26fe737059af",
                    "type": "alerts",
                    "attributes": {
                      "source": "asana",
                      "summary": "Asana ticket created",
                      "labels": [
                        {
                          "key": "status",
                          "value": "succeeded"
                        }
                      ],
                      "services": [],
                      "environments": [],
                      "data": {
                        "url": "https://asana.com/issues/1"
                      },
                      "started_at": "2022-05-26T19:53:06.000-07:00",
                      "ended_at": "2022-05-26T19:55:06.000-07:00",
                      "created_at": "2022-05-26T19:55:29.553-07:00",
                      "updated_at": "2022-05-26T19:55:29.553-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/alert_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "summary": [
                    "can't be blank"
                  ],
                  "source": [
                    " is not a valid option"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_alert"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/alerts \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"alerts\",\"attributes\":{\"source\":\"pagerduty\",\"summary\":\"string\",\"service_ids\":[\"string\"],\"environment_ids\":[\"string\"],\"started_at\":\"2019-08-24T14:15:22Z\",\"ended_at\":\"2019-08-24T14:15:22Z\",\"labels\":[{\"key\":\"string\",\"value\":\"string\"}],\"data\":{}}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/alerts\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"alerts\\\",\\\"attributes\\\":{\\\"source\\\":\\\"pagerduty\\\",\\\"summary\\\":\\\"string\\\",\\\"service_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"ended_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"labels\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"data\\\":{}}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/alerts\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"alerts\\\",\\\"attributes\\\":{\\\"source\\\":\\\"pagerduty\\\",\\\"summary\\\":\\\"string\\\",\\\"service_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"ended_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"labels\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"data\\\":{}}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/alerts\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"alerts\\\",\\\"attributes\\\":{\\\"source\\\":\\\"pagerduty\\\",\\\"summary\\\":\\\"string\\\",\\\"service_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"ended_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"labels\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"data\\\":{}}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List alerts",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Alerts"
        ],
        "description": "List alerts",
        "operationId": "listAlerts",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/alert_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/alerts?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/alerts?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/alerts?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/alerts?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/alerts/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a alert",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Alerts"
        ],
        "description": "Retrieves a specific alert by id",
        "operationId": "getAlert",
        "responses": {
          "200": {
            "description": "alert found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "798609c1-d7ce-4f77-9d29-a13a3ce0540a",
                    "type": "alerts",
                    "attributes": {
                      "source": "pagerduty",
                      "summary": "Architecto esse quae molestias.",
                      "labels": [],
                      "services": [],
                      "environments": [],
                      "data": {},
                      "started_at": "2022-05-26T19:55:28.097-07:00",
                      "ended_at": null,
                      "created_at": "2022-05-26T19:55:28.097-07:00",
                      "updated_at": "2022-05-26T19:55:28.097-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/alert_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/alerts/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/alerts/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/alerts/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/alerts/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/causes": {
      "post": {
        "summary": "Creates a cause",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Causes"
        ],
        "description": "Creates a new cause from provided data",
        "operationId": "createCause",
        "parameters": [],
        "responses": {
          "201": {
            "description": "cause created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "950ad22a-648b-42b0-9332-7b3243fbbbde",
                    "type": "causes",
                    "attributes": {
                      "name": "How to handle customer-facing incident?",
                      "description": "This is a description",
                      "created_at": "2022-05-26T19:55:40.713-07:00",
                      "updated_at": "2022-05-26T19:55:40.713-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/cause_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "name": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_cause"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/causes \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"causes\",\"attributes\":{\"name\":\"string\",\"description\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/causes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"causes\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/causes\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"causes\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/causes\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"causes\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List causes",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Causes"
        ],
        "description": "List causes",
        "operationId": "listCauses",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/cause_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/causes?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/causes?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/causes?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/causes?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/causes/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a cause",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Causes"
        ],
        "description": "Retrieves a specific cause by id",
        "operationId": "getCause",
        "responses": {
          "200": {
            "description": "cause found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "fe9c3f76-475c-4d23-a1cd-b9b082e5c9b1",
                    "type": "causes",
                    "attributes": {
                      "name": "Bug",
                      "description": "Quia aliquid in dolores.",
                      "created_at": "2022-05-26T19:55:40.408-07:00",
                      "updated_at": "2022-05-26T19:55:40.408-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/cause_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/causes/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/causes/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/causes/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/causes/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a cause",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Causes"
        ],
        "description": "Update a specific cause by id",
        "operationId": "updateCause",
        "parameters": [],
        "responses": {
          "200": {
            "description": "cause updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "fe9c3f76-475c-4d23-a1cd-b9b082e5c9b1",
                    "type": "causes",
                    "attributes": {
                      "name": "How to handle security incident?",
                      "description": "This is a description",
                      "created_at": "2022-05-26T19:55:40.408-07:00",
                      "updated_at": "2022-05-26T19:55:41.299-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/cause_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_cause"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/causes/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"causes\",\"attributes\":{\"name\":\"string\",\"description\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/causes/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"causes\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/causes/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"causes\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/causes/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"causes\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a cause",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Causes"
        ],
        "description": "Delete a specific cause by id",
        "operationId": "deleteCause",
        "responses": {
          "200": {
            "description": "cause deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "fe9c3f76-475c-4d23-a1cd-b9b082e5c9b1",
                    "type": "causes",
                    "attributes": {
                      "name": "Bug",
                      "description": "Quia aliquid in dolores.",
                      "created_at": "2022-05-26T19:55:40.408-07:00",
                      "updated_at": "2022-05-26T19:55:41.550-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/cause_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/causes/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/causes/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/causes/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/causes/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/custom_fields/{custom_field_id}/options": {
      "parameters": [
        {
          "name": "custom_field_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Creates a custom_field_option",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "CustomFieldOptions"
        ],
        "description": "Creates a new custom_field_option from provided data",
        "operationId": "createCustomFieldOption",
        "parameters": [],
        "responses": {
          "201": {
            "description": "custom_field_option created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "3",
                    "type": "custom_field_options",
                    "attributes": {
                      "value": "Test option value",
                      "color": "#FBE4A0",
                      "position": 3,
                      "updated_at": "2022-05-26T19:55:51.358-07:00",
                      "created_at": "2022-05-26T19:55:51.358-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/custom_field_option_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "value": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_custom_field_option"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/custom_fields/%7Bcustom_field_id%7D/options \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"custom_field_options\",\"attributes\":{\"value\":\"string\",\"color\":\"string\",\"position\":0}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/custom_fields/%7Bcustom_field_id%7D/options\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"custom_field_options\\\",\\\"attributes\\\":{\\\"value\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\",\\\"position\\\":0}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/custom_fields/%7Bcustom_field_id%7D/options\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"custom_field_options\\\",\\\"attributes\\\":{\\\"value\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\",\\\"position\\\":0}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/custom_fields/%7Bcustom_field_id%7D/options\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"custom_field_options\\\",\\\"attributes\\\":{\\\"value\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\",\\\"position\\\":0}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List custom_field_options",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "CustomFieldOptions"
        ],
        "description": "List custom_field_options",
        "operationId": "listCustomFieldOptions",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/custom_field_option_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/custom_fields/%7Bcustom_field_id%7D/options?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/custom_fields/%7Bcustom_field_id%7D/options?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/custom_fields/%7Bcustom_field_id%7D/options?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/custom_fields/%7Bcustom_field_id%7D/options?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/custom_field_options/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a custom_field_option",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "CustomFieldOptions"
        ],
        "description": "Retrieves a specific custom_field_option by id",
        "operationId": "getCustomFieldOption",
        "responses": {
          "200": {
            "description": "custom_field_option found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "1",
                    "type": "custom_field_options",
                    "attributes": {
                      "value": "Illum ut incidunt laudantium.",
                      "color": "#FBE4A0",
                      "position": 1,
                      "updated_at": "2022-05-26T19:55:51.155-07:00",
                      "created_at": "2022-05-26T19:55:51.155-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/custom_field_option_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/custom_field_options/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/custom_field_options/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/custom_field_options/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/custom_field_options/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a custom_field_option",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "CustomFieldOptions"
        ],
        "description": "Update a specific custom_field_option by id",
        "operationId": "updateCustomFieldOption",
        "parameters": [],
        "responses": {
          "200": {
            "description": "custom_field_option updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "1",
                    "type": "custom_field_options",
                    "attributes": {
                      "value": "Test update option value",
                      "color": "#FBE4A0",
                      "position": 1,
                      "updated_at": "2022-05-26T19:55:52.002-07:00",
                      "created_at": "2022-05-26T19:55:51.155-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/custom_field_option_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_custom_field_option"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/custom_field_options/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"custom_field_options\",\"attributes\":{\"value\":\"string\",\"color\":\"string\",\"position\":0}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/custom_field_options/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"custom_field_options\\\",\\\"attributes\\\":{\\\"value\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\",\\\"position\\\":0}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/custom_field_options/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"custom_field_options\\\",\\\"attributes\\\":{\\\"value\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\",\\\"position\\\":0}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/custom_field_options/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"custom_field_options\\\",\\\"attributes\\\":{\\\"value\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\",\\\"position\\\":0}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a custom_field_option",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "CustomFieldOptions"
        ],
        "description": "Delete a specific custom_field_option by id",
        "operationId": "deleteCustomFieldOption",
        "responses": {
          "200": {
            "description": "custom_field_option deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "1",
                    "type": "custom_field_options",
                    "attributes": {
                      "value": "Illum ut incidunt laudantium.",
                      "color": "#FBE4A0",
                      "position": 1,
                      "updated_at": "2022-05-26T19:55:52.294-07:00",
                      "created_at": "2022-05-26T19:55:51.155-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/custom_field_option_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/custom_field_options/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/custom_field_options/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/custom_field_options/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/custom_field_options/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/custom_fields": {
      "post": {
        "summary": "Creates a custom_field",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "CustomFields"
        ],
        "description": "Creates a new custom_field from provided data",
        "operationId": "createCustomField",
        "parameters": [],
        "responses": {
          "201": {
            "description": "custom_field created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "3",
                    "type": "custom_fields",
                    "attributes": {
                      "label": "Test custom field",
                      "slug": "test-custom-field",
                      "description": null,
                      "kind": "text",
                      "enabled": true,
                      "required": null,
                      "shown": [
                        "incident_form",
                        "incident_slack_form",
                        "incident_post_mortem"
                      ],
                      "position": 2,
                      "updated_at": "2022-05-26T19:56:01.935-07:00",
                      "created_at": "2022-05-26T19:56:01.935-07:00"
                    },
                    "relationships": {
                      "options": {
                        "data": []
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/custom_field_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "label": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_custom_field"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/custom_fields \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"custom_fields\",\"attributes\":{\"label\":\"string\",\"description\":\"string\",\"shown\":[\"incident_form\"],\"required\":[\"incident_form\"],\"position\":0}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/custom_fields\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"custom_fields\\\",\\\"attributes\\\":{\\\"label\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"shown\\\":[\\\"incident_form\\\"],\\\"required\\\":[\\\"incident_form\\\"],\\\"position\\\":0}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/custom_fields\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"custom_fields\\\",\\\"attributes\\\":{\\\"label\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"shown\\\":[\\\"incident_form\\\"],\\\"required\\\":[\\\"incident_form\\\"],\\\"position\\\":0}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/custom_fields\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"custom_fields\\\",\\\"attributes\\\":{\\\"label\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"shown\\\":[\\\"incident_form\\\"],\\\"required\\\":[\\\"incident_form\\\"],\\\"position\\\":0}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List custom_fields",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "CustomFields"
        ],
        "description": "List custom_fields",
        "operationId": "listCustomFields",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/custom_field_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/custom_fields?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/custom_fields?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/custom_fields?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/custom_fields?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/custom_fields/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a custom_field",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "CustomFields"
        ],
        "description": "Retrieves a specific custom_field by id",
        "operationId": "getCustomField",
        "responses": {
          "200": {
            "description": "custom_field found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "2",
                    "type": "custom_fields",
                    "attributes": {
                      "label": "Molestiae ea nam magnam.",
                      "slug": "molestiae-ea-nam-magnam",
                      "description": "Consequatur dignissimos laborum eius.",
                      "kind": "text",
                      "enabled": true,
                      "required": null,
                      "shown": [
                        "incident_form",
                        "incident_slack_form",
                        "incident_post_mortem"
                      ],
                      "position": 1,
                      "updated_at": "2022-05-26T19:56:01.729-07:00",
                      "created_at": "2022-05-26T19:56:01.729-07:00"
                    },
                    "relationships": {
                      "options": {
                        "data": [
                          {
                            "id": "4",
                            "type": "custom_field_options"
                          },
                          {
                            "id": "5",
                            "type": "custom_field_options"
                          }
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/custom_field_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/custom_fields/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/custom_fields/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/custom_fields/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/custom_fields/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a custom_field",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "CustomFields"
        ],
        "description": "Update a specific custom_field by id",
        "operationId": "updateCustomField",
        "parameters": [],
        "responses": {
          "200": {
            "description": "custom_field updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "2",
                    "type": "custom_fields",
                    "attributes": {
                      "label": "Test update custom field",
                      "slug": "molestiae-ea-nam-magnam",
                      "description": "Consequatur dignissimos laborum eius.",
                      "kind": "text",
                      "enabled": true,
                      "required": null,
                      "shown": [
                        "incident_form",
                        "incident_slack_form",
                        "incident_post_mortem"
                      ],
                      "position": 1,
                      "updated_at": "2022-05-26T19:56:02.531-07:00",
                      "created_at": "2022-05-26T19:56:01.729-07:00"
                    },
                    "relationships": {
                      "options": {
                        "data": [
                          {
                            "id": "4",
                            "type": "custom_field_options"
                          },
                          {
                            "id": "5",
                            "type": "custom_field_options"
                          }
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/custom_field_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_custom_field"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/custom_fields/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"custom_fields\",\"attributes\":{\"label\":\"string\",\"slug\":\"string\",\"description\":\"string\",\"shown\":[\"incident_form\"],\"required\":[\"incident_form\"],\"position\":0}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/custom_fields/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"custom_fields\\\",\\\"attributes\\\":{\\\"label\\\":\\\"string\\\",\\\"slug\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"shown\\\":[\\\"incident_form\\\"],\\\"required\\\":[\\\"incident_form\\\"],\\\"position\\\":0}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/custom_fields/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"custom_fields\\\",\\\"attributes\\\":{\\\"label\\\":\\\"string\\\",\\\"slug\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"shown\\\":[\\\"incident_form\\\"],\\\"required\\\":[\\\"incident_form\\\"],\\\"position\\\":0}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/custom_fields/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"custom_fields\\\",\\\"attributes\\\":{\\\"label\\\":\\\"string\\\",\\\"slug\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"shown\\\":[\\\"incident_form\\\"],\\\"required\\\":[\\\"incident_form\\\"],\\\"position\\\":0}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a custom_field",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "CustomFields"
        ],
        "description": "Delete a specific custom_field by id",
        "operationId": "deleteCustomField",
        "responses": {
          "200": {
            "description": "custom_field deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "2",
                    "type": "custom_fields",
                    "attributes": {
                      "label": "Molestiae ea nam magnam.",
                      "slug": "molestiae-ea-nam-magnam",
                      "description": "Consequatur dignissimos laborum eius.",
                      "kind": "text",
                      "enabled": true,
                      "required": null,
                      "shown": [
                        "incident_form",
                        "incident_slack_form",
                        "incident_post_mortem"
                      ],
                      "position": 1,
                      "updated_at": "2022-05-26T19:56:02.787-07:00",
                      "created_at": "2022-05-26T19:56:01.729-07:00"
                    },
                    "relationships": {
                      "options": {
                        "data": []
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/custom_field_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/custom_fields/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/custom_fields/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/custom_fields/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/custom_fields/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/environments": {
      "post": {
        "summary": "Creates a environment",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Environments"
        ],
        "description": "Creates a new environment from provided data",
        "operationId": "createEnvironment",
        "parameters": [],
        "responses": {
          "201": {
            "description": "environment created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "2db9c1ee-ac9b-4ee1-aa04-94b0de235975",
                    "type": "environments",
                    "attributes": {
                      "name": "us-east-1",
                      "description": "East Coast Datacenter",
                      "color": "#FBE4A0",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:56:12.176-07:00",
                      "updated_at": "2022-05-26T19:56:12.176-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/environment_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "name": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_environment"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/environments \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"environments\",\"attributes\":{\"name\":\"string\",\"description\":\"string\",\"color\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/environments\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"environments\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/environments\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"environments\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/environments\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"environments\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List environments",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Environments"
        ],
        "description": "List environments",
        "operationId": "listEnvironments",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/environment_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/environments?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/environments?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/environments?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/environments?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/environments/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a environment",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Environments"
        ],
        "description": "Retrieves a specific environment by id",
        "operationId": "getEnvironment",
        "responses": {
          "200": {
            "description": "environment found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "0efee0af-8aad-4162-b69a-14bc9150c649",
                    "type": "environments",
                    "attributes": {
                      "name": "production",
                      "description": "Occaecati culpa deleniti dicta.",
                      "color": "#a41ed2",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:56:11.848-07:00",
                      "updated_at": "2022-05-26T19:56:11.848-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/environment_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/environments/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/environments/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/environments/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/environments/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a environment",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Environments"
        ],
        "description": "Update a specific environment by id",
        "operationId": "updateEnvironment",
        "parameters": [],
        "responses": {
          "200": {
            "description": "environment updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "0efee0af-8aad-4162-b69a-14bc9150c649",
                    "type": "environments",
                    "attributes": {
                      "name": "us-east-1",
                      "description": "East Coast Datacenter Region 1",
                      "color": "#a41ed2",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:56:11.848-07:00",
                      "updated_at": "2022-05-26T19:56:12.779-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/environment_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_environment"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/environments/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"environments\",\"attributes\":{\"name\":\"string\",\"description\":\"string\",\"color\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/environments/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"environments\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/environments/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"environments\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/environments/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"environments\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a environment",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Environments"
        ],
        "description": "Delete a specific environment by id",
        "operationId": "deleteEnvironment",
        "responses": {
          "200": {
            "description": "environment deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "0efee0af-8aad-4162-b69a-14bc9150c649",
                    "type": "environments",
                    "attributes": {
                      "name": "production",
                      "description": "Occaecati culpa deleniti dicta.",
                      "color": "#a41ed2",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:56:11.848-07:00",
                      "updated_at": "2022-05-26T19:56:13.042-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/environment_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/environments/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/environments/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/environments/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/environments/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/functionalities": {
      "post": {
        "summary": "Creates a functionality",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Functionalities"
        ],
        "description": "Creates a new functionality from provided data",
        "operationId": "createFunctionality",
        "parameters": [],
        "responses": {
          "201": {
            "description": "functionality created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "c2345701-f9ab-463f-b1cb-80faaf1f1015",
                    "type": "functionalities",
                    "attributes": {
                      "name": "Add items to cart",
                      "slug": "add-items-to-cart-b479f13e-d725-4d0e-ab01-961f70c31743",
                      "description": "Users should be able to add items to cart",
                      "public_description": null,
                      "color": "#C5F0C0",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:56:22.811-07:00",
                      "updated_at": "2022-05-26T19:56:22.811-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/functionality_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "name": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_functionality"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/functionalities \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"functionalities\",\"attributes\":{\"name\":\"string\",\"description\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/functionalities\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"functionalities\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/functionalities\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"functionalities\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/functionalities\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"functionalities\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List functionalities",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Functionalities"
        ],
        "description": "List functionalities",
        "operationId": "listFunctionalities",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/functionality_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/functionalities?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/functionalities?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/functionalities?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/functionalities?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/functionalities/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a functionality",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Functionalities"
        ],
        "description": "Retrieves a specific functionality by id",
        "operationId": "getFunctionality",
        "responses": {
          "200": {
            "description": "functionality found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "a437be0c-fb4b-4a93-a729-1f36aecb8286",
                    "type": "functionalities",
                    "attributes": {
                      "name": "Libero aspernatur ipsam autem.",
                      "slug": "libero-aspernatur-ipsam-autem",
                      "description": "Optio dolores beatae dolore.",
                      "public_description": null,
                      "color": "#C5F0C0",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:56:22.346-07:00",
                      "updated_at": "2022-05-26T19:56:22.346-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/functionality_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/functionalities/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/functionalities/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/functionalities/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/functionalities/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a functionality",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Functionalities"
        ],
        "description": "Update a specific functionality by id",
        "operationId": "updateFunctionality",
        "parameters": [],
        "responses": {
          "200": {
            "description": "functionality updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "a437be0c-fb4b-4a93-a729-1f36aecb8286",
                    "type": "functionalities",
                    "attributes": {
                      "name": "Checkout",
                      "slug": "libero-aspernatur-ipsam-autem",
                      "description": "Users should be able to checkout",
                      "public_description": null,
                      "color": "#C5F0C0",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:56:22.346-07:00",
                      "updated_at": "2022-05-26T19:56:23.461-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/functionality_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_functionality"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/functionalities/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"functionalities\",\"attributes\":{\"name\":\"string\",\"description\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/functionalities/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"functionalities\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/functionalities/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"functionalities\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/functionalities/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"functionalities\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a functionality",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Functionalities"
        ],
        "description": "Delete a specific functionality by id",
        "operationId": "deleteFunctionality",
        "responses": {
          "200": {
            "description": "functionality deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "a437be0c-fb4b-4a93-a729-1f36aecb8286",
                    "type": "functionalities",
                    "attributes": {
                      "name": "Libero aspernatur ipsam autem.",
                      "slug": "libero-aspernatur-ipsam-autem",
                      "description": "Optio dolores beatae dolore.",
                      "public_description": null,
                      "color": "#C5F0C0",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:56:22.346-07:00",
                      "updated_at": "2022-05-26T19:56:23.746-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/functionality_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/functionalities/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/functionalities/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/functionalities/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/functionalities/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/workflows/{workflow_id}/workflow_tasks": {
      "parameters": [
        {
          "name": "workflow_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Creates a workflow task",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "WorkflowTasks"
        ],
        "description": "Creates a new workflow task from provided data",
        "operationId": "createWorkflowTask",
        "parameters": [],
        "responses": {
          "201": {
            "description": "workflow task created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "21b16c8a-0fd8-4ffa-8d0c-96a9e9cd3aee",
                    "type": "workflow_tasks",
                    "attributes": {
                      "workflow_id": "73f80ca2-3535-427d-9492-50da3e0d2d30",
                      "task_params": {
                        "task_type": "send_email",
                        "name": "Send an email",
                        "to": [
                          "test@example.com"
                        ],
                        "subject": "Hello from Rootly",
                        "body": "Hello from Rootly",
                        "preheader": null,
                        "cc": [],
                        "bcc": []
                      },
                      "position": 2,
                      "created_at": "2022-05-26T19:56:33.290-07:00",
                      "updated_at": "2022-05-26T19:56:33.290-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/workflow_task_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_workflow_task"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/workflows/%7Bworkflow_id%7D/workflow_tasks \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"workflow_tasks\",\"attributes\":{\"position\":0,\"task_params\":{\"task_type\":\"add_action_item\",\"assigned_to_user_id\":\"string\",\"priority\":\"low\",\"summary\":\"string\",\"description\":\"string\",\"status\":\"open\",\"post_to_incident_timeline\":true,\"post_to_slack_channels\":[{\"id\":\"string\",\"name\":\"string\"}]}}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflows/%7Bworkflow_id%7D/workflow_tasks\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"workflow_tasks\\\",\\\"attributes\\\":{\\\"position\\\":0,\\\"task_params\\\":{\\\"task_type\\\":\\\"add_action_item\\\",\\\"assigned_to_user_id\\\":\\\"string\\\",\\\"priority\\\":\\\"low\\\",\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"status\\\":\\\"open\\\",\\\"post_to_incident_timeline\\\":true,\\\"post_to_slack_channels\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflows/%7Bworkflow_id%7D/workflow_tasks\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"workflow_tasks\\\",\\\"attributes\\\":{\\\"position\\\":0,\\\"task_params\\\":{\\\"task_type\\\":\\\"add_action_item\\\",\\\"assigned_to_user_id\\\":\\\"string\\\",\\\"priority\\\":\\\"low\\\",\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"status\\\":\\\"open\\\",\\\"post_to_incident_timeline\\\":true,\\\"post_to_slack_channels\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflows/%7Bworkflow_id%7D/workflow_tasks\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"workflow_tasks\\\",\\\"attributes\\\":{\\\"position\\\":0,\\\"task_params\\\":{\\\"task_type\\\":\\\"add_action_item\\\",\\\"assigned_to_user_id\\\":\\\"string\\\",\\\"priority\\\":\\\"low\\\",\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"status\\\":\\\"open\\\",\\\"post_to_incident_timeline\\\":true,\\\"post_to_slack_channels\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List workflow tasks",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "WorkflowTasks"
        ],
        "description": "List workflow tasks",
        "operationId": "listWorkflowTasks",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/workflow_task_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/workflows/%7Bworkflow_id%7D/workflow_tasks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflows/%7Bworkflow_id%7D/workflow_tasks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflows/%7Bworkflow_id%7D/workflow_tasks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflows/%7Bworkflow_id%7D/workflow_tasks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/workflow_tasks/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a workflow task",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "WorkflowTasks"
        ],
        "description": "Retrieves a specific workflow_task by id",
        "operationId": "getWorkflowTask",
        "responses": {
          "200": {
            "description": "workflow_task found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "ecd37b6e-2849-4584-b02d-46415266bd8e",
                    "type": "workflow_tasks",
                    "attributes": {
                      "workflow_id": "73f80ca2-3535-427d-9492-50da3e0d2d30",
                      "task_params": {
                        "task_type": "send_email",
                        "name": "Send an email",
                        "to": [
                          "laborum"
                        ],
                        "subject": "Mollitia qui omnis officia.",
                        "body": "Repellat dignissimos molestiae ut.",
                        "preheader": null,
                        "cc": [],
                        "bcc": []
                      },
                      "position": 1,
                      "created_at": "2022-05-26T19:56:33.182-07:00",
                      "updated_at": "2022-05-26T19:56:33.182-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/workflow_task_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/workflow_tasks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflow_tasks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflow_tasks/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflow_tasks/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a workflow task",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "WorkflowTasks"
        ],
        "description": "Update a specific workflow task by id",
        "operationId": "updateWorkflowTask",
        "parameters": [],
        "responses": {
          "200": {
            "description": "workflow_task updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "ecd37b6e-2849-4584-b02d-46415266bd8e",
                    "type": "workflow_tasks",
                    "attributes": {
                      "workflow_id": "73f80ca2-3535-427d-9492-50da3e0d2d30",
                      "task_params": {
                        "task_type": "send_email",
                        "body": "updated",
                        "name": "Send an email",
                        "to": [
                          "laborum"
                        ],
                        "subject": "Mollitia qui omnis officia.",
                        "preheader": null,
                        "cc": [],
                        "bcc": []
                      },
                      "position": 2,
                      "created_at": "2022-05-26T19:56:33.182-07:00",
                      "updated_at": "2022-05-26T19:56:33.858-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/workflow_task_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_workflow_task"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/workflow_tasks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"workflow_tasks\",\"attributes\":{\"position\":0,\"task_params\":{\"task_type\":\"add_action_item\",\"assigned_to_user_id\":\"string\",\"priority\":\"low\",\"summary\":\"string\",\"description\":\"string\",\"status\":\"open\",\"post_to_incident_timeline\":true,\"post_to_slack_channels\":[{\"id\":\"string\",\"name\":\"string\"}]}}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflow_tasks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"workflow_tasks\\\",\\\"attributes\\\":{\\\"position\\\":0,\\\"task_params\\\":{\\\"task_type\\\":\\\"add_action_item\\\",\\\"assigned_to_user_id\\\":\\\"string\\\",\\\"priority\\\":\\\"low\\\",\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"status\\\":\\\"open\\\",\\\"post_to_incident_timeline\\\":true,\\\"post_to_slack_channels\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflow_tasks/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"workflow_tasks\\\",\\\"attributes\\\":{\\\"position\\\":0,\\\"task_params\\\":{\\\"task_type\\\":\\\"add_action_item\\\",\\\"assigned_to_user_id\\\":\\\"string\\\",\\\"priority\\\":\\\"low\\\",\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"status\\\":\\\"open\\\",\\\"post_to_incident_timeline\\\":true,\\\"post_to_slack_channels\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflow_tasks/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"workflow_tasks\\\",\\\"attributes\\\":{\\\"position\\\":0,\\\"task_params\\\":{\\\"task_type\\\":\\\"add_action_item\\\",\\\"assigned_to_user_id\\\":\\\"string\\\",\\\"priority\\\":\\\"low\\\",\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"status\\\":\\\"open\\\",\\\"post_to_incident_timeline\\\":true,\\\"post_to_slack_channels\\\":[{\\\"id\\\":\\\"string\\\",\\\"name\\\":\\\"string\\\"}]}}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a workflow task",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "WorkflowTasks"
        ],
        "description": "Delete a specific workflow task by id",
        "operationId": "deleteWorkflowTask",
        "responses": {
          "200": {
            "description": "workflow_task deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "ecd37b6e-2849-4584-b02d-46415266bd8e",
                    "type": "workflow_tasks",
                    "attributes": {
                      "workflow_id": "73f80ca2-3535-427d-9492-50da3e0d2d30",
                      "task_params": {
                        "task_type": "send_email",
                        "name": "Send an email",
                        "to": [
                          "laborum"
                        ],
                        "subject": "Mollitia qui omnis officia.",
                        "body": "Repellat dignissimos molestiae ut.",
                        "preheader": null,
                        "cc": [],
                        "bcc": []
                      },
                      "position": 1,
                      "created_at": "2022-05-26T19:56:33.182-07:00",
                      "updated_at": "2022-05-26T19:56:34.148-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/workflow_task_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/workflow_tasks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflow_tasks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflow_tasks/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflow_tasks/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/workflows/{id}/custom_field_selections": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Creates a workflow_custom_field_selection",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "WorkflowCustomFieldSelections"
        ],
        "description": "Creates a new workflow_custom_field_selection from provided data",
        "operationId": "createWorkflowCustomFieldSelection",
        "parameters": [],
        "responses": {
          "201": {
            "description": "workflow_custom_field_selection created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "2",
                    "type": "workflow_custom_field_selections",
                    "attributes": {
                      "genius_workflow_id": "1d710b21-65d8-439a-afb6-ec6696336665",
                      "custom_field_id": 5,
                      "incident_condition": "ANY",
                      "selected_option_ids": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/workflow_custom_field_selection_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_workflow_custom_field_selection"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/workflows/%7Bid%7D/custom_field_selections \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"workflow_custom_field_selections\",\"attributes\":{\"custom_field_id\":0,\"incident_condition\":\"IS\",\"selected_option_ids\":[0]}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflows/%7Bid%7D/custom_field_selections\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"workflow_custom_field_selections\\\",\\\"attributes\\\":{\\\"custom_field_id\\\":0,\\\"incident_condition\\\":\\\"IS\\\",\\\"selected_option_ids\\\":[0]}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflows/%7Bid%7D/custom_field_selections\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"workflow_custom_field_selections\\\",\\\"attributes\\\":{\\\"custom_field_id\\\":0,\\\"incident_condition\\\":\\\"IS\\\",\\\"selected_option_ids\\\":[0]}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflows/%7Bid%7D/custom_field_selections\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"workflow_custom_field_selections\\\",\\\"attributes\\\":{\\\"custom_field_id\\\":0,\\\"incident_condition\\\":\\\"IS\\\",\\\"selected_option_ids\\\":[0]}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List workflow_custom_field_selections",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "WorkflowCustomFieldSelections"
        ],
        "description": "List workflow_custom_field_selections",
        "operationId": "listWorkflowCustomFieldSelections",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/workflow_custom_field_selection_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/workflows/%7Bid%7D/custom_field_selections?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflows/%7Bid%7D/custom_field_selections?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflows/%7Bid%7D/custom_field_selections?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflows/%7Bid%7D/custom_field_selections?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/workflow_custom_field_selections/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a workflow_custom_field_selection",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "WorkflowCustomFieldSelections"
        ],
        "description": "Retrieves a specific workflow_custom_field_selection by id",
        "operationId": "getWorkflowCustomFieldSelection",
        "responses": {
          "200": {
            "description": "genius_workflow_custom_field_selection found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "1",
                    "type": "workflow_custom_field_selections",
                    "attributes": {
                      "genius_workflow_id": "1d710b21-65d8-439a-afb6-ec6696336665",
                      "custom_field_id": 4,
                      "incident_condition": "ANY",
                      "selected_option_ids": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/workflow_custom_field_selection_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/workflow_custom_field_selections/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflow_custom_field_selections/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflow_custom_field_selections/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflow_custom_field_selections/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a genius_workflow_custom_field_selection",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "WorkflowCustomFieldSelections"
        ],
        "description": "Update a specific workflow_custom_field_selection by id",
        "operationId": "updateWorkflowCustomFieldSelection",
        "parameters": [],
        "responses": {
          "200": {
            "description": "genius_workflow_custom_field_selection updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "1",
                    "type": "workflow_custom_field_selections",
                    "attributes": {
                      "genius_workflow_id": "1d710b21-65d8-439a-afb6-ec6696336665",
                      "custom_field_id": 4,
                      "incident_condition": "IS",
                      "selected_option_ids": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/workflow_custom_field_selection_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_workflow_custom_field_selection"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/workflow_custom_field_selections/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"workflow_custom_field_selections\",\"attributes\":{\"incident_condition\":\"IS\",\"selected_option_ids\":[0]}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflow_custom_field_selections/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"workflow_custom_field_selections\\\",\\\"attributes\\\":{\\\"incident_condition\\\":\\\"IS\\\",\\\"selected_option_ids\\\":[0]}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflow_custom_field_selections/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"workflow_custom_field_selections\\\",\\\"attributes\\\":{\\\"incident_condition\\\":\\\"IS\\\",\\\"selected_option_ids\\\":[0]}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflow_custom_field_selections/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"workflow_custom_field_selections\\\",\\\"attributes\\\":{\\\"incident_condition\\\":\\\"IS\\\",\\\"selected_option_ids\\\":[0]}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a workflow_custom_field_selection",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "WorkflowCustomFieldSelections"
        ],
        "description": "Delete a specific workflow_custom_field_selection by id",
        "operationId": "deleteWorkflowCustomFieldSelection",
        "responses": {
          "200": {
            "description": "genius_workflow_custom_field_selection deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "1",
                    "type": "workflow_custom_field_selections",
                    "attributes": {
                      "genius_workflow_id": "1d710b21-65d8-439a-afb6-ec6696336665",
                      "custom_field_id": 4,
                      "incident_condition": "ANY",
                      "selected_option_ids": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/workflow_custom_field_selection_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/workflow_custom_field_selections/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflow_custom_field_selections/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflow_custom_field_selections/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflow_custom_field_selections/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/workflows": {
      "post": {
        "summary": "Creates a workflow",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Workflows"
        ],
        "description": "Creates a new workflow from provided data",
        "operationId": "createWorkflow",
        "parameters": [],
        "responses": {
          "201": {
            "description": "workflow created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "8db93d7f-61b0-4edc-a4bf-5dc36262307d",
                    "type": "workflows",
                    "attributes": {
                      "name": "Test",
                      "slug": "test",
                      "description": null,
                      "command": "incident-test",
                      "repeat_every_duration": null,
                      "repeat_on": [
                        "S",
                        "M",
                        "T",
                        "W",
                        "R",
                        "F",
                        "U"
                      ],
                      "wait": null,
                      "enabled": true,
                      "trigger_params": {
                        "trigger_type": "incident",
                        "incident_condition": "ALL",
                        "incident_condition_environment": "ANY",
                        "incident_condition_severity": "ANY",
                        "incident_condition_incident_type": "ANY",
                        "incident_condition_service": "ANY",
                        "incident_condition_functionality": "ANY",
                        "incident_condition_group": "ANY",
                        "triggers": [
                          "incident_updated"
                        ],
                        "incident_condition_status": "ANY",
                        "incident_statuses": [],
                        "incident_condition_visibility": "ANY",
                        "incident_visibilities": [],
                        "incident_condition_kind": "IS",
                        "incident_kinds": [
                          "normal"
                        ]
                      },
                      "severity_ids": [],
                      "environment_ids": [],
                      "incident_type_ids": [],
                      "service_ids": [],
                      "functionality_ids": [],
                      "group_ids": [],
                      "updated_at": "2022-05-26T19:56:54.038-07:00",
                      "created_at": "2022-05-26T19:56:54.038-07:00"
                    },
                    "relationships": {
                      "workflow_tasks": {
                        "data": []
                      },
                      "workflow_runs": {
                        "data": []
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/workflow_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_workflow"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/workflows \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"workflows\",\"attributes\":{\"name\":\"string\",\"slug\":\"string\",\"description\":\"string\",\"command\":\"string\",\"wait\":\"string\",\"repeat_every_duration\":\"string\",\"repeat_on\":[\"S\"],\"enabled\":true,\"position\":0,\"trigger_params\":{\"trigger_type\":\"incident\",\"triggers\":[\"incident_created\"],\"incident_kinds\":[\"example\"],\"incident_statuses\":[\"started\"],\"incident_visibilities\":[true],\"incident_condition\":\"ALL\",\"incident_condition_visibility\":\"IS\",\"incident_condition_kind\":\"IS\",\"incident_condition_status\":\"IS\",\"incident_condition_environment\":\"IS\",\"incident_condition_severity\":\"IS\",\"incident_condition_incident_type\":\"IS\",\"incident_condition_service\":\"IS\",\"incident_condition_functionality\":\"IS\",\"incident_condition_group\":\"IS\"},\"environment_ids\":[\"string\"],\"severity_ids\":[\"string\"],\"incident_type_ids\":[\"string\"],\"service_ids\":[\"string\"],\"group_ids\":[\"string\"]}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflows\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"workflows\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"slug\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"command\\\":\\\"string\\\",\\\"wait\\\":\\\"string\\\",\\\"repeat_every_duration\\\":\\\"string\\\",\\\"repeat_on\\\":[\\\"S\\\"],\\\"enabled\\\":true,\\\"position\\\":0,\\\"trigger_params\\\":{\\\"trigger_type\\\":\\\"incident\\\",\\\"triggers\\\":[\\\"incident_created\\\"],\\\"incident_kinds\\\":[\\\"example\\\"],\\\"incident_statuses\\\":[\\\"started\\\"],\\\"incident_visibilities\\\":[true],\\\"incident_condition\\\":\\\"ALL\\\",\\\"incident_condition_visibility\\\":\\\"IS\\\",\\\"incident_condition_kind\\\":\\\"IS\\\",\\\"incident_condition_status\\\":\\\"IS\\\",\\\"incident_condition_environment\\\":\\\"IS\\\",\\\"incident_condition_severity\\\":\\\"IS\\\",\\\"incident_condition_incident_type\\\":\\\"IS\\\",\\\"incident_condition_service\\\":\\\"IS\\\",\\\"incident_condition_functionality\\\":\\\"IS\\\",\\\"incident_condition_group\\\":\\\"IS\\\"},\\\"environment_ids\\\":[\\\"string\\\"],\\\"severity_ids\\\":[\\\"string\\\"],\\\"incident_type_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"group_ids\\\":[\\\"string\\\"]}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflows\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"workflows\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"slug\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"command\\\":\\\"string\\\",\\\"wait\\\":\\\"string\\\",\\\"repeat_every_duration\\\":\\\"string\\\",\\\"repeat_on\\\":[\\\"S\\\"],\\\"enabled\\\":true,\\\"position\\\":0,\\\"trigger_params\\\":{\\\"trigger_type\\\":\\\"incident\\\",\\\"triggers\\\":[\\\"incident_created\\\"],\\\"incident_kinds\\\":[\\\"example\\\"],\\\"incident_statuses\\\":[\\\"started\\\"],\\\"incident_visibilities\\\":[true],\\\"incident_condition\\\":\\\"ALL\\\",\\\"incident_condition_visibility\\\":\\\"IS\\\",\\\"incident_condition_kind\\\":\\\"IS\\\",\\\"incident_condition_status\\\":\\\"IS\\\",\\\"incident_condition_environment\\\":\\\"IS\\\",\\\"incident_condition_severity\\\":\\\"IS\\\",\\\"incident_condition_incident_type\\\":\\\"IS\\\",\\\"incident_condition_service\\\":\\\"IS\\\",\\\"incident_condition_functionality\\\":\\\"IS\\\",\\\"incident_condition_group\\\":\\\"IS\\\"},\\\"environment_ids\\\":[\\\"string\\\"],\\\"severity_ids\\\":[\\\"string\\\"],\\\"incident_type_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"group_ids\\\":[\\\"string\\\"]}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflows\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"workflows\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"slug\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"command\\\":\\\"string\\\",\\\"wait\\\":\\\"string\\\",\\\"repeat_every_duration\\\":\\\"string\\\",\\\"repeat_on\\\":[\\\"S\\\"],\\\"enabled\\\":true,\\\"position\\\":0,\\\"trigger_params\\\":{\\\"trigger_type\\\":\\\"incident\\\",\\\"triggers\\\":[\\\"incident_created\\\"],\\\"incident_kinds\\\":[\\\"example\\\"],\\\"incident_statuses\\\":[\\\"started\\\"],\\\"incident_visibilities\\\":[true],\\\"incident_condition\\\":\\\"ALL\\\",\\\"incident_condition_visibility\\\":\\\"IS\\\",\\\"incident_condition_kind\\\":\\\"IS\\\",\\\"incident_condition_status\\\":\\\"IS\\\",\\\"incident_condition_environment\\\":\\\"IS\\\",\\\"incident_condition_severity\\\":\\\"IS\\\",\\\"incident_condition_incident_type\\\":\\\"IS\\\",\\\"incident_condition_service\\\":\\\"IS\\\",\\\"incident_condition_functionality\\\":\\\"IS\\\",\\\"incident_condition_group\\\":\\\"IS\\\"},\\\"environment_ids\\\":[\\\"string\\\"],\\\"severity_ids\\\":[\\\"string\\\"],\\\"incident_type_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"group_ids\\\":[\\\"string\\\"]}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List workflows",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Workflows"
        ],
        "description": "List workflows",
        "operationId": "listWorkflows",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/workflow_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/workflows?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflows?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflows?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflows?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/workflows/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a workflow",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Workflows"
        ],
        "description": "Retrieves a specific workflow by id",
        "operationId": "getWorkflow",
        "responses": {
          "200": {
            "description": "workflow found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "3c187dcd-31df-4d7c-8c5a-5a5405ba369b",
                    "type": "workflows",
                    "attributes": {
                      "name": "Whiplash",
                      "slug": "whiplash",
                      "description": null,
                      "command": "incident-whiplash",
                      "repeat_every_duration": null,
                      "repeat_on": [
                        "S",
                        "M",
                        "T",
                        "W",
                        "R",
                        "F",
                        "U"
                      ],
                      "wait": null,
                      "enabled": true,
                      "trigger_params": {
                        "trigger_type": "incident",
                        "incident_condition": "ALL",
                        "incident_condition_environment": "ANY",
                        "incident_condition_severity": "ANY",
                        "incident_condition_incident_type": "ANY",
                        "incident_condition_service": "ANY",
                        "incident_condition_functionality": "ANY",
                        "incident_condition_group": "ANY",
                        "triggers": [],
                        "incident_condition_status": "ANY",
                        "incident_statuses": [],
                        "incident_condition_visibility": "ANY",
                        "incident_visibilities": [],
                        "incident_condition_kind": "IS",
                        "incident_kinds": [
                          "normal"
                        ]
                      },
                      "severity_ids": [],
                      "environment_ids": [],
                      "incident_type_ids": [],
                      "service_ids": [],
                      "functionality_ids": [],
                      "group_ids": [],
                      "updated_at": "2022-05-26T19:56:53.811-07:00",
                      "created_at": "2022-05-26T19:56:53.810-07:00"
                    },
                    "relationships": {
                      "workflow_tasks": {
                        "data": []
                      },
                      "workflow_runs": {
                        "data": []
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/workflow_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/workflows/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflows/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflows/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflows/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a workflow",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Workflows"
        ],
        "description": "Update a specific workflow by id",
        "operationId": "updateWorkflow",
        "parameters": [],
        "responses": {
          "200": {
            "description": "workflow updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "3c187dcd-31df-4d7c-8c5a-5a5405ba369b",
                    "type": "workflows",
                    "attributes": {
                      "name": "Updated",
                      "slug": "updated",
                      "description": null,
                      "command": "incident-whiplash",
                      "repeat_every_duration": null,
                      "repeat_on": [
                        "S",
                        "M",
                        "T",
                        "W",
                        "R",
                        "F",
                        "U"
                      ],
                      "wait": null,
                      "enabled": true,
                      "trigger_params": {
                        "trigger_type": "incident",
                        "incident_kinds": [
                          "normal"
                        ],
                        "incident_statuses": [],
                        "incident_visibilities": [],
                        "triggers": [],
                        "incident_condition": "ALL",
                        "incident_condition_environment": "ANY",
                        "incident_condition_severity": "ANY",
                        "incident_condition_incident_type": "ANY",
                        "incident_condition_service": "ANY",
                        "incident_condition_functionality": "ANY",
                        "incident_condition_group": "ANY",
                        "incident_condition_status": "ANY",
                        "incident_condition_visibility": "ANY",
                        "incident_condition_kind": "IS"
                      },
                      "severity_ids": [],
                      "environment_ids": [],
                      "incident_type_ids": [],
                      "service_ids": [],
                      "functionality_ids": [],
                      "group_ids": [],
                      "updated_at": "2022-05-26T19:56:54.604-07:00",
                      "created_at": "2022-05-26T19:56:53.810-07:00"
                    },
                    "relationships": {
                      "workflow_tasks": {
                        "data": []
                      },
                      "workflow_runs": {
                        "data": []
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/workflow_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_workflow"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/workflows/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"workflows\",\"attributes\":{\"name\":\"string\",\"slug\":\"string\",\"description\":\"string\",\"command\":\"string\",\"triggers\":[\"incident_created\"],\"wait\":\"string\",\"repeat_every_duration\":\"string\",\"enabled\":true,\"position\":0,\"trigger_params\":{\"trigger_type\":\"incident\",\"triggers\":[\"incident_created\"],\"incident_kinds\":[\"example\"],\"incident_statuses\":[\"started\"],\"incident_visibilities\":[true],\"incident_condition\":\"ALL\",\"incident_condition_visibility\":\"IS\",\"incident_condition_kind\":\"IS\",\"incident_condition_status\":\"IS\",\"incident_condition_environment\":\"IS\",\"incident_condition_severity\":\"IS\",\"incident_condition_incident_type\":\"IS\",\"incident_condition_service\":\"IS\",\"incident_condition_functionality\":\"IS\",\"incident_condition_group\":\"IS\"},\"environment_ids\":[\"string\"],\"severity_ids\":[\"string\"],\"incident_type_ids\":[\"string\"],\"service_ids\":[\"string\"],\"group_ids\":[\"string\"]}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflows/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"workflows\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"slug\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"command\\\":\\\"string\\\",\\\"triggers\\\":[\\\"incident_created\\\"],\\\"wait\\\":\\\"string\\\",\\\"repeat_every_duration\\\":\\\"string\\\",\\\"enabled\\\":true,\\\"position\\\":0,\\\"trigger_params\\\":{\\\"trigger_type\\\":\\\"incident\\\",\\\"triggers\\\":[\\\"incident_created\\\"],\\\"incident_kinds\\\":[\\\"example\\\"],\\\"incident_statuses\\\":[\\\"started\\\"],\\\"incident_visibilities\\\":[true],\\\"incident_condition\\\":\\\"ALL\\\",\\\"incident_condition_visibility\\\":\\\"IS\\\",\\\"incident_condition_kind\\\":\\\"IS\\\",\\\"incident_condition_status\\\":\\\"IS\\\",\\\"incident_condition_environment\\\":\\\"IS\\\",\\\"incident_condition_severity\\\":\\\"IS\\\",\\\"incident_condition_incident_type\\\":\\\"IS\\\",\\\"incident_condition_service\\\":\\\"IS\\\",\\\"incident_condition_functionality\\\":\\\"IS\\\",\\\"incident_condition_group\\\":\\\"IS\\\"},\\\"environment_ids\\\":[\\\"string\\\"],\\\"severity_ids\\\":[\\\"string\\\"],\\\"incident_type_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"group_ids\\\":[\\\"string\\\"]}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflows/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"workflows\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"slug\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"command\\\":\\\"string\\\",\\\"triggers\\\":[\\\"incident_created\\\"],\\\"wait\\\":\\\"string\\\",\\\"repeat_every_duration\\\":\\\"string\\\",\\\"enabled\\\":true,\\\"position\\\":0,\\\"trigger_params\\\":{\\\"trigger_type\\\":\\\"incident\\\",\\\"triggers\\\":[\\\"incident_created\\\"],\\\"incident_kinds\\\":[\\\"example\\\"],\\\"incident_statuses\\\":[\\\"started\\\"],\\\"incident_visibilities\\\":[true],\\\"incident_condition\\\":\\\"ALL\\\",\\\"incident_condition_visibility\\\":\\\"IS\\\",\\\"incident_condition_kind\\\":\\\"IS\\\",\\\"incident_condition_status\\\":\\\"IS\\\",\\\"incident_condition_environment\\\":\\\"IS\\\",\\\"incident_condition_severity\\\":\\\"IS\\\",\\\"incident_condition_incident_type\\\":\\\"IS\\\",\\\"incident_condition_service\\\":\\\"IS\\\",\\\"incident_condition_functionality\\\":\\\"IS\\\",\\\"incident_condition_group\\\":\\\"IS\\\"},\\\"environment_ids\\\":[\\\"string\\\"],\\\"severity_ids\\\":[\\\"string\\\"],\\\"incident_type_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"group_ids\\\":[\\\"string\\\"]}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflows/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"workflows\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"slug\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"command\\\":\\\"string\\\",\\\"triggers\\\":[\\\"incident_created\\\"],\\\"wait\\\":\\\"string\\\",\\\"repeat_every_duration\\\":\\\"string\\\",\\\"enabled\\\":true,\\\"position\\\":0,\\\"trigger_params\\\":{\\\"trigger_type\\\":\\\"incident\\\",\\\"triggers\\\":[\\\"incident_created\\\"],\\\"incident_kinds\\\":[\\\"example\\\"],\\\"incident_statuses\\\":[\\\"started\\\"],\\\"incident_visibilities\\\":[true],\\\"incident_condition\\\":\\\"ALL\\\",\\\"incident_condition_visibility\\\":\\\"IS\\\",\\\"incident_condition_kind\\\":\\\"IS\\\",\\\"incident_condition_status\\\":\\\"IS\\\",\\\"incident_condition_environment\\\":\\\"IS\\\",\\\"incident_condition_severity\\\":\\\"IS\\\",\\\"incident_condition_incident_type\\\":\\\"IS\\\",\\\"incident_condition_service\\\":\\\"IS\\\",\\\"incident_condition_functionality\\\":\\\"IS\\\",\\\"incident_condition_group\\\":\\\"IS\\\"},\\\"environment_ids\\\":[\\\"string\\\"],\\\"severity_ids\\\":[\\\"string\\\"],\\\"incident_type_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"group_ids\\\":[\\\"string\\\"]}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a workflow",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Workflows"
        ],
        "description": "Delete a specific workflow by id",
        "operationId": "deleteWorkflow",
        "responses": {
          "200": {
            "description": "workflow deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "3c187dcd-31df-4d7c-8c5a-5a5405ba369b",
                    "type": "workflows",
                    "attributes": {
                      "name": "Whiplash",
                      "slug": "whiplash",
                      "description": null,
                      "command": null,
                      "repeat_every_duration": null,
                      "repeat_on": [
                        "S",
                        "M",
                        "T",
                        "W",
                        "R",
                        "F",
                        "U"
                      ],
                      "wait": null,
                      "enabled": true,
                      "trigger_params": {
                        "trigger_type": "incident",
                        "incident_condition": "ALL",
                        "incident_condition_environment": "ANY",
                        "incident_condition_severity": "ANY",
                        "incident_condition_incident_type": "ANY",
                        "incident_condition_service": "ANY",
                        "incident_condition_functionality": "ANY",
                        "incident_condition_group": "ANY",
                        "triggers": [],
                        "incident_condition_status": "ANY",
                        "incident_statuses": [],
                        "incident_condition_visibility": "ANY",
                        "incident_visibilities": [],
                        "incident_condition_kind": "IS",
                        "incident_kinds": [
                          "normal"
                        ]
                      },
                      "severity_ids": [],
                      "environment_ids": [],
                      "incident_type_ids": [],
                      "service_ids": [],
                      "functionality_ids": [],
                      "group_ids": [],
                      "updated_at": "2022-05-26T19:56:54.857-07:00",
                      "created_at": "2022-05-26T19:56:53.810-07:00"
                    },
                    "relationships": {
                      "workflow_tasks": {
                        "data": []
                      },
                      "workflow_runs": {
                        "data": []
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/workflow_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/workflows/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/workflows/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/workflows/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/workflows/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incidents/{incident_id}/action_items": {
      "parameters": [
        {
          "name": "incident_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Creates a incident action item",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Action Items"
        ],
        "description": "Creates a new action item from provided data",
        "operationId": "createIncidentActionItem",
        "parameters": [],
        "responses": {
          "201": {
            "description": "incident_action_item created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "f95f769c-6750-4b59-997f-58a4d234b63e",
                    "type": "incident_action_items",
                    "attributes": {
                      "incident_id": "ac12d80c-d734-48b7-aa1f-f2be5b383518",
                      "description": "New action item description",
                      "assigned_to": null,
                      "kind": "task",
                      "priority": "medium",
                      "status": "open",
                      "jira_issue_id": null,
                      "jira_issue_url": null,
                      "asana_task_id": null,
                      "asana_task_url": null,
                      "github_issue_id": null,
                      "github_issue_url": null,
                      "shortcut_story_id": null,
                      "shortcut_story_url": null,
                      "shortcut_task_id": null,
                      "shortcut_task_url": null,
                      "trello_card_id": null,
                      "trello_card_url": null,
                      "linear_issue_id": null,
                      "linear_issue_url": null,
                      "zendesk_ticket_id": null,
                      "zendesk_ticket_url": null,
                      "airtable_base_key": null,
                      "airtable_table_name": null,
                      "airtable_record_id": null,
                      "airtable_record_url": null,
                      "freshservice_ticket_id": null,
                      "freshservice_ticket_url": null,
                      "freshservice_task_id": null,
                      "freshservice_task_url": null,
                      "created_at": "2022-05-26T19:57:16.044-07:00",
                      "updated_at": "2022-05-26T19:57:16.044-07:00",
                      "summary": "New action item summary"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_action_item_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "summary": [
                    "can't be blank"
                  ],
                  "summary_raw": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_incident_action_item"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/incidents/%7Bincident_id%7D/action_items \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_action_items\",\"attributes\":{\"summary\":\"string\",\"description\":\"string\",\"kind\":\"task\",\"priority\":\"high\",\"status\":\"open\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/action_items\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_action_items\\\",\\\"attributes\\\":{\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"kind\\\":\\\"task\\\",\\\"priority\\\":\\\"high\\\",\\\"status\\\":\\\"open\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bincident_id%7D/action_items\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_action_items\\\",\\\"attributes\\\":{\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"kind\\\":\\\"task\\\",\\\"priority\\\":\\\"high\\\",\\\"status\\\":\\\"open\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/action_items\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_action_items\\\",\\\"attributes\\\":{\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"kind\\\":\\\"task\\\",\\\"priority\\\":\\\"high\\\",\\\"status\\\":\\\"open\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List incident action items",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Action Items"
        ],
        "description": "List incident action items",
        "operationId": "listIncidentActionItems",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/incident_action_item_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/incidents/%7Bincident_id%7D/action_items?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/action_items?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bincident_id%7D/action_items?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/action_items?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/action_items/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a incident action item",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Action Items"
        ],
        "description": "Retrieves a specific incident_action_item by id",
        "operationId": "getIncidentActionItems",
        "responses": {
          "200": {
            "description": "incident_action_item found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "80aa0d44-4dc2-47de-8167-24dab2fea173",
                    "type": "incident_action_items",
                    "attributes": {
                      "incident_id": "ac12d80c-d734-48b7-aa1f-f2be5b383518",
                      "description": "Harum architecto enim quia.",
                      "assigned_to": null,
                      "kind": "follow_up",
                      "priority": "low",
                      "status": "open",
                      "jira_issue_id": null,
                      "jira_issue_url": null,
                      "asana_task_id": null,
                      "asana_task_url": null,
                      "github_issue_id": null,
                      "github_issue_url": null,
                      "shortcut_story_id": null,
                      "shortcut_story_url": null,
                      "shortcut_task_id": null,
                      "shortcut_task_url": null,
                      "trello_card_id": null,
                      "trello_card_url": null,
                      "linear_issue_id": null,
                      "linear_issue_url": null,
                      "zendesk_ticket_id": null,
                      "zendesk_ticket_url": null,
                      "airtable_base_key": null,
                      "airtable_table_name": null,
                      "airtable_record_id": null,
                      "airtable_record_url": null,
                      "freshservice_ticket_id": null,
                      "freshservice_ticket_url": null,
                      "freshservice_task_id": null,
                      "freshservice_task_url": null,
                      "created_at": "2022-05-26T19:57:15.120-07:00",
                      "updated_at": "2022-05-26T19:57:15.120-07:00",
                      "summary": "Ea officia cumque ea."
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_action_item_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/action_items/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/action_items/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/action_items/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/action_items/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a incident action item",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Action Items"
        ],
        "description": "Update a specific incident action item by id",
        "operationId": "updateIncidentActionItem",
        "parameters": [],
        "responses": {
          "200": {
            "description": "incident_action_item updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "80aa0d44-4dc2-47de-8167-24dab2fea173",
                    "type": "incident_action_items",
                    "attributes": {
                      "incident_id": "ac12d80c-d734-48b7-aa1f-f2be5b383518",
                      "description": "Action item description updated",
                      "assigned_to": null,
                      "kind": "follow_up",
                      "priority": "low",
                      "status": "open",
                      "jira_issue_id": null,
                      "jira_issue_url": null,
                      "asana_task_id": null,
                      "asana_task_url": null,
                      "github_issue_id": null,
                      "github_issue_url": null,
                      "shortcut_story_id": null,
                      "shortcut_story_url": null,
                      "shortcut_task_id": null,
                      "shortcut_task_url": null,
                      "trello_card_id": null,
                      "trello_card_url": null,
                      "linear_issue_id": null,
                      "linear_issue_url": null,
                      "zendesk_ticket_id": null,
                      "zendesk_ticket_url": null,
                      "airtable_base_key": null,
                      "airtable_table_name": null,
                      "airtable_record_id": null,
                      "airtable_record_url": null,
                      "freshservice_ticket_id": null,
                      "freshservice_ticket_url": null,
                      "freshservice_task_id": null,
                      "freshservice_task_url": null,
                      "created_at": "2022-05-26T19:57:15.120-07:00",
                      "updated_at": "2022-05-26T19:57:16.690-07:00",
                      "summary": "Action item summary updated"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_action_item_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_action_item"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/action_items/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_action_items\",\"attributes\":{\"summary\":\"string\",\"description\":\"string\",\"kind\":\"task\",\"priority\":\"high\",\"status\":\"open\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/action_items/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_action_items\\\",\\\"attributes\\\":{\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"kind\\\":\\\"task\\\",\\\"priority\\\":\\\"high\\\",\\\"status\\\":\\\"open\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/action_items/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_action_items\\\",\\\"attributes\\\":{\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"kind\\\":\\\"task\\\",\\\"priority\\\":\\\"high\\\",\\\"status\\\":\\\"open\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/action_items/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_action_items\\\",\\\"attributes\\\":{\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"kind\\\":\\\"task\\\",\\\"priority\\\":\\\"high\\\",\\\"status\\\":\\\"open\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a incident action item",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Action Items"
        ],
        "description": "Delete a specific incident action item by id",
        "operationId": "deleteIncidentActionItem",
        "responses": {
          "200": {
            "description": "incident_action_item deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "80aa0d44-4dc2-47de-8167-24dab2fea173",
                    "type": "incident_action_items",
                    "attributes": {
                      "incident_id": "ac12d80c-d734-48b7-aa1f-f2be5b383518",
                      "description": "Harum architecto enim quia.",
                      "assigned_to": null,
                      "kind": "follow_up",
                      "priority": "low",
                      "status": "open",
                      "jira_issue_id": null,
                      "jira_issue_url": null,
                      "asana_task_id": null,
                      "asana_task_url": null,
                      "github_issue_id": null,
                      "github_issue_url": null,
                      "shortcut_story_id": null,
                      "shortcut_story_url": null,
                      "shortcut_task_id": null,
                      "shortcut_task_url": null,
                      "trello_card_id": null,
                      "trello_card_url": null,
                      "linear_issue_id": null,
                      "linear_issue_url": null,
                      "zendesk_ticket_id": null,
                      "zendesk_ticket_url": null,
                      "airtable_base_key": null,
                      "airtable_table_name": null,
                      "airtable_record_id": null,
                      "airtable_record_url": null,
                      "freshservice_ticket_id": null,
                      "freshservice_ticket_url": null,
                      "freshservice_task_id": null,
                      "freshservice_task_url": null,
                      "created_at": "2022-05-26T19:57:15.120-07:00",
                      "updated_at": "2022-05-26T19:57:16.964-07:00",
                      "summary": "Ea officia cumque ea."
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_action_item_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/action_items/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/action_items/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/action_items/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/action_items/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incidents/{id}/custom_field_selections": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Creates a incident_custom_field_selection",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "IncidentCustomFieldSelections"
        ],
        "description": "Creates a new incident_custom_field_selection from provided data",
        "operationId": "createIncidentCustomFieldSelection",
        "parameters": [],
        "responses": {
          "201": {
            "description": "incident_custom_field_selection created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "2",
                    "type": "incident_custom_field_selections",
                    "attributes": {
                      "incident_id": "6459974a-b8b4-4889-8941-a632e8ae655a",
                      "custom_field_id": 8,
                      "value": "Test custom field",
                      "selected_option_ids": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_custom_field_selection_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "base": [
                    "requires either value or at least one selected_option"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_incident_custom_field_selection"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/incidents/%7Bid%7D/custom_field_selections \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_custom_field_selections\",\"attributes\":{\"custom_field_id\":0,\"value\":\"string\",\"selected_option_ids\":[0]}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bid%7D/custom_field_selections\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_custom_field_selections\\\",\\\"attributes\\\":{\\\"custom_field_id\\\":0,\\\"value\\\":\\\"string\\\",\\\"selected_option_ids\\\":[0]}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bid%7D/custom_field_selections\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_custom_field_selections\\\",\\\"attributes\\\":{\\\"custom_field_id\\\":0,\\\"value\\\":\\\"string\\\",\\\"selected_option_ids\\\":[0]}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bid%7D/custom_field_selections\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_custom_field_selections\\\",\\\"attributes\\\":{\\\"custom_field_id\\\":0,\\\"value\\\":\\\"string\\\",\\\"selected_option_ids\\\":[0]}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List incident_custom_field_selections",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "IncidentCustomFieldSelections"
        ],
        "description": "List incident_custom_field_selections",
        "operationId": "listIncidentCustomFieldSelections",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/incident_custom_field_selection_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/incidents/%7Bid%7D/custom_field_selections?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bid%7D/custom_field_selections?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bid%7D/custom_field_selections?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bid%7D/custom_field_selections?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incident_custom_field_selections/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a incident_custom_field_selection",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "IncidentCustomFieldSelections"
        ],
        "description": "Retrieves a specific incident_custom_field_selection by id",
        "operationId": "getIncidentCustomFieldSelection",
        "responses": {
          "200": {
            "description": "incident_custom_field_selection found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "1",
                    "type": "incident_custom_field_selections",
                    "attributes": {
                      "incident_id": "6459974a-b8b4-4889-8941-a632e8ae655a",
                      "custom_field_id": 7,
                      "value": "Dolor quis et ipsum.",
                      "selected_option_ids": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_custom_field_selection_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/incident_custom_field_selections/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_custom_field_selections/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_custom_field_selections/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_custom_field_selections/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a incident_custom_field_selection",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "IncidentCustomFieldSelections"
        ],
        "description": "Update a specific incident_custom_field_selection by id",
        "operationId": "updateIncidentCustomFieldSelection",
        "parameters": [],
        "responses": {
          "200": {
            "description": "incident_custom_field_selection updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "1",
                    "type": "incident_custom_field_selections",
                    "attributes": {
                      "incident_id": "6459974a-b8b4-4889-8941-a632e8ae655a",
                      "custom_field_id": 7,
                      "value": "Test update custom field",
                      "selected_option_ids": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_custom_field_selection_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_custom_field_selection"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/incident_custom_field_selections/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_custom_field_selections\",\"attributes\":{\"value\":\"string\",\"selected_option_ids\":[0]}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_custom_field_selections/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_custom_field_selections\\\",\\\"attributes\\\":{\\\"value\\\":\\\"string\\\",\\\"selected_option_ids\\\":[0]}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_custom_field_selections/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_custom_field_selections\\\",\\\"attributes\\\":{\\\"value\\\":\\\"string\\\",\\\"selected_option_ids\\\":[0]}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_custom_field_selections/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_custom_field_selections\\\",\\\"attributes\\\":{\\\"value\\\":\\\"string\\\",\\\"selected_option_ids\\\":[0]}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a incident_custom_field_selection",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "IncidentCustomFieldSelections"
        ],
        "description": "Delete a specific incident_custom_field_selection by id",
        "operationId": "deleteIncidentCustomFieldSelection",
        "responses": {
          "200": {
            "description": "incident_custom_field_selection deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "1",
                    "type": "incident_custom_field_selections",
                    "attributes": {
                      "incident_id": "6459974a-b8b4-4889-8941-a632e8ae655a",
                      "custom_field_id": 7,
                      "value": "Dolor quis et ipsum.",
                      "selected_option_ids": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_custom_field_selection_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/incident_custom_field_selections/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_custom_field_selections/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_custom_field_selections/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_custom_field_selections/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incidents/{incident_id}/events": {
      "parameters": [
        {
          "name": "incident_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Creates a incident event",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Events"
        ],
        "description": "Creates a new event from provided data",
        "operationId": "createIncidentEvent",
        "parameters": [],
        "responses": {
          "201": {
            "description": "incident_event created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "1b655af8-6587-4214-b703-120a5be06e2b",
                    "type": "incident_events",
                    "attributes": {
                      "incident_id": "9d1ef841-505a-4945-bb56-d0e95f96c643",
                      "visibility": "external",
                      "occurred_at": "2022-05-26T19:57:59.290-07:00",
                      "created_at": "2022-05-26T19:57:59.290-07:00",
                      "updated_at": "2022-05-26T19:57:59.290-07:00",
                      "event": "New Event"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_event_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "event": [
                    "can't be blank"
                  ],
                  "event_raw": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_incident_event"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/incidents/%7Bincident_id%7D/events \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_events\",\"attributes\":{\"event\":\"string\",\"visibility\":\"internal\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/events\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_events\\\",\\\"attributes\\\":{\\\"event\\\":\\\"string\\\",\\\"visibility\\\":\\\"internal\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bincident_id%7D/events\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_events\\\",\\\"attributes\\\":{\\\"event\\\":\\\"string\\\",\\\"visibility\\\":\\\"internal\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/events\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_events\\\",\\\"attributes\\\":{\\\"event\\\":\\\"string\\\",\\\"visibility\\\":\\\"internal\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List incident events",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Events"
        ],
        "description": "List incident events",
        "operationId": "listIncidentEvents",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/incident_event_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/incidents/%7Bincident_id%7D/events?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/events?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bincident_id%7D/events?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/events?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/events/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a incident event",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Events"
        ],
        "description": "Retrieves a specific incident_event by id",
        "operationId": "getIncidentEvents",
        "responses": {
          "200": {
            "description": "incident_event found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "61a5a0dd-1180-4e2d-a163-ff15e4448479",
                    "type": "incident_events",
                    "attributes": {
                      "incident_id": "9d1ef841-505a-4945-bb56-d0e95f96c643",
                      "visibility": "internal",
                      "occurred_at": "2022-05-26T19:57:58.883-07:00",
                      "created_at": "2022-05-26T19:57:58.883-07:00",
                      "updated_at": "2022-05-26T19:57:58.883-07:00",
                      "event": "Magnam dicta quia eos."
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_event_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/events/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/events/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/events/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/events/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a incident event",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Events"
        ],
        "description": "Update a specific incident event by id",
        "operationId": "updateIncidentEvent",
        "parameters": [],
        "responses": {
          "200": {
            "description": "incident_event updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "61a5a0dd-1180-4e2d-a163-ff15e4448479",
                    "type": "incident_events",
                    "attributes": {
                      "incident_id": "9d1ef841-505a-4945-bb56-d0e95f96c643",
                      "visibility": "internal",
                      "occurred_at": "2022-05-26T19:57:58.883-07:00",
                      "created_at": "2022-05-26T19:57:58.883-07:00",
                      "updated_at": "2022-05-26T19:57:59.928-07:00",
                      "event": "Event updated"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_event_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_event"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/events/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_events\",\"attributes\":{\"event\":\"string\",\"visibility\":\"internal\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/events/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_events\\\",\\\"attributes\\\":{\\\"event\\\":\\\"string\\\",\\\"visibility\\\":\\\"internal\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/events/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_events\\\",\\\"attributes\\\":{\\\"event\\\":\\\"string\\\",\\\"visibility\\\":\\\"internal\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/events/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_events\\\",\\\"attributes\\\":{\\\"event\\\":\\\"string\\\",\\\"visibility\\\":\\\"internal\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a incident event",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Events"
        ],
        "description": "Delete a specific incident event by id",
        "operationId": "deleteIncidentEvent",
        "responses": {
          "200": {
            "description": "incident_event deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "61a5a0dd-1180-4e2d-a163-ff15e4448479",
                    "type": "incident_events",
                    "attributes": {
                      "incident_id": "9d1ef841-505a-4945-bb56-d0e95f96c643",
                      "visibility": "internal",
                      "occurred_at": "2022-05-26T19:57:58.883-07:00",
                      "created_at": "2022-05-26T19:57:58.883-07:00",
                      "updated_at": "2022-05-26T19:58:00.197-07:00",
                      "event": "Magnam dicta quia eos."
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_event_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/events/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/events/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/events/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/events/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incidents/{incident_id}/feedbacks": {
      "parameters": [
        {
          "name": "incident_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Creates a incident feedback",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Feedbacks"
        ],
        "description": "Creates a new feedback from provided data",
        "operationId": "createIncidentFeedback",
        "parameters": [],
        "responses": {
          "201": {
            "description": "incident_feedback created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "f3e1c152-003d-4c44-bad7-09a125feeba3",
                    "type": "incident_feedbacks",
                    "attributes": {
                      "rating": 4,
                      "rating_humanized": "Very satisfied",
                      "feedback": "New Feedback",
                      "anonymous": true,
                      "updated_at": "2022-05-26T19:58:26.380-07:00",
                      "created_at": "2022-05-26T19:58:26.380-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_feedback_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "feedback": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_incident_feedback"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/incidents/%7Bincident_id%7D/feedbacks \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_feedbacks\",\"attributes\":{\"feedback\":\"string\",\"rating\":4,\"anonymous\":true}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/feedbacks\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_feedbacks\\\",\\\"attributes\\\":{\\\"feedback\\\":\\\"string\\\",\\\"rating\\\":4,\\\"anonymous\\\":true}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bincident_id%7D/feedbacks\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_feedbacks\\\",\\\"attributes\\\":{\\\"feedback\\\":\\\"string\\\",\\\"rating\\\":4,\\\"anonymous\\\":true}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/feedbacks\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_feedbacks\\\",\\\"attributes\\\":{\\\"feedback\\\":\\\"string\\\",\\\"rating\\\":4,\\\"anonymous\\\":true}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List incident feedbacks",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Feedbacks"
        ],
        "description": "List incident feedbacks",
        "operationId": "listIncidentFeedbacks",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/incident_feedback_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/incidents/%7Bincident_id%7D/feedbacks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/feedbacks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bincident_id%7D/feedbacks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/feedbacks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/feedbacks/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a incident feedback",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Feedbacks"
        ],
        "description": "Retrieves a specific incident_feedback by id",
        "operationId": "getIncidentFeedbacks",
        "responses": {
          "200": {
            "description": "incident_feedback found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "6963b5ac-68bb-415b-b7f1-77b1ed8e0478",
                    "type": "incident_feedbacks",
                    "attributes": {
                      "rating": 4,
                      "rating_humanized": "Very satisfied",
                      "feedback": "Tempora voluptatem cumque perferendis.",
                      "anonymous": false,
                      "updated_at": "2022-05-26T19:58:24.730-07:00",
                      "created_at": "2022-05-26T19:58:24.730-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_feedback_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/feedbacks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/feedbacks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/feedbacks/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/feedbacks/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a incident feedback",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Feedbacks"
        ],
        "description": "Update a specific incident feedback by id",
        "operationId": "updateIncidentFeedback",
        "parameters": [],
        "responses": {
          "200": {
            "description": "incident_feedback updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "6963b5ac-68bb-415b-b7f1-77b1ed8e0478",
                    "type": "incident_feedbacks",
                    "attributes": {
                      "rating": 3,
                      "rating_humanized": "Somewhat satisfied",
                      "feedback": "Feedback updated",
                      "anonymous": false,
                      "updated_at": "2022-05-26T19:58:26.987-07:00",
                      "created_at": "2022-05-26T19:58:24.730-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_feedback_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_feedback"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/feedbacks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_feedbacks\",\"attributes\":{\"feedback\":\"string\",\"rating\":4,\"anonymous\":true}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/feedbacks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_feedbacks\\\",\\\"attributes\\\":{\\\"feedback\\\":\\\"string\\\",\\\"rating\\\":4,\\\"anonymous\\\":true}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/feedbacks/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_feedbacks\\\",\\\"attributes\\\":{\\\"feedback\\\":\\\"string\\\",\\\"rating\\\":4,\\\"anonymous\\\":true}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/feedbacks/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_feedbacks\\\",\\\"attributes\\\":{\\\"feedback\\\":\\\"string\\\",\\\"rating\\\":4,\\\"anonymous\\\":true}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a incident feedback",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Feedbacks"
        ],
        "description": "Delete a specific incident feedback by id",
        "operationId": "deleteIncidentFeedback",
        "responses": {
          "200": {
            "description": "incident_feedback deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "6963b5ac-68bb-415b-b7f1-77b1ed8e0478",
                    "type": "incident_feedbacks",
                    "attributes": {
                      "rating": 4,
                      "rating_humanized": "Very satisfied",
                      "feedback": "Tempora voluptatem cumque perferendis.",
                      "anonymous": false,
                      "updated_at": "2022-05-26T19:58:27.259-07:00",
                      "created_at": "2022-05-26T19:58:24.730-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_feedback_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/feedbacks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/feedbacks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/feedbacks/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/feedbacks/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/post_mortems": {
      "get": {
        "summary": "List incident postmortems",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Postmortems"
        ],
        "description": "List incident postmortems",
        "operationId": "listIncidentPostMortems",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[search]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[environment]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[severity]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[user_id]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[functionalities]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[services]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "filter[teams]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/incident_post_mortem_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/post_mortems?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE&filter%5Bsearch%5D=SOME_STRING_VALUE&filter%5Bstatus%5D=SOME_STRING_VALUE&filter%5Benvironment%5D=SOME_STRING_VALUE&filter%5Bseverity%5D=SOME_STRING_VALUE&filter%5Btype%5D=SOME_STRING_VALUE&filter%5Buser_id%5D=SOME_INTEGER_VALUE&filter%5Bfunctionalities%5D=SOME_STRING_VALUE&filter%5Bservices%5D=SOME_ARRAY_VALUE&filter%5Bteams%5D=SOME_ARRAY_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/post_mortems?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE&filter%5Bsearch%5D=SOME_STRING_VALUE&filter%5Bstatus%5D=SOME_STRING_VALUE&filter%5Benvironment%5D=SOME_STRING_VALUE&filter%5Bseverity%5D=SOME_STRING_VALUE&filter%5Btype%5D=SOME_STRING_VALUE&filter%5Buser_id%5D=SOME_INTEGER_VALUE&filter%5Bfunctionalities%5D=SOME_STRING_VALUE&filter%5Bservices%5D=SOME_ARRAY_VALUE&filter%5Bteams%5D=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/post_mortems?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE&filter%5Bsearch%5D=SOME_STRING_VALUE&filter%5Bstatus%5D=SOME_STRING_VALUE&filter%5Benvironment%5D=SOME_STRING_VALUE&filter%5Bseverity%5D=SOME_STRING_VALUE&filter%5Btype%5D=SOME_STRING_VALUE&filter%5Buser_id%5D=SOME_INTEGER_VALUE&filter%5Bfunctionalities%5D=SOME_STRING_VALUE&filter%5Bservices%5D=SOME_ARRAY_VALUE&filter%5Bteams%5D=SOME_ARRAY_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/post_mortems?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE&filter%5Bsearch%5D=SOME_STRING_VALUE&filter%5Bstatus%5D=SOME_STRING_VALUE&filter%5Benvironment%5D=SOME_STRING_VALUE&filter%5Bseverity%5D=SOME_STRING_VALUE&filter%5Btype%5D=SOME_STRING_VALUE&filter%5Buser_id%5D=SOME_INTEGER_VALUE&filter%5Bfunctionalities%5D=SOME_STRING_VALUE&filter%5Bservices%5D=SOME_ARRAY_VALUE&filter%5Bteams%5D=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/post_mortems/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a incident postmortem",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Postmortems"
        ],
        "description": "List incidents postmortems",
        "operationId": "ListIncidentPostmortem",
        "responses": {
          "200": {
            "description": "incident_post_mortem found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "554fb7b2-60e4-4f10-8441-84d4da312189",
                    "type": "incident_post_mortems",
                    "attributes": {
                      "incident_id": "bd6b5825-c76d-4862-a68d-9f1c080c5f1d",
                      "title": "Excepturi magnam aliquam veritatis.",
                      "url": "https://test.rootly.com/account/post_mortems/excepturi-magnam-aliquam-veritatis",
                      "content": "<div>\n   <h1>{{incident.created_at | date: \"%Y-%m-%d\"}} - {{incident.title}}</h1>\n   <h1><strong>Leadup</strong></h1>\n   <br><span style=\"color: #7a869a\">Describe the circumstances that led to this incident</span><br><br>\n   <h1><strong>Fault</strong></h1>\n   <br><span style=\"color: #7a869a\">Describe what failed to work as expected</span><br><br>\n   <h1><strong>Detection</strong></h1>\n   <br><span style=\"color: #7a869a\">Describe how the incident was detected</span><br><br>\n   <h1><strong>Root causes</strong></h1>\n   <br><span style=\"color: #7a869a\">Run a 5-whys analysis to understand the true causes of the incident</span><br><br>\n   <h1><strong>Mitigation and resolution</strong></h1>\n   <br><span style=\"color: #7a869a\">What steps did you take to resolve this incident?</span><br><br>\n   <h1><strong>Lessons learnt</strong></h1>\n   <br><span style=\"color: #7a869a\">What went well? What could have gone better? What else did you learn?</span><br><br>\n</div>",
                      "started_at": "2022-05-26T19:58:43.585-07:00",
                      "mitigated_at": null,
                      "resolved_at": null,
                      "show_timeline": true,
                      "show_timeline_starred_only": false,
                      "show_timeline_genius": true,
                      "show_timeline_trail": true,
                      "show_timeline_tasks": true,
                      "show_timeline_action_items": true,
                      "show_functionalities_impacted": true,
                      "show_services_impacted": true,
                      "show_groups_impacted": true,
                      "created_at": "2022-05-26T19:58:51.576-07:00",
                      "updated_at": "2022-05-26T19:58:51.576-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_post_mortem_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/post_mortems/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/post_mortems/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/post_mortems/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/post_mortems/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a incident postmortem",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Postmortems"
        ],
        "description": "Update a specific incident post_mortem by id",
        "operationId": "updateIncidentPostmortem",
        "parameters": [],
        "responses": {
          "200": {
            "description": "incident_post_mortem updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "554fb7b2-60e4-4f10-8441-84d4da312189",
                    "type": "incident_post_mortems",
                    "attributes": {
                      "incident_id": "bd6b5825-c76d-4862-a68d-9f1c080c5f1d",
                      "title": "Postmortem updated",
                      "url": "https://test.rootly.com/account/post_mortems/excepturi-magnam-aliquam-veritatis",
                      "content": "<div>\n   <h1>{{incident.created_at | date: \"%Y-%m-%d\"}} - {{incident.title}}</h1>\n   <h1><strong>Leadup</strong></h1>\n   <br><span style=\"color: #7a869a\">Describe the circumstances that led to this incident</span><br><br>\n   <h1><strong>Fault</strong></h1>\n   <br><span style=\"color: #7a869a\">Describe what failed to work as expected</span><br><br>\n   <h1><strong>Detection</strong></h1>\n   <br><span style=\"color: #7a869a\">Describe how the incident was detected</span><br><br>\n   <h1><strong>Root causes</strong></h1>\n   <br><span style=\"color: #7a869a\">Run a 5-whys analysis to understand the true causes of the incident</span><br><br>\n   <h1><strong>Mitigation and resolution</strong></h1>\n   <br><span style=\"color: #7a869a\">What steps did you take to resolve this incident?</span><br><br>\n   <h1><strong>Lessons learnt</strong></h1>\n   <br><span style=\"color: #7a869a\">What went well? What could have gone better? What else did you learn?</span><br><br>\n</div>",
                      "started_at": "2022-05-26T19:58:43.585-07:00",
                      "mitigated_at": null,
                      "resolved_at": null,
                      "show_timeline": false,
                      "show_timeline_starred_only": false,
                      "show_timeline_genius": true,
                      "show_timeline_trail": true,
                      "show_timeline_tasks": true,
                      "show_timeline_action_items": true,
                      "show_functionalities_impacted": true,
                      "show_services_impacted": true,
                      "show_groups_impacted": true,
                      "created_at": "2022-05-26T19:58:51.576-07:00",
                      "updated_at": "2022-05-26T19:58:53.836-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_post_mortem_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_post_mortem"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/post_mortems/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_post_mortems\",\"attributes\":{\"title\":\"string\",\"status\":\"draft\",\"started_at\":\"string\",\"mitigated_at\":\"string\",\"resolved_at\":\"string\",\"show_timeline\":true,\"show_timeline_trail\":true,\"show_timeline_genius\":true,\"show_timeline_tasks\":true,\"show_timeline_action_items\":true,\"show_services_impacted\":true,\"show_functionalities_impacted\":true,\"show_groups_impacted\":true,\"show_alerts_attached\":true,\"cause_ids\":[\"string\"]}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/post_mortems/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_post_mortems\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"status\\\":\\\"draft\\\",\\\"started_at\\\":\\\"string\\\",\\\"mitigated_at\\\":\\\"string\\\",\\\"resolved_at\\\":\\\"string\\\",\\\"show_timeline\\\":true,\\\"show_timeline_trail\\\":true,\\\"show_timeline_genius\\\":true,\\\"show_timeline_tasks\\\":true,\\\"show_timeline_action_items\\\":true,\\\"show_services_impacted\\\":true,\\\"show_functionalities_impacted\\\":true,\\\"show_groups_impacted\\\":true,\\\"show_alerts_attached\\\":true,\\\"cause_ids\\\":[\\\"string\\\"]}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/post_mortems/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_post_mortems\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"status\\\":\\\"draft\\\",\\\"started_at\\\":\\\"string\\\",\\\"mitigated_at\\\":\\\"string\\\",\\\"resolved_at\\\":\\\"string\\\",\\\"show_timeline\\\":true,\\\"show_timeline_trail\\\":true,\\\"show_timeline_genius\\\":true,\\\"show_timeline_tasks\\\":true,\\\"show_timeline_action_items\\\":true,\\\"show_services_impacted\\\":true,\\\"show_functionalities_impacted\\\":true,\\\"show_groups_impacted\\\":true,\\\"show_alerts_attached\\\":true,\\\"cause_ids\\\":[\\\"string\\\"]}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/post_mortems/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_post_mortems\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"status\\\":\\\"draft\\\",\\\"started_at\\\":\\\"string\\\",\\\"mitigated_at\\\":\\\"string\\\",\\\"resolved_at\\\":\\\"string\\\",\\\"show_timeline\\\":true,\\\"show_timeline_trail\\\":true,\\\"show_timeline_genius\\\":true,\\\"show_timeline_tasks\\\":true,\\\"show_timeline_action_items\\\":true,\\\"show_services_impacted\\\":true,\\\"show_functionalities_impacted\\\":true,\\\"show_groups_impacted\\\":true,\\\"show_alerts_attached\\\":true,\\\"cause_ids\\\":[\\\"string\\\"]}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incident_roles/{incident_role_id}/incident_role_tasks": {
      "parameters": [
        {
          "name": "incident_role_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Creates a incident_role task",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "IncidentRole Tasks"
        ],
        "description": "Creates a new task from provided data",
        "operationId": "createIncidentRoleTask",
        "parameters": [],
        "responses": {
          "201": {
            "description": "incident_role_task created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "413411a5-a514-461e-9fb8-f84ff2fcf18d",
                    "type": "incident_role_tasks",
                    "attributes": {
                      "task": "New task",
                      "description": "New task description",
                      "priority": "high",
                      "created_at": "2022-05-26T19:58:55.142-07:00",
                      "updated_at": "2022-05-26T19:58:55.142-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_role_task_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "task": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_incident_role_task"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/incident_roles/%7Bincident_role_id%7D/incident_role_tasks \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_role_tasks\",\"attributes\":{\"task\":\"string\",\"description\":\"string\",\"priority\":\"high\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_roles/%7Bincident_role_id%7D/incident_role_tasks\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_role_tasks\\\",\\\"attributes\\\":{\\\"task\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"priority\\\":\\\"high\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_roles/%7Bincident_role_id%7D/incident_role_tasks\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_role_tasks\\\",\\\"attributes\\\":{\\\"task\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"priority\\\":\\\"high\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_roles/%7Bincident_role_id%7D/incident_role_tasks\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_role_tasks\\\",\\\"attributes\\\":{\\\"task\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"priority\\\":\\\"high\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List incident_role tasks",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "IncidentRole Tasks"
        ],
        "description": "List incident_role tasks",
        "operationId": "listIncidentRoleTasks",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/incident_role_task_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/incident_roles/%7Bincident_role_id%7D/incident_role_tasks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_roles/%7Bincident_role_id%7D/incident_role_tasks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_roles/%7Bincident_role_id%7D/incident_role_tasks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_roles/%7Bincident_role_id%7D/incident_role_tasks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incident_role_tasks/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a incident_role task",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "IncidentRole Tasks"
        ],
        "description": "Retrieves a specific incident_role_task by id",
        "operationId": "getIncidentRoleTasks",
        "responses": {
          "200": {
            "description": "incident_role_task found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "e5ff74a2-44dc-4163-b421-c4bab4a498cf",
                    "type": "incident_role_tasks",
                    "attributes": {
                      "task": "Totam ducimus ipsa minima.",
                      "description": "Nihil atque quasi nisi.",
                      "priority": "medium",
                      "created_at": "2022-05-26T19:58:55.020-07:00",
                      "updated_at": "2022-05-26T19:58:55.020-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_role_task_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/incident_role_tasks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_role_tasks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_role_tasks/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_role_tasks/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a incident_role task",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "IncidentRole Tasks"
        ],
        "description": "Update a specific incident_role task by id",
        "operationId": "updateIncidentRoleTask",
        "parameters": [],
        "responses": {
          "200": {
            "description": "incident_role_task updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "e5ff74a2-44dc-4163-b421-c4bab4a498cf",
                    "type": "incident_role_tasks",
                    "attributes": {
                      "task": "Task updated",
                      "description": "Task description updated",
                      "priority": "medium",
                      "created_at": "2022-05-26T19:58:55.020-07:00",
                      "updated_at": "2022-05-26T19:58:55.756-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_role_task_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_role_task"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/incident_role_tasks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_role_tasks\",\"attributes\":{\"task\":\"string\",\"description\":\"string\",\"priority\":\"high\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_role_tasks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_role_tasks\\\",\\\"attributes\\\":{\\\"task\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"priority\\\":\\\"high\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_role_tasks/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_role_tasks\\\",\\\"attributes\\\":{\\\"task\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"priority\\\":\\\"high\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_role_tasks/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_role_tasks\\\",\\\"attributes\\\":{\\\"task\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"priority\\\":\\\"high\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a incident_role task",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "IncidentRole Tasks"
        ],
        "description": "Delete a specific incident_role task by id",
        "operationId": "deleteIncidentRoleTask",
        "responses": {
          "200": {
            "description": "incident_role_task deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "e5ff74a2-44dc-4163-b421-c4bab4a498cf",
                    "type": "incident_role_tasks",
                    "attributes": {
                      "task": "Totam ducimus ipsa minima.",
                      "description": "Nihil atque quasi nisi.",
                      "priority": "medium",
                      "created_at": "2022-05-26T19:58:55.020-07:00",
                      "updated_at": "2022-05-26T19:58:56.022-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_role_task_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/incident_role_tasks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_role_tasks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_role_tasks/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_role_tasks/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incident_roles": {
      "post": {
        "summary": "Creates a incident role",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Roles"
        ],
        "description": "Creates a new incident role from provided data",
        "operationId": "createIncidentRole",
        "parameters": [],
        "responses": {
          "201": {
            "description": "incident_role created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "c336c22b-d260-467d-b5af-fc6e2ed2fed0",
                    "type": "incident_roles",
                    "attributes": {
                      "name": "My Incident Role",
                      "summary": "My Incident Role summary",
                      "description": "My Incident Role description",
                      "enabled": true,
                      "created_at": "2022-05-26T19:58:57.433-07:00",
                      "updated_at": "2022-05-26T19:58:57.433-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_role_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "name": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_incident_role"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/incident_roles \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_roles\",\"attributes\":{\"name\":\"string\",\"summary\":\"string\",\"description\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_roles\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_roles\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_roles\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_roles\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_roles\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_roles\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List incident roles",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Roles"
        ],
        "description": "List incident roles",
        "operationId": "listIncidentRoles",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/incident_role_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/incident_roles?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_roles?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_roles?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_roles?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incident_roles/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a incident role",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Roles"
        ],
        "description": "Retrieves a specific incident_role by id",
        "operationId": "getIncidentRole",
        "responses": {
          "200": {
            "description": "incident_role found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "07bbd9af-1088-4e4a-aa07-96a35ef9af07",
                    "type": "incident_roles",
                    "attributes": {
                      "name": "Exercitationem quia dignissimos commodi.",
                      "summary": null,
                      "description": null,
                      "enabled": true,
                      "created_at": "2022-05-26T19:58:57.338-07:00",
                      "updated_at": "2022-05-26T19:58:57.338-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_role_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/incident_roles/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_roles/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_roles/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_roles/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a incident role",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Roles"
        ],
        "description": "Update a specific incident_role by id",
        "operationId": "updateIncidentRole",
        "parameters": [],
        "responses": {
          "200": {
            "description": "incident_role updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "07bbd9af-1088-4e4a-aa07-96a35ef9af07",
                    "type": "incident_roles",
                    "attributes": {
                      "name": "My Incident Role Updated",
                      "summary": "My Incident Role Summary Updated",
                      "description": "My Incident Role Description Updated",
                      "enabled": true,
                      "created_at": "2022-05-26T19:58:57.338-07:00",
                      "updated_at": "2022-05-26T19:58:58.008-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_role_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_role"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/incident_roles/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_roles\",\"attributes\":{\"name\":\"string\",\"summary\":\"string\",\"description\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_roles/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_roles\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_roles/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_roles\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_roles/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_roles\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a incident role",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Roles"
        ],
        "description": "Delete a specific incident_role by id",
        "operationId": "deleteIncidentRole",
        "responses": {
          "200": {
            "description": "incident_role deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "07bbd9af-1088-4e4a-aa07-96a35ef9af07",
                    "type": "incident_roles",
                    "attributes": {
                      "name": "Exercitationem quia dignissimos commodi.",
                      "summary": null,
                      "description": null,
                      "enabled": true,
                      "created_at": "2022-05-26T19:58:57.338-07:00",
                      "updated_at": "2022-05-26T19:58:58.242-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_role_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/incident_roles/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_roles/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_roles/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_roles/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incidents/{incident_id}/status-page-events": {
      "parameters": [
        {
          "name": "incident_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Creates a incident status page event",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Status Page Events"
        ],
        "description": "Creates a new event from provided data",
        "operationId": "createIncidentStatusPage",
        "parameters": [],
        "responses": {
          "201": {
            "description": "incident_status_page_event created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "6dacb215-32b8-4d45-a444-b4a26c6bad7d",
                    "type": "incident_status_page_events",
                    "attributes": {
                      "incident_id": "9b650492-a619-4fa4-a10e-c22f108df630",
                      "status_page_ids": [
                        "ce71a8cd-81db-48b6-a449-d1c76338f6d6"
                      ],
                      "status": "investigating",
                      "notify_subscribers": true,
                      "started_at": "2022-05-26T19:59:02.099-07:00",
                      "created_at": "2022-05-26T19:59:02.099-07:00",
                      "updated_at": "2022-05-26T19:59:02.099-07:00",
                      "event": "New Event"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_status_page_event_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "event": [
                    "can't be blank"
                  ],
                  "status_page_ids": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_incident_status_page_event"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/incidents/%7Bincident_id%7D/status-page-events \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_status_page_events\",\"attributes\":{\"event\":\"string\",\"status_page_ids\":[\"string\"],\"status\":\"investigating\",\"notify_subscribers\":false}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/status-page-events\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_status_page_events\\\",\\\"attributes\\\":{\\\"event\\\":\\\"string\\\",\\\"status_page_ids\\\":[\\\"string\\\"],\\\"status\\\":\\\"investigating\\\",\\\"notify_subscribers\\\":false}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bincident_id%7D/status-page-events\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_status_page_events\\\",\\\"attributes\\\":{\\\"event\\\":\\\"string\\\",\\\"status_page_ids\\\":[\\\"string\\\"],\\\"status\\\":\\\"investigating\\\",\\\"notify_subscribers\\\":false}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/status-page-events\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_status_page_events\\\",\\\"attributes\\\":{\\\"event\\\":\\\"string\\\",\\\"status_page_ids\\\":[\\\"string\\\"],\\\"status\\\":\\\"investigating\\\",\\\"notify_subscribers\\\":false}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List incident status page events",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Status Page Events"
        ],
        "description": "List incident status page events",
        "operationId": "listIncidentStatusPages",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/incident_status_page_event_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/incidents/%7Bincident_id%7D/status-page-events?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/status-page-events?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bincident_id%7D/status-page-events?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bincident_id%7D/status-page-events?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/status-page-events/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a incident status page event",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Status Page Events"
        ],
        "description": "Retrieves a specific incident_status_page_event by id",
        "operationId": "getIncidentStatusPages",
        "responses": {
          "200": {
            "description": "incident_status_page_event found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "440e6218-3bbf-4b82-bc9d-48b6513a929f",
                    "type": "incident_status_page_events",
                    "attributes": {
                      "incident_id": "9b650492-a619-4fa4-a10e-c22f108df630",
                      "status_page_ids": [
                        "ce71a8cd-81db-48b6-a449-d1c76338f6d6"
                      ],
                      "status": "investigating",
                      "notify_subscribers": false,
                      "started_at": "2022-05-26T19:59:01.810-07:00",
                      "created_at": "2022-05-26T19:59:01.810-07:00",
                      "updated_at": "2022-05-26T19:59:01.810-07:00",
                      "event": "Tempore inventore vitae sapiente."
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_status_page_event_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/status-page-events/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/status-page-events/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/status-page-events/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/status-page-events/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a incident status page event",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Status Page Events"
        ],
        "description": "Update a specific incident status page event by id",
        "operationId": "updateIncidentStatusPage",
        "parameters": [],
        "responses": {
          "200": {
            "description": "incident_status_page_event updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "440e6218-3bbf-4b82-bc9d-48b6513a929f",
                    "type": "incident_status_page_events",
                    "attributes": {
                      "incident_id": "9b650492-a619-4fa4-a10e-c22f108df630",
                      "status_page_ids": [
                        "4482fab7-9093-4fa7-8a35-e12afeda478a"
                      ],
                      "status": "investigating",
                      "notify_subscribers": false,
                      "started_at": "2022-05-26T19:59:01.810-07:00",
                      "created_at": "2022-05-26T19:59:01.810-07:00",
                      "updated_at": "2022-05-26T19:59:02.729-07:00",
                      "event": "Event updated"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_status_page_event_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_status_page_event"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/status-page-events/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_status_page_events\",\"attributes\":{\"event\":\"string\",\"status_page_ids\":[\"string\"],\"status\":\"investigating\",\"notify_subscribers\":false}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/status-page-events/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_status_page_events\\\",\\\"attributes\\\":{\\\"event\\\":\\\"string\\\",\\\"status_page_ids\\\":[\\\"string\\\"],\\\"status\\\":\\\"investigating\\\",\\\"notify_subscribers\\\":false}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/status-page-events/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_status_page_events\\\",\\\"attributes\\\":{\\\"event\\\":\\\"string\\\",\\\"status_page_ids\\\":[\\\"string\\\"],\\\"status\\\":\\\"investigating\\\",\\\"notify_subscribers\\\":false}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/status-page-events/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_status_page_events\\\",\\\"attributes\\\":{\\\"event\\\":\\\"string\\\",\\\"status_page_ids\\\":[\\\"string\\\"],\\\"status\\\":\\\"investigating\\\",\\\"notify_subscribers\\\":false}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a incident status page event",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Status Page Events"
        ],
        "description": "Delete a specific incident status page event by id",
        "operationId": "deleteIncidentStatusPage",
        "responses": {
          "200": {
            "description": "incident_status_page_event deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "440e6218-3bbf-4b82-bc9d-48b6513a929f",
                    "type": "incident_status_page_events",
                    "attributes": {
                      "incident_id": "9b650492-a619-4fa4-a10e-c22f108df630",
                      "status_page_ids": [
                        "ce71a8cd-81db-48b6-a449-d1c76338f6d6"
                      ],
                      "status": "investigating",
                      "notify_subscribers": false,
                      "started_at": "2022-05-26T19:59:01.810-07:00",
                      "created_at": "2022-05-26T19:59:01.810-07:00",
                      "updated_at": "2022-05-26T19:59:03.015-07:00",
                      "event": "Tempore inventore vitae sapiente."
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_status_page_event_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/status-page-events/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/status-page-events/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/status-page-events/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/status-page-events/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incident_types": {
      "post": {
        "summary": "Creates a incident_type",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Types"
        ],
        "description": "Creates a new incident_type from provided data",
        "operationId": "createIncidentType",
        "parameters": [],
        "responses": {
          "201": {
            "description": "incident_type created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "849ae36e-8e3d-4576-8c35-a2b9d6e6e255",
                    "type": "incident_types",
                    "attributes": {
                      "name": "Bug",
                      "description": "Bug caused by a human",
                      "color": "#FFF",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:59:04.354-07:00",
                      "updated_at": "2022-05-26T19:59:04.354-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_type_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "name": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_incident_type"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/incident_types \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_types\",\"attributes\":{\"name\":\"string\",\"description\":\"string\",\"color\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_types\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_types\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_types\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_types\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_types\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_types\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List incident_types",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Types"
        ],
        "description": "List incident_types",
        "operationId": "listIncident Types",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/incident_type_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/incident_types?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_types?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_types?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_types?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incident_types/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a incident_type",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Types"
        ],
        "description": "Retrieves a specific incident_type by id",
        "operationId": "getIncidentType",
        "responses": {
          "200": {
            "description": "incident_type found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "4eee455c-ff32-4437-baee-9499f1874fe9",
                    "type": "incident_types",
                    "attributes": {
                      "name": "Officiis quia non ratione.",
                      "description": "Nihil vel suscipit est.",
                      "color": "#047BF8",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:59:04.254-07:00",
                      "updated_at": "2022-05-26T19:59:04.254-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_type_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/incident_types/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_types/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_types/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_types/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a incident_type",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Types"
        ],
        "description": "Update a specific incident_type by id",
        "operationId": "updateIncidentType",
        "parameters": [],
        "responses": {
          "200": {
            "description": "incident_type updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "4eee455c-ff32-4437-baee-9499f1874fe9",
                    "type": "incident_types",
                    "attributes": {
                      "name": "P1",
                      "description": "Medium Priority",
                      "color": "#047BF8",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:59:04.254-07:00",
                      "updated_at": "2022-05-26T19:59:04.936-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_type_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident_type"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/incident_types/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incident_types\",\"attributes\":{\"name\":\"string\",\"description\":\"string\",\"color\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_types/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incident_types\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_types/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_types\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_types/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incident_types\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a incident_type",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incident Types"
        ],
        "description": "Delete a specific incident_type by id",
        "operationId": "deleteIncidentType",
        "responses": {
          "200": {
            "description": "incident_type deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "4eee455c-ff32-4437-baee-9499f1874fe9",
                    "type": "incident_types",
                    "attributes": {
                      "name": "Officiis quia non ratione.",
                      "description": "Nihil vel suscipit est.",
                      "color": "#047BF8",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:59:04.254-07:00",
                      "updated_at": "2022-05-26T19:59:05.176-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_type_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/incident_types/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incident_types/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incident_types/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incident_types/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incidents": {
      "post": {
        "summary": "Creates a incident",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incidents"
        ],
        "description": "Creates a new incident from provided data",
        "operationId": "createIncident",
        "parameters": [],
        "responses": {
          "201": {
            "description": "incident created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "4956f9ce-d0d7-4d53-b0a6-b88c92074735",
                    "type": "incidents",
                    "attributes": {
                      "sequential_id": 2,
                      "slug": "oh-no-something-is-broken",
                      "kind": "normal",
                      "title": "Oh no! Something is broken",
                      "summary": "What could it be?",
                      "status": "started",
                      "url": "https://test.rootly.com/account/incidents/oh-no-something-is-broken",
                      "user": {
                        "data": {
                          "id": "112",
                          "type": "users",
                          "attributes": {
                            "name": "Alan Langworth",
                            "email": "dwain@lowe.net",
                            "full_name": "Alan Langworth",
                            "full_name_with_team": "[Altenwerth-Altenwerth] Alan Langworth",
                            "slack_id": null
                          }
                        }
                      },
                      "severity": {
                        "data": {
                          "id": "d4849712-a0d0-4ee7-b622-849d29f301d3",
                          "type": "severities",
                          "attributes": {
                            "name": "SEV1",
                            "slug": "sev1-a304e3af-c736-4e6e-9d0e-14ad13eaf195",
                            "description": "Sed dignissimos voluptas beatae.",
                            "severity": "medium",
                            "color": "#047BF8",
                            "notify_emails": [],
                            "slack_channels": [],
                            "slack_aliases": [],
                            "created_at": "2022-05-26T19:59:29.430-07:00",
                            "updated_at": "2022-05-26T19:59:29.430-07:00"
                          }
                        }
                      },
                      "started_by_user": {
                        "id": 112,
                        "email": "dwain@lowe.net",
                        "deleted_at": null,
                        "created_at": "2022-05-26T19:59:05.485-07:00",
                        "updated_at": "2022-05-26T19:59:30.971-07:00",
                        "current_team_id": 110,
                        "first_name": "Alan",
                        "last_name": "Langworth",
                        "time_zone": "Pacific Time (US & Canada)",
                        "last_seen_at": null,
                        "profile_photo_id": null,
                        "ability_cache": {
                          "team_ids": [
                            110,
                            110
                          ],
                          "administrating_team_ids": []
                        },
                        "last_notification_email_sent_at": null,
                        "incidents_count": 0,
                        "accept_terms": true,
                        "onboarding_completed": true,
                        "service_user": false,
                        "accept_marketing": true,
                        "teams_count": 2,
                        "created_through_sso": false,
                        "scim_uid": null,
                        "session_token": null,
                        "default_dashboard_id": null
                      },
                      "mitigated_by_user": null,
                      "resolved_by_user": null,
                      "cancelled_by_user": null,
                      "mitigation_message": null,
                      "resolution_message": null,
                      "cancellation_message": null,
                      "public_title": null,
                      "zoom_meeting_id": null,
                      "zoom_meeting_start_url": null,
                      "zoom_meeting_join_url": null,
                      "shortcut_story_id": null,
                      "shortcut_story_url": null,
                      "shortcut_task_id": null,
                      "shortcut_task_url": null,
                      "asana_task_id": null,
                      "asana_task_url": null,
                      "github_issue_id": null,
                      "github_issue_url": null,
                      "jira_issue_id": null,
                      "jira_issue_url": null,
                      "google_meeting_id": null,
                      "google_meeting_url": null,
                      "trello_card_id": null,
                      "trello_card_url": null,
                      "linear_issue_id": null,
                      "linear_issue_url": null,
                      "zendesk_ticket_id": null,
                      "zendesk_ticket_url": null,
                      "slack_channel_name": null,
                      "slack_channel_id": null,
                      "slack_channel_url": null,
                      "service_now_incident_id": null,
                      "service_now_incident_url": null,
                      "opsgenie_incident_id": null,
                      "opsgenie_incident_url": null,
                      "victor_ops_incident_id": null,
                      "victor_ops_incident_url": null,
                      "pagerduty_incident_id": null,
                      "pagerduty_incident_url": null,
                      "mattermost_channel_id": null,
                      "mattermost_channel_name": null,
                      "mattermost_channel_url": null,
                      "confluence_page_id": null,
                      "confluence_page_url": null,
                      "airtable_base_key": null,
                      "airtable_table_name": null,
                      "airtable_record_id": null,
                      "airtable_record_url": null,
                      "google_drive_id": null,
                      "google_drive_url": null,
                      "datadog_notebook_id": null,
                      "datadog_notebook_url": null,
                      "freshservice_ticket_id": null,
                      "freshservice_ticket_url": null,
                      "freshservice_task_id": null,
                      "freshservice_task_url": null,
                      "started_at": "2022-05-26T19:59:31.063-07:00",
                      "detected_at": null,
                      "acknowledged_at": null,
                      "mitigated_at": null,
                      "resolved_at": null,
                      "cancelled_at": null,
                      "created_at": "2022-05-26T19:59:31.085-07:00",
                      "updated_at": "2022-05-26T19:59:31.085-07:00",
                      "labels": {
                        "platform": "windows",
                        "version": "1.12"
                      }
                    },
                    "relationships": {
                      "roles": {
                        "data": [
                          {
                            "id": "69a9a234-d5a7-4a10-a947-a52d0357dbb5",
                            "type": "incident_role_assignments"
                          },
                          {
                            "id": "c641d2a6-3407-4f27-9329-4ca2b5cebf5a",
                            "type": "incident_role_assignments"
                          }
                        ]
                      },
                      "environments": {
                        "data": [
                          {
                            "id": "de8cb4b9-c6a8-4a4e-9e9d-054054601187",
                            "type": "environments"
                          },
                          {
                            "id": "4404ea91-5884-43f1-ac00-86254852ecf1",
                            "type": "environments"
                          }
                        ]
                      },
                      "incident_types": {
                        "data": []
                      },
                      "services": {
                        "data": [
                          {
                            "id": "db0108e0-b45e-43cf-85ef-55c6bb9793f3",
                            "type": "services"
                          },
                          {
                            "id": "29fb8913-ac02-4056-bd92-e6f8cdee9977",
                            "type": "services"
                          }
                        ]
                      },
                      "functionalities": {
                        "data": [
                          {
                            "id": "c838ddaa-87c7-4957-9a05-08fed7748eb2",
                            "type": "functionalities"
                          },
                          {
                            "id": "02c5bfea-f66a-479d-bc89-c4eb4f2a2436",
                            "type": "functionalities"
                          }
                        ]
                      },
                      "groups": {
                        "data": [
                          {
                            "id": "f032b63a-fbda-485c-a900-50a92211888d",
                            "type": "groups"
                          },
                          {
                            "id": "c8d7862f-81fc-41d4-8c70-51b3e19e7027",
                            "type": "groups"
                          }
                        ]
                      },
                      "events": {
                        "data": [
                          {
                            "id": "aa56daf9-f300-4897-9e37-768010d9c1ac",
                            "type": "incident_events"
                          },
                          {
                            "id": "1f0d1123-9190-418f-97a5-5495b53257b3",
                            "type": "incident_events"
                          }
                        ]
                      },
                      "action_items": {
                        "data": [
                          {
                            "id": "11ac7cdf-e35e-40cc-a75d-1e4076fa9e3c",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "eb039ae9-b8d4-4e94-b61c-b734085b659b",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "e731100a-253a-49da-8e23-7d4bbe8428c3",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "c2ece60c-0f8b-4367-9398-04b6a4b0435a",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "598573fe-e1a4-444e-8429-6d13460b1c4a",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "12afbed6-c47f-4eaa-b0a4-6937183b2c6f",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "a4458a37-ed6e-4c2c-a02e-1b2e24983112",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "e05e965e-b899-40ca-af45-9d091cc3585e",
                            "type": "incident_action_items"
                          }
                        ]
                      },
                      "custom_field_selections": {
                        "data": []
                      },
                      "feedbacks": {
                        "data": []
                      },
                      "incident_post_mortem": {
                        "data": null
                      }
                    }
                  },
                  "included": [
                    {
                      "id": "69a9a234-d5a7-4a10-a947-a52d0357dbb5",
                      "type": "incident_role_assignments",
                      "attributes": {
                        "incident_role": {
                          "data": {
                            "id": "69b75021-bf48-486b-915f-dad2485ce3f7",
                            "type": "incident_roles",
                            "attributes": {
                              "name": "Commander",
                              "summary": "The incident commander holds the **high-level state** about the incident",
                              "description": "- You are the **primary decision-maker** during the incident\n- Your job is to **delegate tasks** and **listen**, not actively be performing actions (e.g. checking graphs)\n- Keep things **moving forwards** and **avoid** getting stuck\n- This text can be **customized** in **Rootly > Incident Roles**",
                              "enabled": true,
                              "created_at": "2022-05-26T19:59:08.114-07:00",
                              "updated_at": "2022-05-26T19:59:08.114-07:00"
                            }
                          }
                        },
                        "user": null
                      }
                    },
                    {
                      "id": "c641d2a6-3407-4f27-9329-4ca2b5cebf5a",
                      "type": "incident_role_assignments",
                      "attributes": {
                        "incident_role": {
                          "data": {
                            "id": "199a3c56-8c1b-4549-88b5-94e6f6057336",
                            "type": "incident_roles",
                            "attributes": {
                              "name": "Scribe",
                              "summary": "Responsible for **handling communications** with the **stakeholders** and **responders**",
                              "description": "- You're responsible for **recording key information** about the incident and its response effort\n- **Maintain** an incident timeline, **keep a record** of **key people** and **activities** throughout the incident\n- This text can be **customized** in **Rootly > Incident Roles**",
                              "enabled": true,
                              "created_at": "2022-05-26T19:59:08.354-07:00",
                              "updated_at": "2022-05-26T19:59:08.354-07:00"
                            }
                          }
                        },
                        "user": null
                      }
                    },
                    {
                      "id": "de8cb4b9-c6a8-4a4e-9e9d-054054601187",
                      "type": "environments",
                      "attributes": {
                        "name": "development",
                        "description": "Excepturi exercitationem ut iure.",
                        "color": "#7650a5",
                        "notify_emails": [],
                        "slack_channels": [],
                        "slack_aliases": [],
                        "created_at": "2022-05-26T19:59:29.537-07:00",
                        "updated_at": "2022-05-26T19:59:29.537-07:00"
                      }
                    },
                    {
                      "id": "4404ea91-5884-43f1-ac00-86254852ecf1",
                      "type": "environments",
                      "attributes": {
                        "name": "staging",
                        "description": "Voluptates et in fuga.",
                        "color": "#f897cd",
                        "notify_emails": [],
                        "slack_channels": [],
                        "slack_aliases": [],
                        "created_at": "2022-05-26T19:59:29.664-07:00",
                        "updated_at": "2022-05-26T19:59:29.664-07:00"
                      }
                    },
                    {
                      "id": "db0108e0-b45e-43cf-85ef-55c6bb9793f3",
                      "type": "services",
                      "attributes": {
                        "name": "Dignissimos quibusdam suscipit iste.",
                        "slug": "dignissimos-quibusdam-suscipit-iste",
                        "description": "Laboriosam molestias eos quam.",
                        "public_description": null,
                        "color": "#047BF8",
                        "notify_emails": [],
                        "slack_channels": [],
                        "slack_aliases": [],
                        "github_repository_name": null,
                        "github_repository_branch": "master",
                        "gitlab_repository_name": null,
                        "gitlab_repository_branch": "master",
                        "created_at": "2022-05-26T19:59:29.799-07:00",
                        "updated_at": "2022-05-26T19:59:29.799-07:00"
                      }
                    },
                    {
                      "id": "29fb8913-ac02-4056-bd92-e6f8cdee9977",
                      "type": "services",
                      "attributes": {
                        "name": "Dolorum sed quae enim.",
                        "slug": "dolorum-sed-quae-enim",
                        "description": "Nesciunt optio tempora assumenda.",
                        "public_description": null,
                        "color": "#047BF8",
                        "notify_emails": [],
                        "slack_channels": [],
                        "slack_aliases": [],
                        "github_repository_name": null,
                        "github_repository_branch": "master",
                        "gitlab_repository_name": null,
                        "gitlab_repository_branch": "master",
                        "created_at": "2022-05-26T19:59:29.930-07:00",
                        "updated_at": "2022-05-26T19:59:29.930-07:00"
                      }
                    },
                    {
                      "id": "c838ddaa-87c7-4957-9a05-08fed7748eb2",
                      "type": "functionalities",
                      "attributes": {
                        "name": "Aut consequatur quo totam.",
                        "slug": "aut-consequatur-quo-totam",
                        "description": "Ratione sequi et rerum.",
                        "public_description": null,
                        "color": "#C5F0C0",
                        "notify_emails": [],
                        "slack_channels": [],
                        "slack_aliases": [],
                        "created_at": "2022-05-26T19:59:30.069-07:00",
                        "updated_at": "2022-05-26T19:59:30.069-07:00"
                      }
                    },
                    {
                      "id": "02c5bfea-f66a-479d-bc89-c4eb4f2a2436",
                      "type": "functionalities",
                      "attributes": {
                        "name": "Numquam et ut hic.",
                        "slug": "numquam-et-ut-hic",
                        "description": "Repellendus autem inventore laboriosam.",
                        "public_description": null,
                        "color": "#C5F0C0",
                        "notify_emails": [],
                        "slack_channels": [],
                        "slack_aliases": [],
                        "created_at": "2022-05-26T19:59:30.203-07:00",
                        "updated_at": "2022-05-26T19:59:30.203-07:00"
                      }
                    },
                    {
                      "id": "f032b63a-fbda-485c-a900-50a92211888d",
                      "type": "groups",
                      "attributes": {
                        "name": "Vero ratione sed quam.",
                        "description": null,
                        "color": "#E65252",
                        "notify_emails": [],
                        "slack_channels": [],
                        "slack_aliases": [],
                        "created_at": "2022-05-26T19:59:30.331-07:00",
                        "updated_at": "2022-05-26T19:59:30.331-07:00"
                      }
                    },
                    {
                      "id": "c8d7862f-81fc-41d4-8c70-51b3e19e7027",
                      "type": "groups",
                      "attributes": {
                        "name": "Deleniti temporibus incidunt error.",
                        "description": null,
                        "color": "#E65252",
                        "notify_emails": [],
                        "slack_channels": [],
                        "slack_aliases": [],
                        "created_at": "2022-05-26T19:59:30.498-07:00",
                        "updated_at": "2022-05-26T19:59:30.498-07:00"
                      }
                    },
                    {
                      "id": "aa56daf9-f300-4897-9e37-768010d9c1ac",
                      "type": "incident_events",
                      "attributes": {
                        "incident_id": "4956f9ce-d0d7-4d53-b0a6-b88c92074735",
                        "visibility": "external",
                        "occurred_at": "2022-05-26T19:59:31.085-07:00",
                        "created_at": "2022-05-26T19:59:31.085-07:00",
                        "updated_at": "2022-05-26T19:59:31.232-07:00",
                        "event": "Alan Langworth created this incident"
                      }
                    },
                    {
                      "id": "1f0d1123-9190-418f-97a5-5495b53257b3",
                      "type": "incident_events",
                      "attributes": {
                        "incident_id": "4956f9ce-d0d7-4d53-b0a6-b88c92074735",
                        "visibility": "internal",
                        "occurred_at": "2022-05-26T19:59:31.240-07:00",
                        "created_at": "2022-05-26T19:59:31.240-07:00",
                        "updated_at": "2022-05-26T19:59:31.240-07:00",
                        "event": "Started date has been set to May 26 7:59 PM PDT"
                      }
                    },
                    {
                      "id": "11ac7cdf-e35e-40cc-a75d-1e4076fa9e3c",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "4956f9ce-d0d7-4d53-b0a6-b88c92074735",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.243-07:00",
                        "updated_at": "2022-05-26T19:59:08.243-07:00",
                        "summary": "Announce in Slack you are the Commander in charge"
                      }
                    },
                    {
                      "id": "eb039ae9-b8d4-4e94-b61c-b734085b659b",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "4956f9ce-d0d7-4d53-b0a6-b88c92074735",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.317-07:00",
                        "updated_at": "2022-05-26T19:59:08.317-07:00",
                        "summary": "Ensure roles are assigned"
                      }
                    },
                    {
                      "id": "e731100a-253a-49da-8e23-7d4bbe8428c3",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "4956f9ce-d0d7-4d53-b0a6-b88c92074735",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.331-07:00",
                        "updated_at": "2022-05-26T19:59:08.331-07:00",
                        "summary": "Update `/incident summary`"
                      }
                    },
                    {
                      "id": "c2ece60c-0f8b-4367-9398-04b6a4b0435a",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "4956f9ce-d0d7-4d53-b0a6-b88c92074735",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.345-07:00",
                        "updated_at": "2022-05-26T19:59:08.345-07:00",
                        "summary": "Tasks can be customized in Rootly"
                      }
                    },
                    {
                      "id": "598573fe-e1a4-444e-8429-6d13460b1c4a",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "4956f9ce-d0d7-4d53-b0a6-b88c92074735",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.447-07:00",
                        "updated_at": "2022-05-26T19:59:08.447-07:00",
                        "summary": "Announce in Slack you are the Scribe for the incident"
                      }
                    },
                    {
                      "id": "12afbed6-c47f-4eaa-b0a4-6937183b2c6f",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "4956f9ce-d0d7-4d53-b0a6-b88c92074735",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.466-07:00",
                        "updated_at": "2022-05-26T19:59:08.466-07:00",
                        "summary": "Update `/incident statuspage` with current impact"
                      }
                    },
                    {
                      "id": "a4458a37-ed6e-4c2c-a02e-1b2e24983112",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "4956f9ce-d0d7-4d53-b0a6-b88c92074735",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.480-07:00",
                        "updated_at": "2022-05-26T19:59:08.480-07:00",
                        "summary": "Ensure follow up action items are created when incident is resolved"
                      }
                    },
                    {
                      "id": "e05e965e-b899-40ca-af45-9d091cc3585e",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "4956f9ce-d0d7-4d53-b0a6-b88c92074735",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.490-07:00",
                        "updated_at": "2022-05-26T19:59:08.490-07:00",
                        "summary": "Tasks can be customized in Rootly"
                      }
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "detected_at": [
                    "must be after or equal to Tue, 24 May 2022 19:59:31 -0700"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_incident"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/incidents \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incidents\",\"attributes\":{\"title\":\"string\",\"slug\":\"string\",\"kind\":\"test\",\"summary\":\"string\",\"severity_id\":\"string\",\"environment_ids\":[\"string\"],\"incident_type_ids\":[\"string\"],\"service_ids\":[\"string\"],\"functionality_ids\":[\"string\"],\"labels\":{},\"group_ids\":[\"string\"],\"notify_emails\":[\"string\"],\"status\":\"started\",\"create_on_slack\":false,\"url\":\"string\",\"started_at\":\"string\",\"detected_at\":\"string\",\"acknowledged_at\":\"string\",\"mitigated_at\":\"string\",\"resolved_at\":\"string\",\"cancelled_at\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"slug\\\":\\\"string\\\",\\\"kind\\\":\\\"test\\\",\\\"summary\\\":\\\"string\\\",\\\"severity_id\\\":\\\"string\\\",\\\"environment_ids\\\":[\\\"string\\\"],\\\"incident_type_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"functionality_ids\\\":[\\\"string\\\"],\\\"labels\\\":{},\\\"group_ids\\\":[\\\"string\\\"],\\\"notify_emails\\\":[\\\"string\\\"],\\\"status\\\":\\\"started\\\",\\\"create_on_slack\\\":false,\\\"url\\\":\\\"string\\\",\\\"started_at\\\":\\\"string\\\",\\\"detected_at\\\":\\\"string\\\",\\\"acknowledged_at\\\":\\\"string\\\",\\\"mitigated_at\\\":\\\"string\\\",\\\"resolved_at\\\":\\\"string\\\",\\\"cancelled_at\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"slug\\\":\\\"string\\\",\\\"kind\\\":\\\"test\\\",\\\"summary\\\":\\\"string\\\",\\\"severity_id\\\":\\\"string\\\",\\\"environment_ids\\\":[\\\"string\\\"],\\\"incident_type_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"functionality_ids\\\":[\\\"string\\\"],\\\"labels\\\":{},\\\"group_ids\\\":[\\\"string\\\"],\\\"notify_emails\\\":[\\\"string\\\"],\\\"status\\\":\\\"started\\\",\\\"create_on_slack\\\":false,\\\"url\\\":\\\"string\\\",\\\"started_at\\\":\\\"string\\\",\\\"detected_at\\\":\\\"string\\\",\\\"acknowledged_at\\\":\\\"string\\\",\\\"mitigated_at\\\":\\\"string\\\",\\\"resolved_at\\\":\\\"string\\\",\\\"cancelled_at\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"slug\\\":\\\"string\\\",\\\"kind\\\":\\\"test\\\",\\\"summary\\\":\\\"string\\\",\\\"severity_id\\\":\\\"string\\\",\\\"environment_ids\\\":[\\\"string\\\"],\\\"incident_type_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"functionality_ids\\\":[\\\"string\\\"],\\\"labels\\\":{},\\\"group_ids\\\":[\\\"string\\\"],\\\"notify_emails\\\":[\\\"string\\\"],\\\"status\\\":\\\"started\\\",\\\"create_on_slack\\\":false,\\\"url\\\":\\\"string\\\",\\\"started_at\\\":\\\"string\\\",\\\"detected_at\\\":\\\"string\\\",\\\"acknowledged_at\\\":\\\"string\\\",\\\"mitigated_at\\\":\\\"string\\\",\\\"resolved_at\\\":\\\"string\\\",\\\"cancelled_at\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List incidents",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incidents"
        ],
        "description": "List incidents",
        "operationId": "listIncidents",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[search]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[status]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[environment]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[severity]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[user_id]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "filter[functionalities]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[services]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "filter[teams]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array"
            }
          },
          {
            "name": "filter[custom_field_selected_option_ids]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/incident_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/incidents?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE&filter%5Bsearch%5D=SOME_STRING_VALUE&filter%5Bstatus%5D=SOME_STRING_VALUE&filter%5Benvironment%5D=SOME_STRING_VALUE&filter%5Bseverity%5D=SOME_STRING_VALUE&filter%5Btype%5D=SOME_STRING_VALUE&filter%5Buser_id%5D=SOME_INTEGER_VALUE&filter%5Bfunctionalities%5D=SOME_STRING_VALUE&filter%5Bservices%5D=SOME_ARRAY_VALUE&filter%5Bteams%5D=SOME_ARRAY_VALUE&filter%5Bcustom_field_selected_option_ids%5D=SOME_ARRAY_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE&filter%5Bsearch%5D=SOME_STRING_VALUE&filter%5Bstatus%5D=SOME_STRING_VALUE&filter%5Benvironment%5D=SOME_STRING_VALUE&filter%5Bseverity%5D=SOME_STRING_VALUE&filter%5Btype%5D=SOME_STRING_VALUE&filter%5Buser_id%5D=SOME_INTEGER_VALUE&filter%5Bfunctionalities%5D=SOME_STRING_VALUE&filter%5Bservices%5D=SOME_ARRAY_VALUE&filter%5Bteams%5D=SOME_ARRAY_VALUE&filter%5Bcustom_field_selected_option_ids%5D=SOME_ARRAY_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE&filter%5Bsearch%5D=SOME_STRING_VALUE&filter%5Bstatus%5D=SOME_STRING_VALUE&filter%5Benvironment%5D=SOME_STRING_VALUE&filter%5Bseverity%5D=SOME_STRING_VALUE&filter%5Btype%5D=SOME_STRING_VALUE&filter%5Buser_id%5D=SOME_INTEGER_VALUE&filter%5Bfunctionalities%5D=SOME_STRING_VALUE&filter%5Bservices%5D=SOME_ARRAY_VALUE&filter%5Bteams%5D=SOME_ARRAY_VALUE&filter%5Bcustom_field_selected_option_ids%5D=SOME_ARRAY_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE&filter%5Bsearch%5D=SOME_STRING_VALUE&filter%5Bstatus%5D=SOME_STRING_VALUE&filter%5Benvironment%5D=SOME_STRING_VALUE&filter%5Bseverity%5D=SOME_STRING_VALUE&filter%5Btype%5D=SOME_STRING_VALUE&filter%5Buser_id%5D=SOME_INTEGER_VALUE&filter%5Bfunctionalities%5D=SOME_STRING_VALUE&filter%5Bservices%5D=SOME_ARRAY_VALUE&filter%5Bteams%5D=SOME_ARRAY_VALUE&filter%5Bcustom_field_selected_option_ids%5D=SOME_ARRAY_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incidents/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a incident",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incidents"
        ],
        "description": "Retrieves a specific incident by id",
        "operationId": "getIncident",
        "responses": {
          "200": {
            "description": "incident found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                    "type": "incidents",
                    "attributes": {
                      "sequential_id": 1,
                      "slug": "est-ut-dicta-nulla",
                      "kind": "normal",
                      "title": "Est ut dicta nulla.",
                      "summary": "Doloribus et pariatur quae.",
                      "status": "started",
                      "url": "https://test.rootly.com/account/incidents/est-ut-dicta-nulla",
                      "user": {
                        "data": {
                          "id": "114",
                          "type": "users",
                          "attributes": {
                            "name": "Kip Mann",
                            "email": "troy@von.net",
                            "full_name": "Kip Mann",
                            "full_name_with_team": "Kip Mann",
                            "slack_id": null
                          }
                        }
                      },
                      "severity": {
                        "data": {
                          "id": "64229e8f-de0d-40d4-ad7e-7d1970c43a98",
                          "type": "severities",
                          "attributes": {
                            "name": "SEV2",
                            "slug": "sev2-ce5bbfc2-646b-4189-ae05-2cd1c7d3b91d",
                            "description": "Minus omnis nihil vitae.",
                            "severity": "medium",
                            "color": "#047BF8",
                            "notify_emails": [],
                            "slack_channels": [],
                            "slack_aliases": [],
                            "created_at": "2022-05-26T19:59:21.005-07:00",
                            "updated_at": "2022-05-26T19:59:21.005-07:00"
                          }
                        }
                      },
                      "started_by_user": {
                        "id": 114,
                        "email": "troy@von.net",
                        "deleted_at": null,
                        "created_at": "2022-05-26T19:59:16.219-07:00",
                        "updated_at": "2022-05-26T19:59:16.219-07:00",
                        "current_team_id": null,
                        "first_name": "Kip",
                        "last_name": "Mann",
                        "time_zone": "Pacific Time (US & Canada)",
                        "last_seen_at": null,
                        "profile_photo_id": null,
                        "ability_cache": null,
                        "last_notification_email_sent_at": null,
                        "incidents_count": 1,
                        "accept_terms": true,
                        "onboarding_completed": true,
                        "service_user": false,
                        "accept_marketing": true,
                        "teams_count": 0,
                        "created_through_sso": false,
                        "scim_uid": null,
                        "session_token": null,
                        "default_dashboard_id": null
                      },
                      "mitigated_by_user": null,
                      "resolved_by_user": null,
                      "cancelled_by_user": null,
                      "mitigation_message": null,
                      "resolution_message": null,
                      "cancellation_message": null,
                      "public_title": null,
                      "zoom_meeting_id": null,
                      "zoom_meeting_start_url": null,
                      "zoom_meeting_join_url": null,
                      "shortcut_story_id": null,
                      "shortcut_story_url": null,
                      "shortcut_task_id": null,
                      "shortcut_task_url": null,
                      "asana_task_id": null,
                      "asana_task_url": null,
                      "github_issue_id": null,
                      "github_issue_url": null,
                      "jira_issue_id": null,
                      "jira_issue_url": null,
                      "google_meeting_id": null,
                      "google_meeting_url": null,
                      "trello_card_id": null,
                      "trello_card_url": null,
                      "linear_issue_id": null,
                      "linear_issue_url": null,
                      "zendesk_ticket_id": null,
                      "zendesk_ticket_url": null,
                      "slack_channel_name": null,
                      "slack_channel_id": null,
                      "slack_channel_url": null,
                      "service_now_incident_id": null,
                      "service_now_incident_url": null,
                      "opsgenie_incident_id": null,
                      "opsgenie_incident_url": null,
                      "victor_ops_incident_id": null,
                      "victor_ops_incident_url": null,
                      "pagerduty_incident_id": null,
                      "pagerduty_incident_url": null,
                      "mattermost_channel_id": null,
                      "mattermost_channel_name": null,
                      "mattermost_channel_url": null,
                      "confluence_page_id": null,
                      "confluence_page_url": null,
                      "airtable_base_key": null,
                      "airtable_table_name": null,
                      "airtable_record_id": null,
                      "airtable_record_url": null,
                      "google_drive_id": null,
                      "google_drive_url": null,
                      "datadog_notebook_id": null,
                      "datadog_notebook_url": null,
                      "freshservice_ticket_id": null,
                      "freshservice_ticket_url": null,
                      "freshservice_task_id": null,
                      "freshservice_task_url": null,
                      "started_at": "2022-05-26T19:59:21.149-07:00",
                      "detected_at": null,
                      "acknowledged_at": null,
                      "mitigated_at": null,
                      "resolved_at": null,
                      "cancelled_at": null,
                      "created_at": "2022-05-26T19:59:21.149-07:00",
                      "updated_at": "2022-05-26T19:59:21.149-07:00",
                      "labels": {}
                    },
                    "relationships": {
                      "roles": {
                        "data": [
                          {
                            "id": "69624cdd-53da-49b0-8cf0-c6d5f52d5654",
                            "type": "incident_role_assignments"
                          },
                          {
                            "id": "1e158837-5286-4b2b-9e66-7418efe5ec2e",
                            "type": "incident_role_assignments"
                          }
                        ]
                      },
                      "environments": {
                        "data": []
                      },
                      "incident_types": {
                        "data": []
                      },
                      "services": {
                        "data": []
                      },
                      "functionalities": {
                        "data": []
                      },
                      "groups": {
                        "data": []
                      },
                      "events": {
                        "data": [
                          {
                            "id": "2f811548-e455-4227-b406-c310538b34eb",
                            "type": "incident_events"
                          },
                          {
                            "id": "01481d09-3714-477c-9e9c-9d803d3f7dc4",
                            "type": "incident_events"
                          }
                        ]
                      },
                      "action_items": {
                        "data": [
                          {
                            "id": "dfc408d5-fc06-44bf-b46e-56cf984f253f",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "2955f3df-a16e-4e26-bc13-3023fb13a209",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "dc37178c-db17-4806-a566-aaf376f50553",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "ac7bea4f-1bf1-4051-88ff-f176fd3378b5",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "2a61662e-f8dc-4def-b614-1419aff8a122",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "cb77952e-0a48-4417-ac11-b092ea40b24a",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "3c6cef75-3c1e-4ed4-b85a-1018ea95be94",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "62e29ba7-d502-4716-9c46-30e9afbd3b83",
                            "type": "incident_action_items"
                          }
                        ]
                      },
                      "custom_field_selections": {
                        "data": []
                      },
                      "feedbacks": {
                        "data": []
                      },
                      "incident_post_mortem": {
                        "data": null
                      }
                    }
                  },
                  "included": [
                    {
                      "id": "69624cdd-53da-49b0-8cf0-c6d5f52d5654",
                      "type": "incident_role_assignments",
                      "attributes": {
                        "incident_role": {
                          "data": {
                            "id": "69b75021-bf48-486b-915f-dad2485ce3f7",
                            "type": "incident_roles",
                            "attributes": {
                              "name": "Commander",
                              "summary": "The incident commander holds the **high-level state** about the incident",
                              "description": "- You are the **primary decision-maker** during the incident\n- Your job is to **delegate tasks** and **listen**, not actively be performing actions (e.g. checking graphs)\n- Keep things **moving forwards** and **avoid** getting stuck\n- This text can be **customized** in **Rootly > Incident Roles**",
                              "enabled": true,
                              "created_at": "2022-05-26T19:59:08.114-07:00",
                              "updated_at": "2022-05-26T19:59:08.114-07:00"
                            }
                          }
                        },
                        "user": null
                      }
                    },
                    {
                      "id": "1e158837-5286-4b2b-9e66-7418efe5ec2e",
                      "type": "incident_role_assignments",
                      "attributes": {
                        "incident_role": {
                          "data": {
                            "id": "199a3c56-8c1b-4549-88b5-94e6f6057336",
                            "type": "incident_roles",
                            "attributes": {
                              "name": "Scribe",
                              "summary": "Responsible for **handling communications** with the **stakeholders** and **responders**",
                              "description": "- You're responsible for **recording key information** about the incident and its response effort\n- **Maintain** an incident timeline, **keep a record** of **key people** and **activities** throughout the incident\n- This text can be **customized** in **Rootly > Incident Roles**",
                              "enabled": true,
                              "created_at": "2022-05-26T19:59:08.354-07:00",
                              "updated_at": "2022-05-26T19:59:08.354-07:00"
                            }
                          }
                        },
                        "user": null
                      }
                    },
                    {
                      "id": "2f811548-e455-4227-b406-c310538b34eb",
                      "type": "incident_events",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "visibility": "external",
                        "occurred_at": "2022-05-26T19:59:21.149-07:00",
                        "created_at": "2022-05-26T19:59:21.149-07:00",
                        "updated_at": "2022-05-26T19:59:22.634-07:00",
                        "event": "Kip Mann created this incident"
                      }
                    },
                    {
                      "id": "01481d09-3714-477c-9e9c-9d803d3f7dc4",
                      "type": "incident_events",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "visibility": "internal",
                        "occurred_at": "2022-05-26T19:59:22.679-07:00",
                        "created_at": "2022-05-26T19:59:22.679-07:00",
                        "updated_at": "2022-05-26T19:59:22.679-07:00",
                        "event": "Started date has been set to May 26 7:59 PM PDT"
                      }
                    },
                    {
                      "id": "dfc408d5-fc06-44bf-b46e-56cf984f253f",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.243-07:00",
                        "updated_at": "2022-05-26T19:59:08.243-07:00",
                        "summary": "Announce in Slack you are the Commander in charge"
                      }
                    },
                    {
                      "id": "2955f3df-a16e-4e26-bc13-3023fb13a209",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.317-07:00",
                        "updated_at": "2022-05-26T19:59:08.317-07:00",
                        "summary": "Ensure roles are assigned"
                      }
                    },
                    {
                      "id": "dc37178c-db17-4806-a566-aaf376f50553",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.331-07:00",
                        "updated_at": "2022-05-26T19:59:08.331-07:00",
                        "summary": "Update `/incident summary`"
                      }
                    },
                    {
                      "id": "ac7bea4f-1bf1-4051-88ff-f176fd3378b5",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.345-07:00",
                        "updated_at": "2022-05-26T19:59:08.345-07:00",
                        "summary": "Tasks can be customized in Rootly"
                      }
                    },
                    {
                      "id": "2a61662e-f8dc-4def-b614-1419aff8a122",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.447-07:00",
                        "updated_at": "2022-05-26T19:59:08.447-07:00",
                        "summary": "Announce in Slack you are the Scribe for the incident"
                      }
                    },
                    {
                      "id": "cb77952e-0a48-4417-ac11-b092ea40b24a",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.466-07:00",
                        "updated_at": "2022-05-26T19:59:08.466-07:00",
                        "summary": "Update `/incident statuspage` with current impact"
                      }
                    },
                    {
                      "id": "3c6cef75-3c1e-4ed4-b85a-1018ea95be94",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.480-07:00",
                        "updated_at": "2022-05-26T19:59:08.480-07:00",
                        "summary": "Ensure follow up action items are created when incident is resolved"
                      }
                    },
                    {
                      "id": "62e29ba7-d502-4716-9c46-30e9afbd3b83",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.490-07:00",
                        "updated_at": "2022-05-26T19:59:08.490-07:00",
                        "summary": "Tasks can be customized in Rootly"
                      }
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/incidents/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a incident",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incidents"
        ],
        "description": "Update a specific incident by id",
        "operationId": "updateIncident",
        "parameters": [],
        "responses": {
          "200": {
            "description": "incident updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                    "type": "incidents",
                    "attributes": {
                      "sequential_id": 1,
                      "slug": "est-ut-dicta-nulla",
                      "kind": "normal",
                      "title": "Oh no! Something is broken again",
                      "summary": "What could it be again?",
                      "status": "started",
                      "url": "https://test.rootly.com/account/incidents/est-ut-dicta-nulla",
                      "user": {
                        "data": {
                          "id": "114",
                          "type": "users",
                          "attributes": {
                            "name": "Kip Mann",
                            "email": "troy@von.net",
                            "full_name": "Kip Mann",
                            "full_name_with_team": "Kip Mann",
                            "slack_id": null
                          }
                        }
                      },
                      "severity": {
                        "data": {
                          "id": "64229e8f-de0d-40d4-ad7e-7d1970c43a98",
                          "type": "severities",
                          "attributes": {
                            "name": "SEV2",
                            "slug": "sev2-ce5bbfc2-646b-4189-ae05-2cd1c7d3b91d",
                            "description": "Minus omnis nihil vitae.",
                            "severity": "medium",
                            "color": "#047BF8",
                            "notify_emails": [],
                            "slack_channels": [],
                            "slack_aliases": [],
                            "created_at": "2022-05-26T19:59:21.005-07:00",
                            "updated_at": "2022-05-26T19:59:21.005-07:00"
                          }
                        }
                      },
                      "started_by_user": {
                        "id": 114,
                        "email": "troy@von.net",
                        "deleted_at": null,
                        "created_at": "2022-05-26T19:59:16.219-07:00",
                        "updated_at": "2022-05-26T19:59:16.219-07:00",
                        "current_team_id": null,
                        "first_name": "Kip",
                        "last_name": "Mann",
                        "time_zone": "Pacific Time (US & Canada)",
                        "last_seen_at": null,
                        "profile_photo_id": null,
                        "ability_cache": null,
                        "last_notification_email_sent_at": null,
                        "incidents_count": 1,
                        "accept_terms": true,
                        "onboarding_completed": true,
                        "service_user": false,
                        "accept_marketing": true,
                        "teams_count": 0,
                        "created_through_sso": false,
                        "scim_uid": null,
                        "session_token": null,
                        "default_dashboard_id": null
                      },
                      "mitigated_by_user": null,
                      "resolved_by_user": null,
                      "cancelled_by_user": null,
                      "mitigation_message": null,
                      "resolution_message": null,
                      "cancellation_message": null,
                      "public_title": null,
                      "zoom_meeting_id": null,
                      "zoom_meeting_start_url": null,
                      "zoom_meeting_join_url": null,
                      "shortcut_story_id": null,
                      "shortcut_story_url": null,
                      "shortcut_task_id": null,
                      "shortcut_task_url": null,
                      "asana_task_id": null,
                      "asana_task_url": null,
                      "github_issue_id": null,
                      "github_issue_url": null,
                      "jira_issue_id": null,
                      "jira_issue_url": null,
                      "google_meeting_id": null,
                      "google_meeting_url": null,
                      "trello_card_id": null,
                      "trello_card_url": null,
                      "linear_issue_id": null,
                      "linear_issue_url": null,
                      "zendesk_ticket_id": null,
                      "zendesk_ticket_url": null,
                      "slack_channel_name": null,
                      "slack_channel_id": null,
                      "slack_channel_url": null,
                      "service_now_incident_id": null,
                      "service_now_incident_url": null,
                      "opsgenie_incident_id": null,
                      "opsgenie_incident_url": null,
                      "victor_ops_incident_id": null,
                      "victor_ops_incident_url": null,
                      "pagerduty_incident_id": null,
                      "pagerduty_incident_url": null,
                      "mattermost_channel_id": null,
                      "mattermost_channel_name": null,
                      "mattermost_channel_url": null,
                      "confluence_page_id": null,
                      "confluence_page_url": null,
                      "airtable_base_key": null,
                      "airtable_table_name": null,
                      "airtable_record_id": null,
                      "airtable_record_url": null,
                      "google_drive_id": null,
                      "google_drive_url": null,
                      "datadog_notebook_id": null,
                      "datadog_notebook_url": null,
                      "freshservice_ticket_id": null,
                      "freshservice_ticket_url": null,
                      "freshservice_task_id": null,
                      "freshservice_task_url": null,
                      "started_at": "2022-05-26T19:59:21.149-07:00",
                      "detected_at": null,
                      "acknowledged_at": null,
                      "mitigated_at": null,
                      "resolved_at": null,
                      "cancelled_at": null,
                      "created_at": "2022-05-26T19:59:21.149-07:00",
                      "updated_at": "2022-05-26T19:59:33.349-07:00",
                      "labels": {}
                    },
                    "relationships": {
                      "roles": {
                        "data": [
                          {
                            "id": "69624cdd-53da-49b0-8cf0-c6d5f52d5654",
                            "type": "incident_role_assignments"
                          },
                          {
                            "id": "1e158837-5286-4b2b-9e66-7418efe5ec2e",
                            "type": "incident_role_assignments"
                          }
                        ]
                      },
                      "environments": {
                        "data": []
                      },
                      "incident_types": {
                        "data": []
                      },
                      "services": {
                        "data": []
                      },
                      "functionalities": {
                        "data": []
                      },
                      "groups": {
                        "data": []
                      },
                      "events": {
                        "data": [
                          {
                            "id": "2f811548-e455-4227-b406-c310538b34eb",
                            "type": "incident_events"
                          },
                          {
                            "id": "01481d09-3714-477c-9e9c-9d803d3f7dc4",
                            "type": "incident_events"
                          }
                        ]
                      },
                      "action_items": {
                        "data": [
                          {
                            "id": "dfc408d5-fc06-44bf-b46e-56cf984f253f",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "2955f3df-a16e-4e26-bc13-3023fb13a209",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "dc37178c-db17-4806-a566-aaf376f50553",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "ac7bea4f-1bf1-4051-88ff-f176fd3378b5",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "2a61662e-f8dc-4def-b614-1419aff8a122",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "cb77952e-0a48-4417-ac11-b092ea40b24a",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "3c6cef75-3c1e-4ed4-b85a-1018ea95be94",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "62e29ba7-d502-4716-9c46-30e9afbd3b83",
                            "type": "incident_action_items"
                          }
                        ]
                      },
                      "custom_field_selections": {
                        "data": []
                      },
                      "feedbacks": {
                        "data": []
                      },
                      "incident_post_mortem": {
                        "data": null
                      }
                    }
                  },
                  "included": [
                    {
                      "id": "69624cdd-53da-49b0-8cf0-c6d5f52d5654",
                      "type": "incident_role_assignments",
                      "attributes": {
                        "incident_role": {
                          "data": {
                            "id": "69b75021-bf48-486b-915f-dad2485ce3f7",
                            "type": "incident_roles",
                            "attributes": {
                              "name": "Commander",
                              "summary": "The incident commander holds the **high-level state** about the incident",
                              "description": "- You are the **primary decision-maker** during the incident\n- Your job is to **delegate tasks** and **listen**, not actively be performing actions (e.g. checking graphs)\n- Keep things **moving forwards** and **avoid** getting stuck\n- This text can be **customized** in **Rootly > Incident Roles**",
                              "enabled": true,
                              "created_at": "2022-05-26T19:59:08.114-07:00",
                              "updated_at": "2022-05-26T19:59:08.114-07:00"
                            }
                          }
                        },
                        "user": null
                      }
                    },
                    {
                      "id": "1e158837-5286-4b2b-9e66-7418efe5ec2e",
                      "type": "incident_role_assignments",
                      "attributes": {
                        "incident_role": {
                          "data": {
                            "id": "199a3c56-8c1b-4549-88b5-94e6f6057336",
                            "type": "incident_roles",
                            "attributes": {
                              "name": "Scribe",
                              "summary": "Responsible for **handling communications** with the **stakeholders** and **responders**",
                              "description": "- You're responsible for **recording key information** about the incident and its response effort\n- **Maintain** an incident timeline, **keep a record** of **key people** and **activities** throughout the incident\n- This text can be **customized** in **Rootly > Incident Roles**",
                              "enabled": true,
                              "created_at": "2022-05-26T19:59:08.354-07:00",
                              "updated_at": "2022-05-26T19:59:08.354-07:00"
                            }
                          }
                        },
                        "user": null
                      }
                    },
                    {
                      "id": "2f811548-e455-4227-b406-c310538b34eb",
                      "type": "incident_events",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "visibility": "external",
                        "occurred_at": "2022-05-26T19:59:21.149-07:00",
                        "created_at": "2022-05-26T19:59:21.149-07:00",
                        "updated_at": "2022-05-26T19:59:22.634-07:00",
                        "event": "Kip Mann created this incident"
                      }
                    },
                    {
                      "id": "01481d09-3714-477c-9e9c-9d803d3f7dc4",
                      "type": "incident_events",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "visibility": "internal",
                        "occurred_at": "2022-05-26T19:59:22.679-07:00",
                        "created_at": "2022-05-26T19:59:22.679-07:00",
                        "updated_at": "2022-05-26T19:59:22.679-07:00",
                        "event": "Started date has been set to May 26 7:59 PM PDT"
                      }
                    },
                    {
                      "id": "dfc408d5-fc06-44bf-b46e-56cf984f253f",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.243-07:00",
                        "updated_at": "2022-05-26T19:59:08.243-07:00",
                        "summary": "Announce in Slack you are the Commander in charge"
                      }
                    },
                    {
                      "id": "2955f3df-a16e-4e26-bc13-3023fb13a209",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.317-07:00",
                        "updated_at": "2022-05-26T19:59:08.317-07:00",
                        "summary": "Ensure roles are assigned"
                      }
                    },
                    {
                      "id": "dc37178c-db17-4806-a566-aaf376f50553",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.331-07:00",
                        "updated_at": "2022-05-26T19:59:08.331-07:00",
                        "summary": "Update `/incident summary`"
                      }
                    },
                    {
                      "id": "ac7bea4f-1bf1-4051-88ff-f176fd3378b5",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.345-07:00",
                        "updated_at": "2022-05-26T19:59:08.345-07:00",
                        "summary": "Tasks can be customized in Rootly"
                      }
                    },
                    {
                      "id": "2a61662e-f8dc-4def-b614-1419aff8a122",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.447-07:00",
                        "updated_at": "2022-05-26T19:59:08.447-07:00",
                        "summary": "Announce in Slack you are the Scribe for the incident"
                      }
                    },
                    {
                      "id": "cb77952e-0a48-4417-ac11-b092ea40b24a",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.466-07:00",
                        "updated_at": "2022-05-26T19:59:08.466-07:00",
                        "summary": "Update `/incident statuspage` with current impact"
                      }
                    },
                    {
                      "id": "3c6cef75-3c1e-4ed4-b85a-1018ea95be94",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.480-07:00",
                        "updated_at": "2022-05-26T19:59:08.480-07:00",
                        "summary": "Ensure follow up action items are created when incident is resolved"
                      }
                    },
                    {
                      "id": "62e29ba7-d502-4716-9c46-30e9afbd3b83",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.490-07:00",
                        "updated_at": "2022-05-26T19:59:08.490-07:00",
                        "summary": "Tasks can be customized in Rootly"
                      }
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_incident"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/incidents/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incidents\",\"attributes\":{\"title\":\"string\",\"summary\":\"string\",\"severity_id\":\"string\",\"environment_ids\":[\"string\"],\"incident_type_ids\":[\"string\"],\"service_ids\":[\"string\"],\"functionality_ids\":[\"string\"],\"labels\":{},\"group_ids\":[\"string\"],\"started_at\":\"string\",\"detected_at\":\"string\",\"acknowledged_at\":\"string\",\"mitigated_at\":\"string\",\"resolved_at\":\"string\",\"cancelled_at\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"severity_id\\\":\\\"string\\\",\\\"environment_ids\\\":[\\\"string\\\"],\\\"incident_type_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"functionality_ids\\\":[\\\"string\\\"],\\\"labels\\\":{},\\\"group_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"string\\\",\\\"detected_at\\\":\\\"string\\\",\\\"acknowledged_at\\\":\\\"string\\\",\\\"mitigated_at\\\":\\\"string\\\",\\\"resolved_at\\\":\\\"string\\\",\\\"cancelled_at\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"severity_id\\\":\\\"string\\\",\\\"environment_ids\\\":[\\\"string\\\"],\\\"incident_type_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"functionality_ids\\\":[\\\"string\\\"],\\\"labels\\\":{},\\\"group_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"string\\\",\\\"detected_at\\\":\\\"string\\\",\\\"acknowledged_at\\\":\\\"string\\\",\\\"mitigated_at\\\":\\\"string\\\",\\\"resolved_at\\\":\\\"string\\\",\\\"cancelled_at\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"severity_id\\\":\\\"string\\\",\\\"environment_ids\\\":[\\\"string\\\"],\\\"incident_type_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"functionality_ids\\\":[\\\"string\\\"],\\\"labels\\\":{},\\\"group_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"string\\\",\\\"detected_at\\\":\\\"string\\\",\\\"acknowledged_at\\\":\\\"string\\\",\\\"mitigated_at\\\":\\\"string\\\",\\\"resolved_at\\\":\\\"string\\\",\\\"cancelled_at\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a incident",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incidents"
        ],
        "description": "Delete a specific incident by id",
        "operationId": "deleteIncident",
        "responses": {
          "200": {
            "description": "incident deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                    "type": "incidents",
                    "attributes": {
                      "sequential_id": 1,
                      "slug": "est-ut-dicta-nulla",
                      "kind": "normal",
                      "title": "Est ut dicta nulla.",
                      "summary": "Doloribus et pariatur quae.",
                      "status": "started",
                      "url": "https://test.rootly.com/account/incidents/est-ut-dicta-nulla",
                      "user": {
                        "data": {
                          "id": "114",
                          "type": "users",
                          "attributes": {
                            "name": "Kip Mann",
                            "email": "troy@von.net",
                            "full_name": "Kip Mann",
                            "full_name_with_team": "Kip Mann",
                            "slack_id": null
                          }
                        }
                      },
                      "severity": {
                        "data": {
                          "id": "64229e8f-de0d-40d4-ad7e-7d1970c43a98",
                          "type": "severities",
                          "attributes": {
                            "name": "SEV2",
                            "slug": "sev2-ce5bbfc2-646b-4189-ae05-2cd1c7d3b91d",
                            "description": "Minus omnis nihil vitae.",
                            "severity": "medium",
                            "color": "#047BF8",
                            "notify_emails": [],
                            "slack_channels": [],
                            "slack_aliases": [],
                            "created_at": "2022-05-26T19:59:21.005-07:00",
                            "updated_at": "2022-05-26T19:59:21.005-07:00"
                          }
                        }
                      },
                      "started_by_user": {
                        "id": 114,
                        "email": "troy@von.net",
                        "deleted_at": null,
                        "created_at": "2022-05-26T19:59:16.219-07:00",
                        "updated_at": "2022-05-26T19:59:16.219-07:00",
                        "current_team_id": null,
                        "first_name": "Kip",
                        "last_name": "Mann",
                        "time_zone": "Pacific Time (US & Canada)",
                        "last_seen_at": null,
                        "profile_photo_id": null,
                        "ability_cache": null,
                        "last_notification_email_sent_at": null,
                        "incidents_count": 0,
                        "accept_terms": true,
                        "onboarding_completed": true,
                        "service_user": false,
                        "accept_marketing": true,
                        "teams_count": 0,
                        "created_through_sso": false,
                        "scim_uid": null,
                        "session_token": null,
                        "default_dashboard_id": null
                      },
                      "mitigated_by_user": null,
                      "resolved_by_user": null,
                      "cancelled_by_user": null,
                      "mitigation_message": null,
                      "resolution_message": null,
                      "cancellation_message": null,
                      "public_title": null,
                      "zoom_meeting_id": null,
                      "zoom_meeting_start_url": null,
                      "zoom_meeting_join_url": null,
                      "shortcut_story_id": null,
                      "shortcut_story_url": null,
                      "shortcut_task_id": null,
                      "shortcut_task_url": null,
                      "asana_task_id": null,
                      "asana_task_url": null,
                      "github_issue_id": null,
                      "github_issue_url": null,
                      "jira_issue_id": null,
                      "jira_issue_url": null,
                      "google_meeting_id": null,
                      "google_meeting_url": null,
                      "trello_card_id": null,
                      "trello_card_url": null,
                      "linear_issue_id": null,
                      "linear_issue_url": null,
                      "zendesk_ticket_id": null,
                      "zendesk_ticket_url": null,
                      "slack_channel_name": null,
                      "slack_channel_id": null,
                      "slack_channel_url": null,
                      "service_now_incident_id": null,
                      "service_now_incident_url": null,
                      "opsgenie_incident_id": null,
                      "opsgenie_incident_url": null,
                      "victor_ops_incident_id": null,
                      "victor_ops_incident_url": null,
                      "pagerduty_incident_id": null,
                      "pagerduty_incident_url": null,
                      "mattermost_channel_id": null,
                      "mattermost_channel_name": null,
                      "mattermost_channel_url": null,
                      "confluence_page_id": null,
                      "confluence_page_url": null,
                      "airtable_base_key": null,
                      "airtable_table_name": null,
                      "airtable_record_id": null,
                      "airtable_record_url": null,
                      "google_drive_id": null,
                      "google_drive_url": null,
                      "datadog_notebook_id": null,
                      "datadog_notebook_url": null,
                      "freshservice_ticket_id": null,
                      "freshservice_ticket_url": null,
                      "freshservice_task_id": null,
                      "freshservice_task_url": null,
                      "started_at": "2022-05-26T19:59:21.149-07:00",
                      "detected_at": null,
                      "acknowledged_at": null,
                      "mitigated_at": null,
                      "resolved_at": null,
                      "cancelled_at": null,
                      "created_at": "2022-05-26T19:59:21.149-07:00",
                      "updated_at": "2022-05-26T19:59:33.642-07:00",
                      "labels": {}
                    },
                    "relationships": {
                      "roles": {
                        "data": [
                          {
                            "id": "69624cdd-53da-49b0-8cf0-c6d5f52d5654",
                            "type": "incident_role_assignments"
                          },
                          {
                            "id": "1e158837-5286-4b2b-9e66-7418efe5ec2e",
                            "type": "incident_role_assignments"
                          }
                        ]
                      },
                      "environments": {
                        "data": []
                      },
                      "incident_types": {
                        "data": []
                      },
                      "services": {
                        "data": []
                      },
                      "functionalities": {
                        "data": []
                      },
                      "groups": {
                        "data": []
                      },
                      "events": {
                        "data": [
                          {
                            "id": "2f811548-e455-4227-b406-c310538b34eb",
                            "type": "incident_events"
                          },
                          {
                            "id": "01481d09-3714-477c-9e9c-9d803d3f7dc4",
                            "type": "incident_events"
                          }
                        ]
                      },
                      "action_items": {
                        "data": [
                          {
                            "id": "dfc408d5-fc06-44bf-b46e-56cf984f253f",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "2955f3df-a16e-4e26-bc13-3023fb13a209",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "dc37178c-db17-4806-a566-aaf376f50553",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "ac7bea4f-1bf1-4051-88ff-f176fd3378b5",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "2a61662e-f8dc-4def-b614-1419aff8a122",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "cb77952e-0a48-4417-ac11-b092ea40b24a",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "3c6cef75-3c1e-4ed4-b85a-1018ea95be94",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "62e29ba7-d502-4716-9c46-30e9afbd3b83",
                            "type": "incident_action_items"
                          }
                        ]
                      },
                      "custom_field_selections": {
                        "data": []
                      },
                      "feedbacks": {
                        "data": []
                      },
                      "incident_post_mortem": {
                        "data": null
                      }
                    }
                  },
                  "included": [
                    {
                      "id": "69624cdd-53da-49b0-8cf0-c6d5f52d5654",
                      "type": "incident_role_assignments",
                      "attributes": {
                        "incident_role": {
                          "data": {
                            "id": "69b75021-bf48-486b-915f-dad2485ce3f7",
                            "type": "incident_roles",
                            "attributes": {
                              "name": "Commander",
                              "summary": "The incident commander holds the **high-level state** about the incident",
                              "description": "- You are the **primary decision-maker** during the incident\n- Your job is to **delegate tasks** and **listen**, not actively be performing actions (e.g. checking graphs)\n- Keep things **moving forwards** and **avoid** getting stuck\n- This text can be **customized** in **Rootly > Incident Roles**",
                              "enabled": true,
                              "created_at": "2022-05-26T19:59:08.114-07:00",
                              "updated_at": "2022-05-26T19:59:08.114-07:00"
                            }
                          }
                        },
                        "user": null
                      }
                    },
                    {
                      "id": "1e158837-5286-4b2b-9e66-7418efe5ec2e",
                      "type": "incident_role_assignments",
                      "attributes": {
                        "incident_role": {
                          "data": {
                            "id": "199a3c56-8c1b-4549-88b5-94e6f6057336",
                            "type": "incident_roles",
                            "attributes": {
                              "name": "Scribe",
                              "summary": "Responsible for **handling communications** with the **stakeholders** and **responders**",
                              "description": "- You're responsible for **recording key information** about the incident and its response effort\n- **Maintain** an incident timeline, **keep a record** of **key people** and **activities** throughout the incident\n- This text can be **customized** in **Rootly > Incident Roles**",
                              "enabled": true,
                              "created_at": "2022-05-26T19:59:08.354-07:00",
                              "updated_at": "2022-05-26T19:59:08.354-07:00"
                            }
                          }
                        },
                        "user": null
                      }
                    },
                    {
                      "id": "2f811548-e455-4227-b406-c310538b34eb",
                      "type": "incident_events",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "visibility": "external",
                        "occurred_at": "2022-05-26T19:59:21.149-07:00",
                        "created_at": "2022-05-26T19:59:21.149-07:00",
                        "updated_at": "2022-05-26T19:59:22.634-07:00",
                        "event": "Kip Mann created this incident"
                      }
                    },
                    {
                      "id": "01481d09-3714-477c-9e9c-9d803d3f7dc4",
                      "type": "incident_events",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "visibility": "internal",
                        "occurred_at": "2022-05-26T19:59:22.679-07:00",
                        "created_at": "2022-05-26T19:59:22.679-07:00",
                        "updated_at": "2022-05-26T19:59:22.679-07:00",
                        "event": "Started date has been set to May 26 7:59 PM PDT"
                      }
                    },
                    {
                      "id": "dfc408d5-fc06-44bf-b46e-56cf984f253f",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.243-07:00",
                        "updated_at": "2022-05-26T19:59:08.243-07:00",
                        "summary": "Announce in Slack you are the Commander in charge"
                      }
                    },
                    {
                      "id": "2955f3df-a16e-4e26-bc13-3023fb13a209",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.317-07:00",
                        "updated_at": "2022-05-26T19:59:08.317-07:00",
                        "summary": "Ensure roles are assigned"
                      }
                    },
                    {
                      "id": "dc37178c-db17-4806-a566-aaf376f50553",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.331-07:00",
                        "updated_at": "2022-05-26T19:59:08.331-07:00",
                        "summary": "Update `/incident summary`"
                      }
                    },
                    {
                      "id": "ac7bea4f-1bf1-4051-88ff-f176fd3378b5",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.345-07:00",
                        "updated_at": "2022-05-26T19:59:08.345-07:00",
                        "summary": "Tasks can be customized in Rootly"
                      }
                    },
                    {
                      "id": "2a61662e-f8dc-4def-b614-1419aff8a122",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.447-07:00",
                        "updated_at": "2022-05-26T19:59:08.447-07:00",
                        "summary": "Announce in Slack you are the Scribe for the incident"
                      }
                    },
                    {
                      "id": "cb77952e-0a48-4417-ac11-b092ea40b24a",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.466-07:00",
                        "updated_at": "2022-05-26T19:59:08.466-07:00",
                        "summary": "Update `/incident statuspage` with current impact"
                      }
                    },
                    {
                      "id": "3c6cef75-3c1e-4ed4-b85a-1018ea95be94",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.480-07:00",
                        "updated_at": "2022-05-26T19:59:08.480-07:00",
                        "summary": "Ensure follow up action items are created when incident is resolved"
                      }
                    },
                    {
                      "id": "62e29ba7-d502-4716-9c46-30e9afbd3b83",
                      "type": "incident_action_items",
                      "attributes": {
                        "incident_id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                        "description": null,
                        "assigned_to": null,
                        "kind": "task",
                        "priority": "medium",
                        "status": "open",
                        "jira_issue_id": null,
                        "jira_issue_url": null,
                        "asana_task_id": null,
                        "asana_task_url": null,
                        "github_issue_id": null,
                        "github_issue_url": null,
                        "shortcut_story_id": null,
                        "shortcut_story_url": null,
                        "shortcut_task_id": null,
                        "shortcut_task_url": null,
                        "trello_card_id": null,
                        "trello_card_url": null,
                        "linear_issue_id": null,
                        "linear_issue_url": null,
                        "zendesk_ticket_id": null,
                        "zendesk_ticket_url": null,
                        "airtable_base_key": null,
                        "airtable_table_name": null,
                        "airtable_record_id": null,
                        "airtable_record_url": null,
                        "freshservice_ticket_id": null,
                        "freshservice_ticket_url": null,
                        "freshservice_task_id": null,
                        "freshservice_task_url": null,
                        "created_at": "2022-05-26T19:59:08.490-07:00",
                        "updated_at": "2022-05-26T19:59:08.490-07:00",
                        "summary": "Tasks can be customized in Rootly"
                      }
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/incidents/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incidents/{id}/mitigate": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "summary": "Mitigate an incident",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incidents"
        ],
        "description": "Mitigate a specific incident by id",
        "operationId": "mitigateIncident",
        "parameters": [],
        "responses": {
          "200": {
            "description": "incident mitigated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                    "type": "incidents",
                    "attributes": {
                      "sequential_id": 1,
                      "slug": "est-ut-dicta-nulla",
                      "kind": "normal",
                      "title": "Est ut dicta nulla.",
                      "summary": "Doloribus et pariatur quae.",
                      "status": "mitigated",
                      "url": "https://test.rootly.com/account/incidents/est-ut-dicta-nulla",
                      "user": {
                        "data": {
                          "id": "114",
                          "type": "users",
                          "attributes": {
                            "name": "Kip Mann",
                            "email": "troy@von.net",
                            "full_name": "Kip Mann",
                            "full_name_with_team": "Kip Mann",
                            "slack_id": null
                          }
                        }
                      },
                      "severity": {
                        "data": {
                          "id": "64229e8f-de0d-40d4-ad7e-7d1970c43a98",
                          "type": "severities",
                          "attributes": {
                            "name": "SEV2",
                            "slug": "sev2-ce5bbfc2-646b-4189-ae05-2cd1c7d3b91d",
                            "description": "Minus omnis nihil vitae.",
                            "severity": "medium",
                            "color": "#047BF8",
                            "notify_emails": [],
                            "slack_channels": [],
                            "slack_aliases": [],
                            "created_at": "2022-05-26T19:59:21.005-07:00",
                            "updated_at": "2022-05-26T19:59:21.005-07:00"
                          }
                        }
                      },
                      "started_by_user": {
                        "id": 114,
                        "email": "troy@von.net",
                        "deleted_at": null,
                        "created_at": "2022-05-26T19:59:16.219-07:00",
                        "updated_at": "2022-05-26T19:59:16.219-07:00",
                        "current_team_id": null,
                        "first_name": "Kip",
                        "last_name": "Mann",
                        "time_zone": "Pacific Time (US & Canada)",
                        "last_seen_at": null,
                        "profile_photo_id": null,
                        "ability_cache": null,
                        "last_notification_email_sent_at": null,
                        "incidents_count": 1,
                        "accept_terms": true,
                        "onboarding_completed": true,
                        "service_user": false,
                        "accept_marketing": true,
                        "teams_count": 0,
                        "created_through_sso": false,
                        "scim_uid": null,
                        "session_token": null,
                        "default_dashboard_id": null
                      },
                      "mitigated_by_user": {
                        "id": 112,
                        "email": "dwain@lowe.net",
                        "deleted_at": null,
                        "created_at": "2022-05-26T19:59:05.485-07:00",
                        "updated_at": "2022-05-26T19:59:33.896-07:00",
                        "current_team_id": 110,
                        "first_name": "Alan",
                        "last_name": "Langworth",
                        "time_zone": "Pacific Time (US & Canada)",
                        "last_seen_at": null,
                        "profile_photo_id": null,
                        "ability_cache": {
                          "team_ids": [
                            110,
                            110
                          ],
                          "administrating_team_ids": []
                        },
                        "last_notification_email_sent_at": null,
                        "incidents_count": 0,
                        "accept_terms": true,
                        "onboarding_completed": true,
                        "service_user": false,
                        "accept_marketing": true,
                        "teams_count": 2,
                        "created_through_sso": false,
                        "scim_uid": null,
                        "session_token": null,
                        "default_dashboard_id": null
                      },
                      "resolved_by_user": null,
                      "cancelled_by_user": null,
                      "mitigation_message": "Restart database fixed it!",
                      "resolution_message": null,
                      "cancellation_message": null,
                      "public_title": null,
                      "zoom_meeting_id": null,
                      "zoom_meeting_start_url": null,
                      "zoom_meeting_join_url": null,
                      "shortcut_story_id": null,
                      "shortcut_story_url": null,
                      "shortcut_task_id": null,
                      "shortcut_task_url": null,
                      "asana_task_id": null,
                      "asana_task_url": null,
                      "github_issue_id": null,
                      "github_issue_url": null,
                      "jira_issue_id": null,
                      "jira_issue_url": null,
                      "google_meeting_id": null,
                      "google_meeting_url": null,
                      "trello_card_id": null,
                      "trello_card_url": null,
                      "linear_issue_id": null,
                      "linear_issue_url": null,
                      "zendesk_ticket_id": null,
                      "zendesk_ticket_url": null,
                      "slack_channel_name": null,
                      "slack_channel_id": null,
                      "slack_channel_url": null,
                      "service_now_incident_id": null,
                      "service_now_incident_url": null,
                      "opsgenie_incident_id": null,
                      "opsgenie_incident_url": null,
                      "victor_ops_incident_id": null,
                      "victor_ops_incident_url": null,
                      "pagerduty_incident_id": null,
                      "pagerduty_incident_url": null,
                      "mattermost_channel_id": null,
                      "mattermost_channel_name": null,
                      "mattermost_channel_url": null,
                      "confluence_page_id": null,
                      "confluence_page_url": null,
                      "airtable_base_key": null,
                      "airtable_table_name": null,
                      "airtable_record_id": null,
                      "airtable_record_url": null,
                      "google_drive_id": null,
                      "google_drive_url": null,
                      "datadog_notebook_id": null,
                      "datadog_notebook_url": null,
                      "freshservice_ticket_id": null,
                      "freshservice_ticket_url": null,
                      "freshservice_task_id": null,
                      "freshservice_task_url": null,
                      "started_at": "2022-05-26T19:59:21.149-07:00",
                      "detected_at": null,
                      "acknowledged_at": null,
                      "mitigated_at": "2022-05-26T19:59:33.920-07:00",
                      "resolved_at": null,
                      "cancelled_at": null,
                      "created_at": "2022-05-26T19:59:21.149-07:00",
                      "updated_at": "2022-05-26T19:59:33.923-07:00",
                      "labels": {}
                    },
                    "relationships": {
                      "roles": {
                        "data": [
                          {
                            "id": "69624cdd-53da-49b0-8cf0-c6d5f52d5654",
                            "type": "incident_role_assignments"
                          },
                          {
                            "id": "1e158837-5286-4b2b-9e66-7418efe5ec2e",
                            "type": "incident_role_assignments"
                          }
                        ]
                      },
                      "environments": {
                        "data": []
                      },
                      "incident_types": {
                        "data": []
                      },
                      "services": {
                        "data": []
                      },
                      "functionalities": {
                        "data": []
                      },
                      "groups": {
                        "data": []
                      },
                      "events": {
                        "data": [
                          {
                            "id": "2f811548-e455-4227-b406-c310538b34eb",
                            "type": "incident_events"
                          },
                          {
                            "id": "01481d09-3714-477c-9e9c-9d803d3f7dc4",
                            "type": "incident_events"
                          }
                        ]
                      },
                      "action_items": {
                        "data": [
                          {
                            "id": "dfc408d5-fc06-44bf-b46e-56cf984f253f",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "2955f3df-a16e-4e26-bc13-3023fb13a209",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "dc37178c-db17-4806-a566-aaf376f50553",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "ac7bea4f-1bf1-4051-88ff-f176fd3378b5",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "2a61662e-f8dc-4def-b614-1419aff8a122",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "cb77952e-0a48-4417-ac11-b092ea40b24a",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "3c6cef75-3c1e-4ed4-b85a-1018ea95be94",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "62e29ba7-d502-4716-9c46-30e9afbd3b83",
                            "type": "incident_action_items"
                          }
                        ]
                      },
                      "custom_field_selections": {
                        "data": []
                      },
                      "feedbacks": {
                        "data": []
                      },
                      "incident_post_mortem": {
                        "data": null
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/mitigate_incident"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/incidents/%7Bid%7D/mitigate \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incidents\",\"attributes\":{\"mitigation_message\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bid%7D/mitigate\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"mitigation_message\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bid%7D/mitigate\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"mitigation_message\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bid%7D/mitigate\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"mitigation_message\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incidents/{id}/resolve": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "summary": "Resolve an incident",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incidents"
        ],
        "description": "Resolve a specific incident by id",
        "operationId": "resolveIncident",
        "parameters": [],
        "responses": {
          "200": {
            "description": "incident resolved",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                    "type": "incidents",
                    "attributes": {
                      "sequential_id": 1,
                      "slug": "est-ut-dicta-nulla",
                      "kind": "normal",
                      "title": "Est ut dicta nulla.",
                      "summary": "Doloribus et pariatur quae.",
                      "status": "resolved",
                      "url": "https://test.rootly.com/account/incidents/est-ut-dicta-nulla",
                      "user": {
                        "data": {
                          "id": "114",
                          "type": "users",
                          "attributes": {
                            "name": "Kip Mann",
                            "email": "troy@von.net",
                            "full_name": "Kip Mann",
                            "full_name_with_team": "Kip Mann",
                            "slack_id": null
                          }
                        }
                      },
                      "severity": {
                        "data": {
                          "id": "64229e8f-de0d-40d4-ad7e-7d1970c43a98",
                          "type": "severities",
                          "attributes": {
                            "name": "SEV2",
                            "slug": "sev2-ce5bbfc2-646b-4189-ae05-2cd1c7d3b91d",
                            "description": "Minus omnis nihil vitae.",
                            "severity": "medium",
                            "color": "#047BF8",
                            "notify_emails": [],
                            "slack_channels": [],
                            "slack_aliases": [],
                            "created_at": "2022-05-26T19:59:21.005-07:00",
                            "updated_at": "2022-05-26T19:59:21.005-07:00"
                          }
                        }
                      },
                      "started_by_user": {
                        "id": 114,
                        "email": "troy@von.net",
                        "deleted_at": null,
                        "created_at": "2022-05-26T19:59:16.219-07:00",
                        "updated_at": "2022-05-26T19:59:16.219-07:00",
                        "current_team_id": null,
                        "first_name": "Kip",
                        "last_name": "Mann",
                        "time_zone": "Pacific Time (US & Canada)",
                        "last_seen_at": null,
                        "profile_photo_id": null,
                        "ability_cache": null,
                        "last_notification_email_sent_at": null,
                        "incidents_count": 1,
                        "accept_terms": true,
                        "onboarding_completed": true,
                        "service_user": false,
                        "accept_marketing": true,
                        "teams_count": 0,
                        "created_through_sso": false,
                        "scim_uid": null,
                        "session_token": null,
                        "default_dashboard_id": null
                      },
                      "mitigated_by_user": null,
                      "resolved_by_user": {
                        "id": 112,
                        "email": "dwain@lowe.net",
                        "deleted_at": null,
                        "created_at": "2022-05-26T19:59:05.485-07:00",
                        "updated_at": "2022-05-26T19:59:34.193-07:00",
                        "current_team_id": 110,
                        "first_name": "Alan",
                        "last_name": "Langworth",
                        "time_zone": "Pacific Time (US & Canada)",
                        "last_seen_at": null,
                        "profile_photo_id": null,
                        "ability_cache": {
                          "team_ids": [
                            110,
                            110
                          ],
                          "administrating_team_ids": []
                        },
                        "last_notification_email_sent_at": null,
                        "incidents_count": 0,
                        "accept_terms": true,
                        "onboarding_completed": true,
                        "service_user": false,
                        "accept_marketing": true,
                        "teams_count": 2,
                        "created_through_sso": false,
                        "scim_uid": null,
                        "session_token": null,
                        "default_dashboard_id": null
                      },
                      "cancelled_by_user": null,
                      "mitigation_message": null,
                      "resolution_message": "Restart database fixed it!",
                      "cancellation_message": null,
                      "public_title": null,
                      "zoom_meeting_id": null,
                      "zoom_meeting_start_url": null,
                      "zoom_meeting_join_url": null,
                      "shortcut_story_id": null,
                      "shortcut_story_url": null,
                      "shortcut_task_id": null,
                      "shortcut_task_url": null,
                      "asana_task_id": null,
                      "asana_task_url": null,
                      "github_issue_id": null,
                      "github_issue_url": null,
                      "jira_issue_id": null,
                      "jira_issue_url": null,
                      "google_meeting_id": null,
                      "google_meeting_url": null,
                      "trello_card_id": null,
                      "trello_card_url": null,
                      "linear_issue_id": null,
                      "linear_issue_url": null,
                      "zendesk_ticket_id": null,
                      "zendesk_ticket_url": null,
                      "slack_channel_name": null,
                      "slack_channel_id": null,
                      "slack_channel_url": null,
                      "service_now_incident_id": null,
                      "service_now_incident_url": null,
                      "opsgenie_incident_id": null,
                      "opsgenie_incident_url": null,
                      "victor_ops_incident_id": null,
                      "victor_ops_incident_url": null,
                      "pagerduty_incident_id": null,
                      "pagerduty_incident_url": null,
                      "mattermost_channel_id": null,
                      "mattermost_channel_name": null,
                      "mattermost_channel_url": null,
                      "confluence_page_id": null,
                      "confluence_page_url": null,
                      "airtable_base_key": null,
                      "airtable_table_name": null,
                      "airtable_record_id": null,
                      "airtable_record_url": null,
                      "google_drive_id": null,
                      "google_drive_url": null,
                      "datadog_notebook_id": null,
                      "datadog_notebook_url": null,
                      "freshservice_ticket_id": null,
                      "freshservice_ticket_url": null,
                      "freshservice_task_id": null,
                      "freshservice_task_url": null,
                      "started_at": "2022-05-26T19:59:21.149-07:00",
                      "detected_at": null,
                      "acknowledged_at": null,
                      "mitigated_at": "2022-05-26T19:59:34.232-07:00",
                      "resolved_at": "2022-05-26T19:59:34.232-07:00",
                      "cancelled_at": null,
                      "created_at": "2022-05-26T19:59:21.149-07:00",
                      "updated_at": "2022-05-26T19:59:34.237-07:00",
                      "labels": {}
                    },
                    "relationships": {
                      "roles": {
                        "data": [
                          {
                            "id": "69624cdd-53da-49b0-8cf0-c6d5f52d5654",
                            "type": "incident_role_assignments"
                          },
                          {
                            "id": "1e158837-5286-4b2b-9e66-7418efe5ec2e",
                            "type": "incident_role_assignments"
                          }
                        ]
                      },
                      "environments": {
                        "data": []
                      },
                      "incident_types": {
                        "data": []
                      },
                      "services": {
                        "data": []
                      },
                      "functionalities": {
                        "data": []
                      },
                      "groups": {
                        "data": []
                      },
                      "events": {
                        "data": [
                          {
                            "id": "2f811548-e455-4227-b406-c310538b34eb",
                            "type": "incident_events"
                          },
                          {
                            "id": "01481d09-3714-477c-9e9c-9d803d3f7dc4",
                            "type": "incident_events"
                          }
                        ]
                      },
                      "action_items": {
                        "data": [
                          {
                            "id": "dfc408d5-fc06-44bf-b46e-56cf984f253f",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "2955f3df-a16e-4e26-bc13-3023fb13a209",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "dc37178c-db17-4806-a566-aaf376f50553",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "ac7bea4f-1bf1-4051-88ff-f176fd3378b5",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "2a61662e-f8dc-4def-b614-1419aff8a122",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "cb77952e-0a48-4417-ac11-b092ea40b24a",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "3c6cef75-3c1e-4ed4-b85a-1018ea95be94",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "62e29ba7-d502-4716-9c46-30e9afbd3b83",
                            "type": "incident_action_items"
                          }
                        ]
                      },
                      "custom_field_selections": {
                        "data": []
                      },
                      "feedbacks": {
                        "data": []
                      },
                      "incident_post_mortem": {
                        "data": {
                          "id": "1e585ccc-804a-4046-beec-c46ee6ec5dfd",
                          "type": "incident_post_mortems"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/resolve_incident"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/incidents/%7Bid%7D/resolve \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incidents\",\"attributes\":{\"resolution_message\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bid%7D/resolve\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"resolution_message\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bid%7D/resolve\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"resolution_message\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bid%7D/resolve\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"resolution_message\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/incidents/{id}/cancel": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "put": {
        "summary": "Resolve an incident",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Incidents"
        ],
        "description": "Resolve a specific incident by id",
        "operationId": "cancelIncident",
        "parameters": [],
        "responses": {
          "200": {
            "description": "incident cancel",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "8fc9191b-510b-40c7-8eb2-316ca468cfbb",
                    "type": "incidents",
                    "attributes": {
                      "sequential_id": 1,
                      "slug": "est-ut-dicta-nulla",
                      "kind": "normal",
                      "title": "Est ut dicta nulla.",
                      "summary": "Doloribus et pariatur quae.",
                      "status": "cancelled",
                      "url": "https://test.rootly.com/account/incidents/est-ut-dicta-nulla",
                      "user": {
                        "data": {
                          "id": "114",
                          "type": "users",
                          "attributes": {
                            "name": "Kip Mann",
                            "email": "troy@von.net",
                            "full_name": "Kip Mann",
                            "full_name_with_team": "Kip Mann",
                            "slack_id": null
                          }
                        }
                      },
                      "severity": {
                        "data": {
                          "id": "64229e8f-de0d-40d4-ad7e-7d1970c43a98",
                          "type": "severities",
                          "attributes": {
                            "name": "SEV2",
                            "slug": "sev2-ce5bbfc2-646b-4189-ae05-2cd1c7d3b91d",
                            "description": "Minus omnis nihil vitae.",
                            "severity": "medium",
                            "color": "#047BF8",
                            "notify_emails": [],
                            "slack_channels": [],
                            "slack_aliases": [],
                            "created_at": "2022-05-26T19:59:21.005-07:00",
                            "updated_at": "2022-05-26T19:59:21.005-07:00"
                          }
                        }
                      },
                      "started_by_user": {
                        "id": 114,
                        "email": "troy@von.net",
                        "deleted_at": null,
                        "created_at": "2022-05-26T19:59:16.219-07:00",
                        "updated_at": "2022-05-26T19:59:16.219-07:00",
                        "current_team_id": null,
                        "first_name": "Kip",
                        "last_name": "Mann",
                        "time_zone": "Pacific Time (US & Canada)",
                        "last_seen_at": null,
                        "profile_photo_id": null,
                        "ability_cache": null,
                        "last_notification_email_sent_at": null,
                        "incidents_count": 1,
                        "accept_terms": true,
                        "onboarding_completed": true,
                        "service_user": false,
                        "accept_marketing": true,
                        "teams_count": 0,
                        "created_through_sso": false,
                        "scim_uid": null,
                        "session_token": null,
                        "default_dashboard_id": null
                      },
                      "mitigated_by_user": null,
                      "resolved_by_user": null,
                      "cancelled_by_user": {
                        "id": 112,
                        "email": "dwain@lowe.net",
                        "deleted_at": null,
                        "created_at": "2022-05-26T19:59:05.485-07:00",
                        "updated_at": "2022-05-26T19:59:34.537-07:00",
                        "current_team_id": 110,
                        "first_name": "Alan",
                        "last_name": "Langworth",
                        "time_zone": "Pacific Time (US & Canada)",
                        "last_seen_at": null,
                        "profile_photo_id": null,
                        "ability_cache": {
                          "team_ids": [
                            110,
                            110
                          ],
                          "administrating_team_ids": []
                        },
                        "last_notification_email_sent_at": null,
                        "incidents_count": 0,
                        "accept_terms": true,
                        "onboarding_completed": true,
                        "service_user": false,
                        "accept_marketing": true,
                        "teams_count": 2,
                        "created_through_sso": false,
                        "scim_uid": null,
                        "session_token": null,
                        "default_dashboard_id": null
                      },
                      "mitigation_message": null,
                      "resolution_message": null,
                      "cancellation_message": "Nevermind!",
                      "public_title": null,
                      "zoom_meeting_id": null,
                      "zoom_meeting_start_url": null,
                      "zoom_meeting_join_url": null,
                      "shortcut_story_id": null,
                      "shortcut_story_url": null,
                      "shortcut_task_id": null,
                      "shortcut_task_url": null,
                      "asana_task_id": null,
                      "asana_task_url": null,
                      "github_issue_id": null,
                      "github_issue_url": null,
                      "jira_issue_id": null,
                      "jira_issue_url": null,
                      "google_meeting_id": null,
                      "google_meeting_url": null,
                      "trello_card_id": null,
                      "trello_card_url": null,
                      "linear_issue_id": null,
                      "linear_issue_url": null,
                      "zendesk_ticket_id": null,
                      "zendesk_ticket_url": null,
                      "slack_channel_name": null,
                      "slack_channel_id": null,
                      "slack_channel_url": null,
                      "service_now_incident_id": null,
                      "service_now_incident_url": null,
                      "opsgenie_incident_id": null,
                      "opsgenie_incident_url": null,
                      "victor_ops_incident_id": null,
                      "victor_ops_incident_url": null,
                      "pagerduty_incident_id": null,
                      "pagerduty_incident_url": null,
                      "mattermost_channel_id": null,
                      "mattermost_channel_name": null,
                      "mattermost_channel_url": null,
                      "confluence_page_id": null,
                      "confluence_page_url": null,
                      "airtable_base_key": null,
                      "airtable_table_name": null,
                      "airtable_record_id": null,
                      "airtable_record_url": null,
                      "google_drive_id": null,
                      "google_drive_url": null,
                      "datadog_notebook_id": null,
                      "datadog_notebook_url": null,
                      "freshservice_ticket_id": null,
                      "freshservice_ticket_url": null,
                      "freshservice_task_id": null,
                      "freshservice_task_url": null,
                      "started_at": "2022-05-26T19:59:21.149-07:00",
                      "detected_at": null,
                      "acknowledged_at": null,
                      "mitigated_at": null,
                      "resolved_at": null,
                      "cancelled_at": "2022-05-26T19:59:34.562-07:00",
                      "created_at": "2022-05-26T19:59:21.149-07:00",
                      "updated_at": "2022-05-26T19:59:34.564-07:00",
                      "labels": {}
                    },
                    "relationships": {
                      "roles": {
                        "data": [
                          {
                            "id": "69624cdd-53da-49b0-8cf0-c6d5f52d5654",
                            "type": "incident_role_assignments"
                          },
                          {
                            "id": "1e158837-5286-4b2b-9e66-7418efe5ec2e",
                            "type": "incident_role_assignments"
                          }
                        ]
                      },
                      "environments": {
                        "data": []
                      },
                      "incident_types": {
                        "data": []
                      },
                      "services": {
                        "data": []
                      },
                      "functionalities": {
                        "data": []
                      },
                      "groups": {
                        "data": []
                      },
                      "events": {
                        "data": [
                          {
                            "id": "2f811548-e455-4227-b406-c310538b34eb",
                            "type": "incident_events"
                          },
                          {
                            "id": "01481d09-3714-477c-9e9c-9d803d3f7dc4",
                            "type": "incident_events"
                          }
                        ]
                      },
                      "action_items": {
                        "data": [
                          {
                            "id": "dfc408d5-fc06-44bf-b46e-56cf984f253f",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "2955f3df-a16e-4e26-bc13-3023fb13a209",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "dc37178c-db17-4806-a566-aaf376f50553",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "ac7bea4f-1bf1-4051-88ff-f176fd3378b5",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "2a61662e-f8dc-4def-b614-1419aff8a122",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "cb77952e-0a48-4417-ac11-b092ea40b24a",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "3c6cef75-3c1e-4ed4-b85a-1018ea95be94",
                            "type": "incident_action_items"
                          },
                          {
                            "id": "62e29ba7-d502-4716-9c46-30e9afbd3b83",
                            "type": "incident_action_items"
                          }
                        ]
                      },
                      "custom_field_selections": {
                        "data": []
                      },
                      "feedbacks": {
                        "data": []
                      },
                      "incident_post_mortem": {
                        "data": null
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/incident_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/cancel_incident"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/incidents/%7Bid%7D/cancel \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"incidents\",\"attributes\":{\"cancellation_message\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/incidents/%7Bid%7D/cancel\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"cancellation_message\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/incidents/%7Bid%7D/cancel\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"cancellation_message\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/incidents/%7Bid%7D/cancel\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"incidents\\\",\\\"attributes\\\":{\\\"cancellation_message\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/playbooks/{playbook_id}/playbook_tasks": {
      "parameters": [
        {
          "name": "playbook_id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Creates a playbook task",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Playbook Tasks"
        ],
        "description": "Creates a new task from provided data",
        "operationId": "createPlaybookTask",
        "parameters": [],
        "responses": {
          "201": {
            "description": "playbook_task created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "31dd7582-7bd0-4058-b796-86dabbc0df8c",
                    "type": "playbook_tasks",
                    "attributes": {
                      "task": "New task",
                      "description": "New task description",
                      "created_at": "2022-05-26T19:59:36.080-07:00",
                      "updated_at": "2022-05-26T19:59:36.080-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/playbook_task_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "task": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_playbook_task"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/playbooks/%7Bplaybook_id%7D/playbook_tasks \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"playbook_tasks\",\"attributes\":{\"task\":\"string\",\"description\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/playbooks/%7Bplaybook_id%7D/playbook_tasks\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"playbook_tasks\\\",\\\"attributes\\\":{\\\"task\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/playbooks/%7Bplaybook_id%7D/playbook_tasks\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"playbook_tasks\\\",\\\"attributes\\\":{\\\"task\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/playbooks/%7Bplaybook_id%7D/playbook_tasks\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"playbook_tasks\\\",\\\"attributes\\\":{\\\"task\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List playbook tasks",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Playbook Tasks"
        ],
        "description": "List playbook tasks",
        "operationId": "listPlaybookTasks",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/playbook_task_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/playbooks/%7Bplaybook_id%7D/playbook_tasks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/playbooks/%7Bplaybook_id%7D/playbook_tasks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/playbooks/%7Bplaybook_id%7D/playbook_tasks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/playbooks/%7Bplaybook_id%7D/playbook_tasks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/playbook_tasks/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a playbook task",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Playbook Tasks"
        ],
        "description": "Retrieves a specific playbook_task by id",
        "operationId": "getPlaybookTasks",
        "responses": {
          "200": {
            "description": "playbook_task found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "a5355e54-3e56-4b9a-b04a-7146a70974e2",
                    "type": "playbook_tasks",
                    "attributes": {
                      "task": "Officia tempore natus amet.",
                      "description": "Rerum ullam et sequi.",
                      "created_at": "2022-05-26T19:59:35.963-07:00",
                      "updated_at": "2022-05-26T19:59:35.963-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/playbook_task_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/playbook_tasks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/playbook_tasks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/playbook_tasks/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/playbook_tasks/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a playbook task",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Playbook Tasks"
        ],
        "description": "Update a specific playbook task by id",
        "operationId": "updatePlaybookTask",
        "parameters": [],
        "responses": {
          "200": {
            "description": "playbook_task updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "a5355e54-3e56-4b9a-b04a-7146a70974e2",
                    "type": "playbook_tasks",
                    "attributes": {
                      "task": "Task updated",
                      "description": "Task description updated",
                      "created_at": "2022-05-26T19:59:35.963-07:00",
                      "updated_at": "2022-05-26T19:59:36.699-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/playbook_task_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_playbook_task"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/playbook_tasks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"playbook_tasks\",\"attributes\":{\"task\":\"string\",\"description\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/playbook_tasks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"playbook_tasks\\\",\\\"attributes\\\":{\\\"task\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/playbook_tasks/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"playbook_tasks\\\",\\\"attributes\\\":{\\\"task\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/playbook_tasks/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"playbook_tasks\\\",\\\"attributes\\\":{\\\"task\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a playbook task",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Playbook Tasks"
        ],
        "description": "Delete a specific playbook task by id",
        "operationId": "deletePlaybookTask",
        "responses": {
          "200": {
            "description": "playbook_task deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "a5355e54-3e56-4b9a-b04a-7146a70974e2",
                    "type": "playbook_tasks",
                    "attributes": {
                      "task": "Officia tempore natus amet.",
                      "description": "Rerum ullam et sequi.",
                      "created_at": "2022-05-26T19:59:35.963-07:00",
                      "updated_at": "2022-05-26T19:59:36.961-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/playbook_task_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/playbook_tasks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/playbook_tasks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/playbook_tasks/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/playbook_tasks/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/playbooks": {
      "post": {
        "summary": "Creates a playbook",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Playbooks"
        ],
        "description": "Creates a new playbook from provided data",
        "operationId": "createPlaybook",
        "parameters": [],
        "responses": {
          "201": {
            "description": "playbook created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "9042ff6d-5423-446e-a65b-f268d306773b",
                    "type": "playbooks",
                    "attributes": {
                      "title": "How to handle customer-facing incident?",
                      "summary": "This is a summary",
                      "external_url": null,
                      "created_at": "2022-05-26T19:59:38.719-07:00",
                      "updated_at": "2022-05-26T19:59:38.719-07:00"
                    },
                    "relationships": {
                      "severities": {
                        "data": []
                      },
                      "environments": {
                        "data": [
                          {
                            "id": "b6e6ae2b-c075-4e80-8d0b-e05782109d8d",
                            "type": "environments"
                          },
                          {
                            "id": "e2dfe79e-d337-4e98-ac46-e092dae76fc1",
                            "type": "environments"
                          }
                        ]
                      },
                      "services": {
                        "data": [
                          {
                            "id": "4686809d-f2d4-45a0-92f3-995899969230",
                            "type": "services"
                          },
                          {
                            "id": "3930d515-0b86-4e5f-84ee-360e357c35fb",
                            "type": "services"
                          }
                        ]
                      },
                      "functionalities": {
                        "data": [
                          {
                            "id": "d45bf4ed-3c27-47c2-9883-58bbbb608f0e",
                            "type": "functionalities"
                          },
                          {
                            "id": "e182acc0-053f-44cf-a816-1eca2814353c",
                            "type": "functionalities"
                          }
                        ]
                      },
                      "groups": {
                        "data": []
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/playbook_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "title": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_playbook"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/playbooks \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"playbooks\",\"attributes\":{\"title\":\"string\",\"summary\":\"string\",\"external_url\":\"string\",\"severity_ids\":[\"string\"],\"environment_ids\":[\"string\"],\"service_ids\":[\"string\"],\"functionality_ids\":[\"string\"],\"group_ids\":[\"string\"]}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/playbooks\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"playbooks\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"external_url\\\":\\\"string\\\",\\\"severity_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"functionality_ids\\\":[\\\"string\\\"],\\\"group_ids\\\":[\\\"string\\\"]}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/playbooks\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"playbooks\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"external_url\\\":\\\"string\\\",\\\"severity_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"functionality_ids\\\":[\\\"string\\\"],\\\"group_ids\\\":[\\\"string\\\"]}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/playbooks\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"playbooks\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"external_url\\\":\\\"string\\\",\\\"severity_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"functionality_ids\\\":[\\\"string\\\"],\\\"group_ids\\\":[\\\"string\\\"]}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List playbooks",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Playbooks"
        ],
        "description": "List playbooks",
        "operationId": "listPlaybooks",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/playbook_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/playbooks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/playbooks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/playbooks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/playbooks?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/playbooks/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a playbook",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Playbooks"
        ],
        "description": "Retrieves a specific playbook by id",
        "operationId": "getPlaybook",
        "responses": {
          "200": {
            "description": "playbook found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "66a0b9a6-dd93-482c-837a-448a20666886",
                    "type": "playbooks",
                    "attributes": {
                      "title": "Officiis rerum ea dolorem.",
                      "summary": null,
                      "external_url": null,
                      "created_at": "2022-05-26T19:59:38.566-07:00",
                      "updated_at": "2022-05-26T19:59:38.566-07:00"
                    },
                    "relationships": {
                      "severities": {
                        "data": []
                      },
                      "environments": {
                        "data": []
                      },
                      "services": {
                        "data": []
                      },
                      "functionalities": {
                        "data": []
                      },
                      "groups": {
                        "data": []
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/playbook_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/playbooks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/playbooks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/playbooks/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/playbooks/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a playbook",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Playbooks"
        ],
        "description": "Update a specific playbook by id",
        "operationId": "updatePlaybook",
        "parameters": [],
        "responses": {
          "200": {
            "description": "playbook updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "66a0b9a6-dd93-482c-837a-448a20666886",
                    "type": "playbooks",
                    "attributes": {
                      "title": "How to handle security incident?",
                      "summary": "This is a summary",
                      "external_url": null,
                      "created_at": "2022-05-26T19:59:38.566-07:00",
                      "updated_at": "2022-05-26T19:59:39.411-07:00"
                    },
                    "relationships": {
                      "severities": {
                        "data": []
                      },
                      "environments": {
                        "data": []
                      },
                      "services": {
                        "data": []
                      },
                      "functionalities": {
                        "data": []
                      },
                      "groups": {
                        "data": []
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/playbook_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_playbook"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/playbooks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"playbooks\",\"attributes\":{\"title\":\"string\",\"summary\":\"string\",\"external_url\":\"string\",\"severity_ids\":[\"string\"],\"environment_ids\":[\"string\"],\"service_ids\":[\"string\"],\"functionality_ids\":[\"string\"],\"group_ids\":[\"string\"]}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/playbooks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"playbooks\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"external_url\\\":\\\"string\\\",\\\"severity_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"functionality_ids\\\":[\\\"string\\\"],\\\"group_ids\\\":[\\\"string\\\"]}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/playbooks/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"playbooks\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"external_url\\\":\\\"string\\\",\\\"severity_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"functionality_ids\\\":[\\\"string\\\"],\\\"group_ids\\\":[\\\"string\\\"]}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/playbooks/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"playbooks\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"external_url\\\":\\\"string\\\",\\\"severity_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"service_ids\\\":[\\\"string\\\"],\\\"functionality_ids\\\":[\\\"string\\\"],\\\"group_ids\\\":[\\\"string\\\"]}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a playbook",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Playbooks"
        ],
        "description": "Delete a specific playbook by id",
        "operationId": "deletePlaybook",
        "responses": {
          "200": {
            "description": "playbook deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "66a0b9a6-dd93-482c-837a-448a20666886",
                    "type": "playbooks",
                    "attributes": {
                      "title": "Officiis rerum ea dolorem.",
                      "summary": null,
                      "external_url": null,
                      "created_at": "2022-05-26T19:59:38.566-07:00",
                      "updated_at": "2022-05-26T19:59:38.566-07:00"
                    },
                    "relationships": {
                      "severities": {
                        "data": []
                      },
                      "environments": {
                        "data": []
                      },
                      "services": {
                        "data": []
                      },
                      "functionalities": {
                        "data": []
                      },
                      "groups": {
                        "data": []
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/playbook_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/playbooks/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/playbooks/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/playbooks/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/playbooks/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/post_mortem_templates": {
      "post": {
        "summary": "Creates a postmortem template",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Postmortem Templates"
        ],
        "description": "Creates a new Postmortem Template from provided data",
        "operationId": "createPostmortemTemplate",
        "parameters": [],
        "responses": {
          "201": {
            "description": "post_mortem_template created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "9dac70ea-a5c6-4335-ae96-6dbb90cde5e4",
                    "type": "post_mortem_templates",
                    "attributes": {
                      "name": "My Postmortem Template",
                      "default": false,
                      "created_at": "2022-05-26T19:59:41.285-07:00",
                      "updated_at": "2022-05-26T19:59:41.285-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/post_mortem_template_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "name": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_post_mortem_template"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/post_mortem_templates \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"post_mortem_templates\",\"attributes\":{\"name\":\"string\",\"default\":true}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/post_mortem_templates\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"post_mortem_templates\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"default\\\":true}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/post_mortem_templates\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"post_mortem_templates\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"default\\\":true}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/post_mortem_templates\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"post_mortem_templates\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"default\\\":true}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List Postmortem Templates",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Postmortem Templates"
        ],
        "description": "List Postmortem Templates",
        "operationId": "listPostmortemTemplates",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/post_mortem_template_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/post_mortem_templates?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/post_mortem_templates?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/post_mortem_templates?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/post_mortem_templates?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/post_mortem_templates/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a Postmortem Template",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Postmortem Templates"
        ],
        "description": "Retrieves a specific Postmortem Template by id",
        "operationId": "getPostmortemTemplate",
        "responses": {
          "200": {
            "description": "Postmortem Template found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "9595cc10-6ac7-4a64-8c76-d2a22c8cefc7",
                    "type": "post_mortem_templates",
                    "attributes": {
                      "name": "Suscipit quo aut ut.",
                      "default": false,
                      "created_at": "2022-05-26T19:59:41.196-07:00",
                      "updated_at": "2022-05-26T19:59:41.196-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/post_mortem_template_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/post_mortem_templates/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/post_mortem_templates/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/post_mortem_templates/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/post_mortem_templates/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a Postmortem Template",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Postmortem Templates"
        ],
        "description": "Update a specific Postmortem Template by id",
        "operationId": "updatePostmortemTemplate",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Postmortem Template updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "9595cc10-6ac7-4a64-8c76-d2a22c8cefc7",
                    "type": "post_mortem_templates",
                    "attributes": {
                      "name": "My Postmortem Template Updated",
                      "default": false,
                      "created_at": "2022-05-26T19:59:41.196-07:00",
                      "updated_at": "2022-05-26T19:59:41.879-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/post_mortem_template_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_post_mortem_template"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/post_mortem_templates/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"post_mortem_templates\",\"attributes\":{\"name\":\"string\",\"default\":true}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/post_mortem_templates/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"post_mortem_templates\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"default\\\":true}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/post_mortem_templates/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"post_mortem_templates\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"default\\\":true}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/post_mortem_templates/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"post_mortem_templates\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"default\\\":true}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a Postmortem Template",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Postmortem Templates"
        ],
        "description": "Delete a specific Postmortem Template by id",
        "operationId": "deletePostmortemTemplate",
        "responses": {
          "200": {
            "description": "Postmortem Template deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "9595cc10-6ac7-4a64-8c76-d2a22c8cefc7",
                    "type": "post_mortem_templates",
                    "attributes": {
                      "name": "Suscipit quo aut ut.",
                      "default": false,
                      "created_at": "2022-05-26T19:59:41.196-07:00",
                      "updated_at": "2022-05-26T19:59:42.126-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/post_mortem_template_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/post_mortem_templates/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/post_mortem_templates/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/post_mortem_templates/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/post_mortem_templates/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/pulses": {
      "post": {
        "summary": "Creates a pulse",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Pulses"
        ],
        "description": "Creates a new pulse from provided data",
        "operationId": "createPulse",
        "parameters": [],
        "responses": {
          "201": {
            "description": "pulse created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "1b86da28-72b8-467c-a411-41b6289f0034",
                    "type": "pulses",
                    "attributes": {
                      "source": "k8s",
                      "summary": "Deploy k8s",
                      "labels": [
                        {
                          "key": "status",
                          "value": "succeeded"
                        }
                      ],
                      "refs": [
                        {
                          "key": "sha",
                          "value": "cd62148cbc5eb42168fe99fdb50a364e12b206ac"
                        },
                        {
                          "key": "image",
                          "value": "registry.rootly.com/rootly/my-service:cd6214"
                        }
                      ],
                      "services": [
                        {
                          "id": "9da5188d-502e-447e-9a87-2d99b5f7e8fa",
                          "team_id": 120,
                          "name": "Est incidunt maiores similique.",
                          "slug": "est-incidunt-maiores-similique",
                          "description": "Quo corrupti ea odit.",
                          "deleted_at": null,
                          "created_at": "2022-05-26T19:59:43.875-07:00",
                          "updated_at": "2022-05-26T19:59:43.875-07:00",
                          "opsgenie_id": null,
                          "pagerduty_id": null,
                          "notify_emails": [],
                          "public_description": null,
                          "github_repository_branch": "master",
                          "github_repository_name": null,
                          "color": "#047BF8",
                          "heroku_app_name": null,
                          "gitlab_repository_name": null,
                          "gitlab_repository_branch": "master",
                          "kubernetes_deployment_name": null,
                          "incidents_count": 0,
                          "position": 5,
                          "slack_channels": [],
                          "slack_aliases": []
                        }
                      ],
                      "environments": [
                        {
                          "id": "e7a26cac-ef4e-4be0-b4ce-609c7068425b",
                          "team_id": 120,
                          "name": "staging",
                          "slug": "staging-bba521a1-8c0f-48c9-b7fd-f324ba295e20",
                          "description": "Velit amet nesciunt quia.",
                          "color": "#2f1d4a",
                          "deleted_at": null,
                          "created_at": "2022-05-26T19:59:43.880-07:00",
                          "updated_at": "2022-05-26T19:59:43.880-07:00",
                          "incidents_count": 0,
                          "notify_emails": [],
                          "position": 4,
                          "slack_channels": [],
                          "slack_aliases": []
                        }
                      ],
                      "data": {
                        "url": "https://additionaldata.com"
                      },
                      "started_at": "2022-05-26T19:53:06.000-07:00",
                      "ended_at": "2022-05-26T19:55:06.000-07:00",
                      "created_at": "2022-05-26T19:59:44.040-07:00",
                      "updated_at": "2022-05-26T19:59:44.040-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/pulse_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "summary": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_pulse"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/pulses \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"pulses\",\"attributes\":{\"source\":\"string\",\"summary\":\"string\",\"service_ids\":[\"string\"],\"environment_ids\":[\"string\"],\"started_at\":\"2019-08-24T14:15:22Z\",\"ended_at\":\"2019-08-24T14:15:22Z\",\"labels\":[{\"key\":\"string\",\"value\":\"string\"}],\"refs\":[{\"key\":\"string\",\"value\":\"string\"}],\"data\":{}}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/pulses\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"pulses\\\",\\\"attributes\\\":{\\\"source\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"service_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"ended_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"labels\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"refs\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"data\\\":{}}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/pulses\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"pulses\\\",\\\"attributes\\\":{\\\"source\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"service_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"ended_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"labels\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"refs\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"data\\\":{}}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/pulses\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"pulses\\\",\\\"attributes\\\":{\\\"source\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"service_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"ended_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"labels\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"refs\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"data\\\":{}}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List pulses",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Pulses"
        ],
        "description": "List pulses",
        "operationId": "listPulses",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/pulse_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/pulses?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/pulses?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/pulses?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/pulses?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/pulses/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a pulse",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Pulses"
        ],
        "description": "Retrieves a specific pulse by id",
        "operationId": "getPulse",
        "responses": {
          "200": {
            "description": "pulse found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "ead05e9f-6caf-4bd7-a1bc-e4f4756c0060",
                    "type": "pulses",
                    "attributes": {
                      "source": "unknown",
                      "summary": "Vel numquam cumque vero.",
                      "labels": [],
                      "refs": [],
                      "services": [],
                      "environments": [],
                      "data": {},
                      "started_at": "2022-05-26T19:59:43.769-07:00",
                      "ended_at": null,
                      "created_at": "2022-05-26T19:59:43.769-07:00",
                      "updated_at": "2022-05-26T19:59:43.769-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/pulse_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/pulses/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/pulses/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/pulses/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/pulses/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a pulse",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Pulses"
        ],
        "description": "Update a specific pulse by id",
        "operationId": "updatePulse",
        "parameters": [],
        "responses": {
          "200": {
            "description": "pulse updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "ead05e9f-6caf-4bd7-a1bc-e4f4756c0060",
                    "type": "pulses",
                    "attributes": {
                      "source": "unknown",
                      "summary": "Deploy k8s",
                      "labels": [],
                      "refs": [],
                      "services": [
                        {
                          "id": "2165a499-3cab-40fc-88b5-944cfe52bb9f",
                          "team_id": 120,
                          "name": "Reiciendis laboriosam vitae tempore.",
                          "slug": "reiciendis-laboriosam-vitae-tempore",
                          "description": "Ad dolorem iusto quia.",
                          "deleted_at": null,
                          "created_at": "2022-05-26T19:59:43.885-07:00",
                          "updated_at": "2022-05-26T19:59:43.885-07:00",
                          "opsgenie_id": null,
                          "pagerduty_id": null,
                          "notify_emails": [],
                          "public_description": null,
                          "github_repository_branch": "master",
                          "github_repository_name": null,
                          "color": "#047BF8",
                          "heroku_app_name": null,
                          "gitlab_repository_name": null,
                          "gitlab_repository_branch": "master",
                          "kubernetes_deployment_name": null,
                          "incidents_count": 0,
                          "position": 6,
                          "slack_channels": [],
                          "slack_aliases": []
                        }
                      ],
                      "environments": [
                        {
                          "id": "8bcfda87-0d2a-4817-b1d8-a6a259c6bb6b",
                          "team_id": 120,
                          "name": "development",
                          "slug": "development-15221cb3-3f17-404d-8bc6-332c29a3f83e",
                          "description": "Dolores quia dolorem sapiente.",
                          "color": "#9f527f",
                          "deleted_at": null,
                          "created_at": "2022-05-26T19:59:43.889-07:00",
                          "updated_at": "2022-05-26T19:59:43.889-07:00",
                          "incidents_count": 0,
                          "notify_emails": [],
                          "position": 5,
                          "slack_channels": [],
                          "slack_aliases": []
                        }
                      ],
                      "data": {},
                      "started_at": "2022-05-26T19:59:43.769-07:00",
                      "ended_at": null,
                      "created_at": "2022-05-26T19:59:43.769-07:00",
                      "updated_at": "2022-05-26T19:59:44.699-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/pulse_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_pulse"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/pulses/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"pulses\",\"attributes\":{\"source\":\"string\",\"summary\":\"string\",\"service_ids\":[\"string\"],\"environment_ids\":[\"string\"],\"started_at\":\"2019-08-24T14:15:22Z\",\"ended_at\":\"2019-08-24T14:15:22Z\",\"labels\":[{\"key\":\"string\",\"value\":\"string\"}],\"refs\":[{\"key\":\"string\",\"value\":\"string\"}],\"data\":{}}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/pulses/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"pulses\\\",\\\"attributes\\\":{\\\"source\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"service_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"ended_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"labels\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"refs\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"data\\\":{}}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/pulses/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"pulses\\\",\\\"attributes\\\":{\\\"source\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"service_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"ended_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"labels\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"refs\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"data\\\":{}}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/pulses/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"pulses\\\",\\\"attributes\\\":{\\\"source\\\":\\\"string\\\",\\\"summary\\\":\\\"string\\\",\\\"service_ids\\\":[\\\"string\\\"],\\\"environment_ids\\\":[\\\"string\\\"],\\\"started_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"ended_at\\\":\\\"2019-08-24T14:15:22Z\\\",\\\"labels\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"refs\\\":[{\\\"key\\\":\\\"string\\\",\\\"value\\\":\\\"string\\\"}],\\\"data\\\":{}}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/services": {
      "post": {
        "summary": "Creates a service",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Services"
        ],
        "description": "Creates a new service from provided data",
        "operationId": "createService",
        "parameters": [],
        "responses": {
          "201": {
            "description": "service created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "1d277d4e-7cb2-49f4-9bd0-9d9ff9667ca1",
                    "type": "services",
                    "attributes": {
                      "name": "elasticsearch-prod",
                      "slug": "elasticsearch-prod-4fc50920-b5d2-40cb-917a-e2c3d585ac1b",
                      "description": "[PRODUCTION] Elastisearch",
                      "public_description": null,
                      "color": "#047BF8",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "github_repository_name": null,
                      "github_repository_branch": "master",
                      "gitlab_repository_name": null,
                      "gitlab_repository_branch": "master",
                      "created_at": "2022-05-26T19:59:46.185-07:00",
                      "updated_at": "2022-05-26T19:59:46.185-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/service_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "name": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_service"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/services \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"services\",\"attributes\":{\"name\":\"string\",\"description\":\"string\",\"color\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/services\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"services\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/services\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"services\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/services\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"services\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List services",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Services"
        ],
        "description": "List services",
        "operationId": "listServices",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/service_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/services?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/services?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/services?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/services?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/services/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a service",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Services"
        ],
        "description": "Retrieves a specific service by id",
        "operationId": "getService",
        "responses": {
          "200": {
            "description": "service found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "8e48d013-9fb7-4149-ba00-3b5274071c8b",
                    "type": "services",
                    "attributes": {
                      "name": "Quo aut et qui.",
                      "slug": "quo-aut-et-qui",
                      "description": "Est tempore vero esse.",
                      "public_description": null,
                      "color": "#047BF8",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "github_repository_name": null,
                      "github_repository_branch": "master",
                      "gitlab_repository_name": null,
                      "gitlab_repository_branch": "master",
                      "created_at": "2022-05-26T19:59:46.071-07:00",
                      "updated_at": "2022-05-26T19:59:46.071-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/service_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/services/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/services/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/services/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/services/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a service",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Services"
        ],
        "description": "Update a specific service by id",
        "operationId": "updateService",
        "parameters": [],
        "responses": {
          "200": {
            "description": "service updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "8e48d013-9fb7-4149-ba00-3b5274071c8b",
                    "type": "services",
                    "attributes": {
                      "name": "elasticsearch-staging",
                      "slug": "quo-aut-et-qui",
                      "description": "[STAGING] Elastisearch",
                      "public_description": null,
                      "color": "#047BF8",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "github_repository_name": null,
                      "github_repository_branch": "master",
                      "gitlab_repository_name": null,
                      "gitlab_repository_branch": "master",
                      "created_at": "2022-05-26T19:59:46.071-07:00",
                      "updated_at": "2022-05-26T19:59:46.792-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/service_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_service"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/services/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"services\",\"attributes\":{\"name\":\"string\",\"description\":\"string\",\"color\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/services/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"services\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/services/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"services\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/services/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"services\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"color\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a service",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Services"
        ],
        "description": "Delete a specific service by id",
        "operationId": "deleteService",
        "responses": {
          "200": {
            "description": "service deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "8e48d013-9fb7-4149-ba00-3b5274071c8b",
                    "type": "services",
                    "attributes": {
                      "name": "Quo aut et qui.",
                      "slug": "quo-aut-et-qui",
                      "description": "Est tempore vero esse.",
                      "public_description": null,
                      "color": "#047BF8",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "github_repository_name": null,
                      "github_repository_branch": "master",
                      "gitlab_repository_name": null,
                      "gitlab_repository_branch": "master",
                      "created_at": "2022-05-26T19:59:46.071-07:00",
                      "updated_at": "2022-05-26T19:59:47.038-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/service_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/services/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/services/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/services/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/services/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/severities": {
      "post": {
        "summary": "Creates a severity",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Severities"
        ],
        "description": "Creates a new severity from provided data",
        "operationId": "createSeverity",
        "parameters": [],
        "responses": {
          "201": {
            "description": "severity created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "3c51f346-9468-4a6f-8ef4-a4a03136b68a",
                    "type": "severities",
                    "attributes": {
                      "name": "P0",
                      "slug": "p0",
                      "description": "High Priority",
                      "severity": "medium",
                      "color": "#047BF8",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:59:49.487-07:00",
                      "updated_at": "2022-05-26T19:59:49.487-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/severity_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "name": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_severity"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/severities \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"severities\",\"attributes\":{\"name\":\"string\",\"description\":\"string\",\"severity\":\"critical\",\"color\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/severities\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"severities\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"severity\\\":\\\"critical\\\",\\\"color\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/severities\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"severities\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"severity\\\":\\\"critical\\\",\\\"color\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/severities\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"severities\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"severity\\\":\\\"critical\\\",\\\"color\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List severities",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Severities"
        ],
        "description": "List severities",
        "operationId": "listSeverities",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/severity_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/severities?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/severities?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/severities?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/severities?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/severities/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a severity",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Severities"
        ],
        "description": "Retrieves a specific severity by id",
        "operationId": "getSeverity",
        "responses": {
          "200": {
            "description": "severity found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "ffe01ef4-d46b-48e7-8eb8-9298c36372db",
                    "type": "severities",
                    "attributes": {
                      "name": "SEV1",
                      "slug": "sev1-143cf1c4-92d8-4ee2-9ad1-dcaaca408c6d",
                      "description": "Velit quo numquam commodi.",
                      "severity": "medium",
                      "color": "#047BF8",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:59:49.390-07:00",
                      "updated_at": "2022-05-26T19:59:49.390-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/severity_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/severities/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/severities/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/severities/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/severities/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a severity",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Severities"
        ],
        "description": "Update a specific severity by id",
        "operationId": "updateSeverity",
        "parameters": [],
        "responses": {
          "200": {
            "description": "severity updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "ffe01ef4-d46b-48e7-8eb8-9298c36372db",
                    "type": "severities",
                    "attributes": {
                      "name": "P1",
                      "slug": "p1",
                      "description": "Medium Priority",
                      "severity": "medium",
                      "color": "#047BF8",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:59:49.390-07:00",
                      "updated_at": "2022-05-26T19:59:50.082-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/severity_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_severity"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/severities/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"severities\",\"attributes\":{\"name\":\"string\",\"description\":\"string\",\"severity\":\"critical\",\"color\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/severities/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"severities\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"severity\\\":\\\"critical\\\",\\\"color\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/severities/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"severities\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"severity\\\":\\\"critical\\\",\\\"color\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/severities/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"severities\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"severity\\\":\\\"critical\\\",\\\"color\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a severity",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Severities"
        ],
        "description": "Delete a specific severity by id",
        "operationId": "deleteSeverity",
        "responses": {
          "200": {
            "description": "severity deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "ffe01ef4-d46b-48e7-8eb8-9298c36372db",
                    "type": "severities",
                    "attributes": {
                      "name": "SEV1",
                      "slug": "sev1-143cf1c4-92d8-4ee2-9ad1-dcaaca408c6d",
                      "description": "Velit quo numquam commodi.",
                      "severity": "medium",
                      "color": "#047BF8",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:59:49.390-07:00",
                      "updated_at": "2022-05-26T19:59:50.500-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/severity_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/severities/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/severities/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/severities/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/severities/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/status-pages": {
      "post": {
        "summary": "Creates a public status page",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Status Pages"
        ],
        "description": "Creates a new status_page from provided data",
        "operationId": "createStatusPage",
        "parameters": [],
        "responses": {
          "201": {
            "description": "status_page created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "b78f692a-fb01-46ba-92d9-e9f7f4540796",
                    "type": "status_pages",
                    "attributes": {
                      "title": "My Status Page",
                      "description": "My Status Page description",
                      "header_color": "#0061F2",
                      "footer_color": "#1F2F41",
                      "allow_search_engine_index": true,
                      "public": false,
                      "website_url": null,
                      "website_privacy_url": null,
                      "website_support_url": null,
                      "ga_tracking_id": null,
                      "time_zone": "UTC",
                      "enabled": true,
                      "created_at": "2022-05-26T19:59:53.016-07:00",
                      "updated_at": "2022-05-26T19:59:53.016-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/status_page_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "title": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_status_page"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/status-pages \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"status_pages\",\"attributes\":{\"title\":\"string\",\"description\":\"string\",\"header_color\":\"string\",\"footer_color\":\"string\",\"allow_search_engine_index\":true,\"show_uptime\":true,\"show_uptime_last_days\":30,\"public\":true,\"enabled\":true}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/status-pages\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"status_pages\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"header_color\\\":\\\"string\\\",\\\"footer_color\\\":\\\"string\\\",\\\"allow_search_engine_index\\\":true,\\\"show_uptime\\\":true,\\\"show_uptime_last_days\\\":30,\\\"public\\\":true,\\\"enabled\\\":true}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/status-pages\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"status_pages\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"header_color\\\":\\\"string\\\",\\\"footer_color\\\":\\\"string\\\",\\\"allow_search_engine_index\\\":true,\\\"show_uptime\\\":true,\\\"show_uptime_last_days\\\":30,\\\"public\\\":true,\\\"enabled\\\":true}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/status-pages\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"status_pages\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"header_color\\\":\\\"string\\\",\\\"footer_color\\\":\\\"string\\\",\\\"allow_search_engine_index\\\":true,\\\"show_uptime\\\":true,\\\"show_uptime_last_days\\\":30,\\\"public\\\":true,\\\"enabled\\\":true}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List public status pages",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Status Pages"
        ],
        "description": "List public status_pages",
        "operationId": "listStatusPages",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/status_page_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/status-pages?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/status-pages?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/status-pages?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/status-pages?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/status-pages/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a public status page",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Status Pages"
        ],
        "description": "Retrieves a specific status_page by id",
        "operationId": "getStatusPage",
        "responses": {
          "200": {
            "description": "status_page found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "6f5db62b-8b8f-48bf-bf08-3d742a3b3233",
                    "type": "status_pages",
                    "attributes": {
                      "title": "Vero veniam tempora harum.",
                      "description": null,
                      "header_color": "#0061F2",
                      "footer_color": "#1F2F41",
                      "allow_search_engine_index": true,
                      "public": false,
                      "website_url": null,
                      "website_privacy_url": null,
                      "website_support_url": null,
                      "ga_tracking_id": null,
                      "time_zone": "UTC",
                      "enabled": true,
                      "created_at": "2022-05-26T19:59:52.917-07:00",
                      "updated_at": "2022-05-26T19:59:52.917-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/status_page_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/status-pages/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/status-pages/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/status-pages/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/status-pages/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a public status page",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Status Pages"
        ],
        "description": "Update a specific status_page by id",
        "operationId": "updateStatusPage",
        "parameters": [],
        "responses": {
          "200": {
            "description": "status_page updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "6f5db62b-8b8f-48bf-bf08-3d742a3b3233",
                    "type": "status_pages",
                    "attributes": {
                      "title": "My Status Page Updated",
                      "description": "My Status Page Description Updated",
                      "header_color": "#0061F2",
                      "footer_color": "#1F2F41",
                      "allow_search_engine_index": true,
                      "public": false,
                      "website_url": null,
                      "website_privacy_url": null,
                      "website_support_url": null,
                      "ga_tracking_id": null,
                      "time_zone": "UTC",
                      "enabled": true,
                      "created_at": "2022-05-26T19:59:52.917-07:00",
                      "updated_at": "2022-05-26T19:59:53.640-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/status_page_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_status_page"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/status-pages/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"status_pages\",\"attributes\":{\"title\":\"string\",\"description\":\"string\",\"header_color\":\"string\",\"footer_color\":\"string\",\"allow_search_engine_index\":true,\"show_uptime\":true,\"show_uptime_last_days\":30,\"public\":true,\"enabled\":true}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/status-pages/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"status_pages\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"header_color\\\":\\\"string\\\",\\\"footer_color\\\":\\\"string\\\",\\\"allow_search_engine_index\\\":true,\\\"show_uptime\\\":true,\\\"show_uptime_last_days\\\":30,\\\"public\\\":true,\\\"enabled\\\":true}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/status-pages/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"status_pages\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"header_color\\\":\\\"string\\\",\\\"footer_color\\\":\\\"string\\\",\\\"allow_search_engine_index\\\":true,\\\"show_uptime\\\":true,\\\"show_uptime_last_days\\\":30,\\\"public\\\":true,\\\"enabled\\\":true}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/status-pages/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"status_pages\\\",\\\"attributes\\\":{\\\"title\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\",\\\"header_color\\\":\\\"string\\\",\\\"footer_color\\\":\\\"string\\\",\\\"allow_search_engine_index\\\":true,\\\"show_uptime\\\":true,\\\"show_uptime_last_days\\\":30,\\\"public\\\":true,\\\"enabled\\\":true}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a public status page",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Status Pages"
        ],
        "description": "Delete a specific status_page by id",
        "operationId": "deleteStatusPage",
        "responses": {
          "200": {
            "description": "status_page deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "6f5db62b-8b8f-48bf-bf08-3d742a3b3233",
                    "type": "status_pages",
                    "attributes": {
                      "title": "Vero veniam tempora harum.",
                      "description": null,
                      "header_color": "#0061F2",
                      "footer_color": "#1F2F41",
                      "allow_search_engine_index": true,
                      "public": false,
                      "website_url": null,
                      "website_privacy_url": null,
                      "website_support_url": null,
                      "ga_tracking_id": null,
                      "time_zone": "UTC",
                      "enabled": true,
                      "created_at": "2022-05-26T19:59:52.917-07:00",
                      "updated_at": "2022-05-26T19:59:53.905-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/status_page_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/status-pages/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/status-pages/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/status-pages/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/status-pages/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/teams": {
      "post": {
        "summary": "Creates a team",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Teams"
        ],
        "description": "Creates a new team from provided data",
        "operationId": "createTeam",
        "parameters": [],
        "responses": {
          "201": {
            "description": "team created",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "35f279db-f617-4b8f-863f-983e61467bbb",
                    "type": "groups",
                    "attributes": {
                      "name": "Infrastructure",
                      "description": "Everything infrastructure related",
                      "color": "#E65252",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:59:55.190-07:00",
                      "updated_at": "2022-05-26T19:59:55.190-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/team_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Invalid token",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          },
          "422": {
            "description": "invalid request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "name": [
                    "can't be blank"
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/new_team"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/v1/teams \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"groups\",\"attributes\":{\"name\":\"string\",\"description\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/teams\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"groups\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/teams\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"groups\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/teams\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"groups\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "get": {
        "summary": "List teams",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Teams"
        ],
        "description": "List teams",
        "operationId": "listTeams",
        "parameters": [
          {
            "name": "page[number]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page[size]",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/team_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/v1/teams?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/teams?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/teams?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/teams?page%5Bnumber%5D=SOME_INTEGER_VALUE&page%5Bsize%5D=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/v1/teams/{id}": {
      "parameters": [
        {
          "name": "id",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves a team",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Teams"
        ],
        "description": "Retrieves a specific team by id",
        "operationId": "getTeam",
        "responses": {
          "200": {
            "description": "team found",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "d28dd8fc-744b-4e88-be17-b41cc7233cfa",
                    "type": "groups",
                    "attributes": {
                      "name": "Consequatur sit modi facere.",
                      "description": null,
                      "color": "#E65252",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:59:55.077-07:00",
                      "updated_at": "2022-05-26T19:59:55.077-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/team_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/v1/teams/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/teams/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/teams/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/teams/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "put": {
        "summary": "Update a team",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Teams"
        ],
        "description": "Update a specific team by id",
        "operationId": "updateTeam",
        "parameters": [],
        "responses": {
          "200": {
            "description": "team updated",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "d28dd8fc-744b-4e88-be17-b41cc7233cfa",
                    "type": "groups",
                    "attributes": {
                      "name": "Security",
                      "description": "Everything security related",
                      "color": "#E65252",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:59:55.077-07:00",
                      "updated_at": "2022-05-26T19:59:55.879-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/team_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/update_team"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PUT \\\n  --url https://api.rootly.com/v1/teams/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/vnd.api+json' \\\n  --data '{\"data\":{\"type\":\"groups\",\"attributes\":{\"name\":\"string\",\"description\":\"string\"}}}'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/teams/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Put.new(url)\nrequest[\"content-type\"] = 'application/vnd.api+json'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"data\\\":{\\\"type\\\":\\\"groups\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PUT\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/teams/%7Bid%7D\",\n  \"headers\": {\n    \"content-type\": \"application/vnd.api+json\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(\"{\\\"data\\\":{\\\"type\\\":\\\"groups\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\");\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/teams/%7Bid%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"data\\\":{\\\"type\\\":\\\"groups\\\",\\\"attributes\\\":{\\\"name\\\":\\\"string\\\",\\\"description\\\":\\\"string\\\"}}}\")\n\n\treq, _ := http.NewRequest(\"PUT\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/vnd.api+json\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "Delete a team",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "Teams"
        ],
        "description": "Delete a specific team by id",
        "operationId": "deleteTeam",
        "responses": {
          "200": {
            "description": "team deleted",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "data": {
                    "id": "d28dd8fc-744b-4e88-be17-b41cc7233cfa",
                    "type": "groups",
                    "attributes": {
                      "name": "Consequatur sit modi facere.",
                      "description": null,
                      "color": "#E65252",
                      "notify_emails": [],
                      "slack_channels": [],
                      "slack_aliases": [],
                      "created_at": "2022-05-26T19:59:55.077-07:00",
                      "updated_at": "2022-05-26T19:59:56.133-07:00"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/team_response"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized request",
            "content": {
              "application/vnd.api+json": {
                "example": {
                  "errors": [
                    {
                      "title": "Not found or unauthorized",
                      "status": "401"
                    }
                  ]
                },
                "schema": {
                  "$ref": "#/components/schemas/errors_list"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/v1/teams/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/v1/teams/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/v1/teams/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/v1/teams/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/scim/Users": {
      "get": {
        "summary": "GET",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "SCIM"
        ],
        "parameters": [
          {
            "name": "filter",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startIndex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "lists users scoped to scim_token",
            "content": {}
          },
          "401": {
            "description": "responds with unauthorized for invalid token",
            "content": {}
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url 'https://api.rootly.com/scim/Users?filter=SOME_STRING_VALUE&startIndex=SOME_INTEGER_VALUE&count=SOME_INTEGER_VALUE' \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/scim/Users?filter=SOME_STRING_VALUE&startIndex=SOME_INTEGER_VALUE&count=SOME_INTEGER_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/scim/Users?filter=SOME_STRING_VALUE&startIndex=SOME_INTEGER_VALUE&count=SOME_INTEGER_VALUE\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/scim/Users?filter=SOME_STRING_VALUE&startIndex=SOME_INTEGER_VALUE&count=SOME_INTEGER_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "post": {
        "summary": "POST",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "SCIM"
        ],
        "parameters": [],
        "responses": {
          "201": {
            "description": "reprovisions deleted user",
            "content": {}
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api.rootly.com/scim/Users \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/scim/Users\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/scim/Users\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/scim/Users\"\n\n\treq, _ := http.NewRequest(\"POST\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    },
    "/scim/Users/{id}": {
      "get": {
        "summary": "GET",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "SCIM"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "gets user by id",
            "content": {}
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api.rootly.com/scim/Users/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/scim/Users/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/scim/Users/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/scim/Users/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "patch": {
        "summary": "PATCH",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "SCIM"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "reprovisions user",
            "content": {}
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api.rootly.com/scim/Users/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/scim/Users/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/scim/Users/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/scim/Users/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"PATCH\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      },
      "delete": {
        "summary": "DELETE",
        "security": [
          {
            "bearer_auth": []
          }
        ],
        "tags": [
          "SCIM"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "deletes user by id",
            "content": {}
          }
        },
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api.rootly.com/scim/Users/%7Bid%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api.rootly.com/scim/Users/%7Bid%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api.rootly.com\",\n  \"port\": null,\n  \"path\": \"/scim/Users/%7Bid%7D\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.rootly.com/scim/Users/%7Bid%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://api.rootly.com"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer_auth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "links": {
        "type": "object",
        "properties": {
          "self": {
            "type": "string"
          },
          "first": {
            "type": "string"
          },
          "prev": {
            "type": "string",
            "nullable": true
          },
          "next": {
            "type": "string",
            "nullable": true
          },
          "last": {
            "type": "string"
          }
        },
        "required": [
          "self",
          "first",
          "prev",
          "next",
          "last"
        ]
      },
      "errors_list": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "status": {
                  "type": "string"
                },
                "code": {
                  "type": "string",
                  "nullable": true
                },
                "detail": {
                  "type": "string",
                  "nullable": true
                }
              },
              "required": [
                "title",
                "status"
              ]
            }
          }
        }
      },
      "new_environment": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "environments"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the environment"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the environment",
                    "nullable": true
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_environment": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "environments"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the environment"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the environment",
                    "nullable": true
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "environment": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the environment"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the environment"
          },
          "description": {
            "type": "string",
            "description": "The description of the environment",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "environment_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the environment"
              },
              "type": {
                "type": "string",
                "enum": [
                  "environments"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/environment"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "environment_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the environment"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "environments"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/environment"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_functionality": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "functionalities"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the functionality"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the functionality",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_functionality": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "functionalities"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the functionality"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the functionality",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "functionality": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the functionality"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the functionality"
          },
          "description": {
            "type": "string",
            "description": "The description of the functionality",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "functionality_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the functionality"
              },
              "type": {
                "type": "string",
                "enum": [
                  "functionalities"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/functionality"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "functionality_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the functionality"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "functionalities"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/functionality"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_service": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "services"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the service"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the service",
                    "nullable": true
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_service": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "services"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the service"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the service",
                    "nullable": true
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "service": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the service"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the service"
          },
          "description": {
            "type": "string",
            "description": "The description of the service",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "service_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the service"
              },
              "type": {
                "type": "string",
                "enum": [
                  "services"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/service"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "service_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the service"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "services"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/service"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_playbook": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "playbooks"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the playbook"
                  },
                  "summary": {
                    "type": "string",
                    "description": "The summary of the playbook",
                    "nullable": true
                  },
                  "external_url": {
                    "type": "string",
                    "description": "The external url of the playbook",
                    "nullable": true
                  },
                  "severity_ids": {
                    "type": "array",
                    "description": "The Severity ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "environment_ids": {
                    "type": "array",
                    "description": "The Environment ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "service_ids": {
                    "type": "array",
                    "description": "The Service ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "functionality_ids": {
                    "type": "array",
                    "description": "The Functionality ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "group_ids": {
                    "type": "array",
                    "description": "The Team ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "title"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_playbook": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "playbooks"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the playbook"
                  },
                  "summary": {
                    "type": "string",
                    "description": "The summary of the playbook",
                    "nullable": true
                  },
                  "external_url": {
                    "type": "string",
                    "description": "The external url of the playbook",
                    "nullable": true
                  },
                  "severity_ids": {
                    "type": "array",
                    "description": "The Severity ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "environment_ids": {
                    "type": "array",
                    "description": "The Environment ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "service_ids": {
                    "type": "array",
                    "description": "The Service ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "functionality_ids": {
                    "type": "array",
                    "description": "The Functionality ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "group_ids": {
                    "type": "array",
                    "description": "The Team ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "playbook": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the playbook"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the playbook",
            "nullable": true
          },
          "external_url": {
            "type": "string",
            "description": "The external url of the playbook",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "title",
          "created_at",
          "updated_at"
        ]
      },
      "playbook_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the playbook"
              },
              "type": {
                "type": "string",
                "enum": [
                  "playbooks"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/playbook"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "playbook_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the playbook"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "playbooks"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/playbook"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_cause": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "causes"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the cause"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the cause",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_cause": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "causes"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the cause"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the cause",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "cause": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the cause"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the cause"
          },
          "description": {
            "type": "string",
            "description": "The description of the cause",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "cause_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the cause"
              },
              "type": {
                "type": "string",
                "enum": [
                  "causes"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/cause"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "cause_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the cause"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "causes"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/cause"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_severity": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "severities"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the severity"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the severity",
                    "nullable": true
                  },
                  "severity": {
                    "type": "string",
                    "description": "The severity of the severity",
                    "enum": [
                      "critical",
                      "high",
                      "medium",
                      "low"
                    ]
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_severity": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "severities"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the severity"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the severity",
                    "nullable": true
                  },
                  "severity": {
                    "type": "string",
                    "description": "The severity of the severity",
                    "enum": [
                      "critical",
                      "high",
                      "medium",
                      "low"
                    ]
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "severity": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the severity"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the severity"
          },
          "description": {
            "type": "string",
            "description": "The description of the severity",
            "nullable": true
          },
          "severity": {
            "type": "string",
            "description": "The severity of the severity",
            "enum": [
              "critical",
              "high",
              "medium",
              "low"
            ]
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "severity_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the severity"
              },
              "type": {
                "type": "string",
                "enum": [
                  "severities"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/severity"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "severity_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the severity"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "severities"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/severity"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_status_page": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "status_pages"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the status page"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the status page",
                    "nullable": true
                  },
                  "header_color": {
                    "type": "string",
                    "description": "The color of the header. Eg. \"#0061F2\"",
                    "nullable": true
                  },
                  "footer_color": {
                    "type": "string",
                    "description": "The color of the footer. Eg. \"#1F2F41\"",
                    "nullable": true
                  },
                  "allow_search_engine_index": {
                    "type": "boolean",
                    "description": "Allow search engines to include your public status page in search results.",
                    "nullable": true
                  },
                  "show_uptime": {
                    "type": "boolean",
                    "description": "Show uptime",
                    "nullable": true
                  },
                  "show_uptime_last_days": {
                    "type": "integer",
                    "description": "Show uptime over x days",
                    "enum": [
                      30,
                      60,
                      90
                    ],
                    "nullable": true
                  },
                  "public": {
                    "type": "boolean",
                    "description": "Make the status page accessible to the public",
                    "nullable": true
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Enabled / Disable the status page",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "title"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_status_page": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "status_pages"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the status page"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the status page",
                    "nullable": true
                  },
                  "header_color": {
                    "type": "string",
                    "description": "The color of the header. Eg. \"#0061F2\"",
                    "nullable": true
                  },
                  "footer_color": {
                    "type": "string",
                    "description": "The color of the footer. Eg. \"#1F2F41\"",
                    "nullable": true
                  },
                  "allow_search_engine_index": {
                    "type": "boolean",
                    "description": "Allow search engines to include your public status page in search results.",
                    "nullable": true
                  },
                  "show_uptime": {
                    "type": "boolean",
                    "description": "Show uptime",
                    "nullable": true
                  },
                  "show_uptime_last_days": {
                    "type": "integer",
                    "description": "Show uptime over x days",
                    "enum": [
                      30,
                      60,
                      90
                    ],
                    "nullable": true
                  },
                  "public": {
                    "type": "boolean",
                    "description": "Make the status page accessible to the public",
                    "nullable": true
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Enabled / Disable the status page",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "status_page": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the status page"
          },
          "description": {
            "type": "string",
            "description": "The description of the status page",
            "nullable": true
          },
          "header_color": {
            "type": "string",
            "description": "The color of the header. Eg. \"#0061F2\"",
            "nullable": true
          },
          "footer_color": {
            "type": "string",
            "description": "The color of the footer. Eg. \"#1F2F41\"",
            "nullable": true
          },
          "allow_search_engine_index": {
            "type": "boolean",
            "description": "Allow search engines to include your public status page in search results.",
            "nullable": true
          },
          "show_uptime": {
            "type": "boolean",
            "description": "Show uptime",
            "nullable": true
          },
          "show_uptime_last_days": {
            "type": "integer",
            "description": "Show uptime over x days",
            "enum": [
              30,
              60,
              90
            ],
            "nullable": true
          },
          "public": {
            "type": "boolean",
            "description": "Make the status page accessible to the public",
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "description": "Enabled / Disable the status page",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "title",
          "created_at",
          "updated_at"
        ]
      },
      "status_page_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the status page"
              },
              "type": {
                "type": "string",
                "enum": [
                  "status_pages"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/status_page"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "status_page_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the status page"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "status_pages"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/status_page"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_incident_role": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_roles"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the incident role"
                  },
                  "summary": {
                    "type": "string",
                    "description": "The summary of the incident role",
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the incident role",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_incident_role": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_roles"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the incident role"
                  },
                  "summary": {
                    "type": "string",
                    "description": "The summary of the incident role",
                    "nullable": true
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the incident role",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_role": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the incident role"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the incident role"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the incident role",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the incident role",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "incident_role_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the incident role"
              },
              "type": {
                "type": "string",
                "enum": [
                  "incident_roles"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/incident_role"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_role_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the incident role"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "incident_roles"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/incident_role"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_post_mortem_template": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "post_mortem_templates"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the postmortem template"
                  },
                  "default": {
                    "type": "boolean",
                    "description": "Default selected template when editing a postmortem",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_post_mortem_template": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "post_mortem_templates"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the postmortem template"
                  },
                  "default": {
                    "type": "boolean",
                    "description": "Default selected template when editing a postmortem",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "post_mortem_template": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the postmortem template"
          },
          "default": {
            "type": "boolean",
            "description": "Default selected template when editing a postmortem",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "post_mortem_template_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the post_mortem_template"
              },
              "type": {
                "type": "string",
                "enum": [
                  "post_mortem_templates"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/post_mortem_template"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "post_mortem_template_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the post_mortem_template"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "post_mortem_templates"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/post_mortem_template"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_team": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "groups"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the team"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the team",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_team": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "groups"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the team"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the team",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "team": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the team"
          },
          "description": {
            "type": "string",
            "description": "The description of the team",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "team_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the team"
              },
              "type": {
                "type": "string",
                "enum": [
                  "groups"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/team"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "team_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the team"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "groups"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/team"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_incident": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incidents"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the incident"
                  },
                  "slug": {
                    "type": "string",
                    "description": "The slug of the incident"
                  },
                  "kind": {
                    "type": "string",
                    "description": "The kind of the incident",
                    "enum": [
                      "test",
                      "example",
                      "normal",
                      "scheduled"
                    ]
                  },
                  "summary": {
                    "type": "string",
                    "description": "The summary of the incident",
                    "nullable": true
                  },
                  "severity_id": {
                    "type": "string",
                    "description": "The Severity ID to attach to the incident",
                    "nullable": true
                  },
                  "environment_ids": {
                    "type": "array",
                    "description": "The Environment ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "incident_type_ids": {
                    "type": "array",
                    "description": "The Incident Type ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "service_ids": {
                    "type": "array",
                    "description": "The Service ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "functionality_ids": {
                    "type": "array",
                    "description": "The Functionality ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "labels": {
                    "type": "object",
                    "description": "Labels to attach to the incidents. eg: {\"platform\":\"osx\", \"version\": \"1.29\"}",
                    "nullable": true
                  },
                  "group_ids": {
                    "type": "array",
                    "description": "The Team ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "notify_emails": {
                    "type": "array",
                    "description": "Emails you want to notify",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of the incident event",
                    "enum": [
                      "started",
                      "detected",
                      "acknowledged",
                      "mitigated",
                      "resolved",
                      "cancelled",
                      "started",
                      "detected",
                      "acknowledged",
                      "mitigated",
                      "resolved",
                      "cancelled",
                      "started",
                      "detected",
                      "acknowledged",
                      "mitigated",
                      "resolved",
                      "cancelled",
                      "scheduled",
                      "in_progress",
                      "completed"
                    ]
                  },
                  "create_on_slack": {
                    "type": "boolean",
                    "description": "Create an incident on Slack as well (if integration enabled)",
                    "default": false,
                    "nullable": true
                  },
                  "url": {
                    "type": "string",
                    "description": "The url to the incident"
                  },
                  "started_at": {
                    "type": "string",
                    "description": "Date of start",
                    "nullable": true
                  },
                  "detected_at": {
                    "type": "string",
                    "description": "Date of detection",
                    "nullable": true
                  },
                  "acknowledged_at": {
                    "type": "string",
                    "description": "Date of acknowledgment",
                    "nullable": true
                  },
                  "mitigated_at": {
                    "type": "string",
                    "description": "Date of mitigation",
                    "nullable": true
                  },
                  "resolved_at": {
                    "type": "string",
                    "description": "Date of resolution",
                    "nullable": true
                  },
                  "cancelled_at": {
                    "type": "string",
                    "description": "Date of cancellation",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "title"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_incident": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incidents"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the incident"
                  },
                  "summary": {
                    "type": "string",
                    "description": "The summary of the incident",
                    "nullable": true
                  },
                  "severity_id": {
                    "type": "string",
                    "description": "The Severity ID to attach to the incident",
                    "nullable": true
                  },
                  "environment_ids": {
                    "type": "array",
                    "description": "The Environment ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "incident_type_ids": {
                    "type": "array",
                    "description": "The Incident Type ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "service_ids": {
                    "type": "array",
                    "description": "The Service ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "functionality_ids": {
                    "type": "array",
                    "description": "The Functionality ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "labels": {
                    "type": "object",
                    "description": "Labels to attach to the incidents. eg: {\"platform\":\"osx\", \"version\": \"1.29\"}",
                    "nullable": true
                  },
                  "group_ids": {
                    "type": "array",
                    "description": "The Team ID's to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "started_at": {
                    "type": "string",
                    "description": "Date of start",
                    "nullable": true
                  },
                  "detected_at": {
                    "type": "string",
                    "description": "Date of detection",
                    "nullable": true
                  },
                  "acknowledged_at": {
                    "type": "string",
                    "description": "Date of acknowledgment",
                    "nullable": true
                  },
                  "mitigated_at": {
                    "type": "string",
                    "description": "Date of mitigation",
                    "nullable": true
                  },
                  "resolved_at": {
                    "type": "string",
                    "description": "Date of resolution",
                    "nullable": true
                  },
                  "cancelled_at": {
                    "type": "string",
                    "description": "Date of cancellation",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "mitigate_incident": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incidents"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "mitigation_message": {
                    "type": "string",
                    "description": "How was the incident mitigated?",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "resolve_incident": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incidents"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "resolution_message": {
                    "type": "string",
                    "description": "How was the incident resolved?",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "cancel_incident": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incidents"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "cancellation_message": {
                    "type": "string",
                    "description": "Why was the incident cancelled?",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the incident"
          },
          "summary": {
            "type": "string",
            "description": "The summary of the incident",
            "nullable": true
          },
          "severity_id": {
            "type": "string",
            "description": "The Severity ID to attach to the incident",
            "nullable": true
          },
          "environment_ids": {
            "type": "array",
            "description": "The Environment ID's to attach to the incident",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "incident_types_ids": {
            "type": "array",
            "description": "The Environment ID's to attach to the incident",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "service_ids": {
            "type": "array",
            "description": "The Service ID's to attach to the incident",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "functionality_ids": {
            "type": "array",
            "description": "The Functionality ID's to attach to the incident",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "group_ids": {
            "type": "array",
            "description": "The Team ID's to attach to the incident",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "labels": {
            "type": "object",
            "description": "Labels to attach to the incidents. eg: {\"platform\":\"osx\", \"version\": \"1.29\"}",
            "nullable": true
          },
          "started_at": {
            "type": "string",
            "description": "Date of start",
            "nullable": true
          },
          "detected_at": {
            "type": "string",
            "description": "Date of detection",
            "nullable": true
          },
          "acknowledged_at": {
            "type": "string",
            "description": "Date of acknowledgment",
            "nullable": true
          },
          "mitigated_at": {
            "type": "string",
            "description": "Date of mitigation",
            "nullable": true
          },
          "resolved_at": {
            "type": "string",
            "description": "Date of resolution",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "title",
          "created_at",
          "updated_at"
        ]
      },
      "incident_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the incident"
              },
              "type": {
                "type": "string",
                "enum": [
                  "incidents"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/incident"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the incident"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "incidents"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/incident"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_incident_action_item": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_action_items"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "summary": {
                    "type": "string",
                    "description": "The summary of the incident action item"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the incident action item",
                    "nullable": true
                  },
                  "kind": {
                    "type": "string",
                    "description": "The kind of the incident action item",
                    "enum": [
                      "task",
                      "follow_up"
                    ]
                  },
                  "priority": {
                    "type": "string",
                    "description": "The priority of the incident action item",
                    "enum": [
                      "high",
                      "medium",
                      "low"
                    ]
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of incident the action item",
                    "enum": [
                      "open",
                      "in_progress",
                      "cancelled",
                      "done"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "summary"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_incident_action_item": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_action_items"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "summary": {
                    "type": "string",
                    "description": "The summary of the incident action item"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the incident action item",
                    "nullable": true
                  },
                  "kind": {
                    "type": "string",
                    "description": "The kind of the incident action item",
                    "enum": [
                      "task",
                      "follow_up"
                    ]
                  },
                  "priority": {
                    "type": "string",
                    "description": "The priority of the incident action item",
                    "enum": [
                      "high",
                      "medium",
                      "low"
                    ]
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of incident the action item",
                    "enum": [
                      "open",
                      "in_progress",
                      "cancelled",
                      "done"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_action_item": {
        "type": "object",
        "properties": {
          "summary": {
            "type": "string",
            "description": "The summary of the incident action item"
          },
          "description": {
            "type": "string",
            "description": "The description of incident action item",
            "nullable": true
          },
          "kind": {
            "type": "string",
            "description": "The kind of the incident action item",
            "enum": [
              "task",
              "follow_up"
            ]
          },
          "priority": {
            "type": "string",
            "description": "The priority of the incident action item",
            "enum": [
              "high",
              "medium",
              "low"
            ]
          },
          "status": {
            "type": "string",
            "description": "The status of incident the action item",
            "enum": [
              "open",
              "in_progress",
              "cancelled",
              "done"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "summary",
          "created_at",
          "updated_at"
        ]
      },
      "incident_action_item_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the incident action item"
              },
              "type": {
                "type": "string",
                "enum": [
                  "incident_action_items"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/incident_action_item"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_action_item_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the incident action item"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "incident_action_items"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/incident_action_item"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_incident_event": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_events"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "description": "The summary of the incident event"
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The visibility of the incident action item",
                    "enum": [
                      "internal",
                      "external"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "event"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_incident_event": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_events"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "description": "The summary of the incident event"
                  },
                  "visibility": {
                    "type": "string",
                    "description": "The visibility of the incident action item",
                    "enum": [
                      "internal",
                      "external"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_event": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "description": "The summary of the incident event"
          },
          "visibility": {
            "type": "string",
            "description": "The visibility of the incident action item",
            "enum": [
              "internal",
              "external"
            ]
          },
          "occurred_at": {
            "type": "string",
            "description": "Date of occurence"
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "event",
          "occurred_at",
          "created_at",
          "updated_at"
        ]
      },
      "incident_event_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the incident event"
              },
              "type": {
                "type": "string",
                "enum": [
                  "incident_events"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/incident_event"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_event_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the incident event"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "incident_events"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/incident_event"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_incident_status_page_event": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_status_page_events"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "description": "The summary of the incident event"
                  },
                  "status_page_ids": {
                    "type": "array",
                    "description": "The status page ids to post the event",
                    "items": {
                      "type": "string"
                    }
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of the incident event",
                    "enum": [
                      "investigating",
                      "identified",
                      "monitoring",
                      "resolved",
                      "scheduled",
                      "in_progress",
                      "verifying",
                      "completed"
                    ]
                  },
                  "notify_subscribers": {
                    "type": "boolean",
                    "description": "Notify all status pages subscribers",
                    "default": false,
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "event"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_incident_status_page_event": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_status_page_events"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "event": {
                    "type": "string",
                    "description": "The summary of the incident event"
                  },
                  "status_page_ids": {
                    "type": "array",
                    "description": "The status page ids to post the event",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of the incident event",
                    "enum": [
                      "investigating",
                      "identified",
                      "monitoring",
                      "resolved",
                      "scheduled",
                      "in_progress",
                      "verifying",
                      "completed"
                    ]
                  },
                  "notify_subscribers": {
                    "type": "boolean",
                    "description": "Notify all status pages subscribers",
                    "default": false,
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_status_page_event": {
        "type": "object",
        "properties": {
          "event": {
            "type": "string",
            "description": "The summary of the incident event"
          },
          "status_page_ids": {
            "type": "array",
            "description": "The status page ids to post the event",
            "items": {
              "type": "string"
            }
          },
          "status": {
            "type": "string",
            "description": "The status of the incident event",
            "enum": [
              "investigating",
              "identified",
              "monitoring",
              "resolved",
              "scheduled",
              "in_progress",
              "verifying",
              "completed"
            ]
          },
          "notify_subscribers": {
            "type": "boolean",
            "description": "Notify all status pages subscribers"
          },
          "started_at": {
            "type": "string",
            "description": "Date of start"
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "event",
          "started_at",
          "created_at",
          "updated_at"
        ]
      },
      "incident_status_page_event_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the incident event"
              },
              "type": {
                "type": "string",
                "enum": [
                  "incident_status_page_events"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/incident_status_page_event"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_status_page_event_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the incident event"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "incident_status_page_events"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/incident_status_page_event"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "update_incident_post_mortem": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_post_mortems"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "title": {
                    "type": "string",
                    "description": "The title of the incident postmortem"
                  },
                  "status": {
                    "type": "string",
                    "description": "The status of the incident postmortem",
                    "enum": [
                      "draft",
                      "published"
                    ]
                  },
                  "started_at": {
                    "type": "string",
                    "description": "Date of started at",
                    "nullable": true
                  },
                  "mitigated_at": {
                    "type": "string",
                    "description": "Date of mitigation",
                    "nullable": true
                  },
                  "resolved_at": {
                    "type": "string",
                    "description": "Date of resolution",
                    "nullable": true
                  },
                  "show_timeline": {
                    "type": "boolean",
                    "description": "Show events timeline of the incident postmortem"
                  },
                  "show_timeline_trail": {
                    "type": "boolean",
                    "description": "Show trail events in the timeline of the incident postmortem"
                  },
                  "show_timeline_genius": {
                    "type": "boolean",
                    "description": "Show workflow events in the timeline of the incident postmortem"
                  },
                  "show_timeline_tasks": {
                    "type": "boolean",
                    "description": "Show tasks in the timeline of the incident postmortem"
                  },
                  "show_timeline_action_items": {
                    "type": "boolean",
                    "description": "Show action items in the timeline of the incident postmortem"
                  },
                  "show_services_impacted": {
                    "type": "boolean",
                    "description": "Show functionalities impacted of the incident postmortem"
                  },
                  "show_functionalities_impacted": {
                    "type": "boolean",
                    "description": "Show services impacted of the incident postmortem"
                  },
                  "show_groups_impacted": {
                    "type": "boolean",
                    "description": "Show groups impacted of the incident postmortem"
                  },
                  "show_alerts_attached": {
                    "type": "boolean",
                    "description": "Show alerts attached to the incident"
                  },
                  "cause_ids": {
                    "type": "array",
                    "description": "The Cause ID's to attach to the incident postmortem",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_post_mortem": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the incident postmortem"
          },
          "content": {
            "type": "string",
            "description": "The content of the incident postmortem (Only if internal)",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The status of the incident postmortem",
            "enum": [
              "draft",
              "published"
            ]
          },
          "started_at": {
            "type": "string",
            "description": "Date of started at",
            "nullable": true
          },
          "mitigated_at": {
            "type": "string",
            "description": "Date of mitigation",
            "nullable": true
          },
          "resolved_at": {
            "type": "string",
            "description": "Date of resolution",
            "nullable": true
          },
          "show_timeline": {
            "type": "boolean",
            "description": "Show events timeline of the incident postmortem"
          },
          "show_timeline_trail": {
            "type": "boolean",
            "description": "Show trail events in the timeline of the incident postmortem"
          },
          "show_timeline_genius": {
            "type": "boolean",
            "description": "Show workflow events in the timeline of the incident postmortem"
          },
          "show_timeline_tasks": {
            "type": "boolean",
            "description": "Show tasks in the timeline of the incident postmortem"
          },
          "show_timeline_action_items": {
            "type": "boolean",
            "description": "Show action items in the timeline of the incident postmortem"
          },
          "show_services_impacted": {
            "type": "boolean",
            "description": "Show functionalities impacted of the incident postmortem"
          },
          "show_functionalities_impacted": {
            "type": "boolean",
            "description": "Show services impacted of the incident postmortem"
          },
          "show_groups_impacted": {
            "type": "boolean",
            "description": "Show groups impacted of the incident postmortem"
          },
          "show_alerts_attached": {
            "type": "boolean",
            "description": "Show alerts attached to the incident"
          },
          "url": {
            "type": "string",
            "description": "The url to the incident postmortem"
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "title",
          "created_at",
          "updated_at"
        ]
      },
      "incident_post_mortem_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the incident postmortem"
              },
              "type": {
                "type": "string",
                "enum": [
                  "incident_post_mortems"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/incident_post_mortem"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_post_mortem_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the incident postmortem"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "incident_post_mortems"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/incident_post_mortem"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_incident_type": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_types"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the incident type"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the incident type",
                    "nullable": true
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_incident_type": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_types"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the incident type"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the incident type",
                    "nullable": true
                  },
                  "color": {
                    "type": "string",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_type": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the incident type"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the incident type"
          },
          "description": {
            "type": "string",
            "description": "The description of the incident type",
            "nullable": true
          },
          "color": {
            "type": "string",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "incident_type_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the incident type"
              },
              "type": {
                "type": "string",
                "enum": [
                  "incident_types"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/incident_type"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_type_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the incident type"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "incident_types"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/incident_type"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_playbook_task": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "playbook_tasks"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "The task of the incident task"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the incident task",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "task"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_playbook_task": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "playbook_tasks"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "The task of the incident task"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the incident task",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "playbook_task": {
        "type": "object",
        "properties": {
          "task": {
            "type": "string",
            "description": "The task of the incident task"
          },
          "description": {
            "type": "string",
            "description": "The description of incident task",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "task",
          "created_at",
          "updated_at"
        ]
      },
      "playbook_task_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the incident task"
              },
              "type": {
                "type": "string",
                "enum": [
                  "playbook_tasks"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/playbook_task"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "playbook_task_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the incident task"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "playbook_tasks"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/playbook_task"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_incident_role_task": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_role_tasks"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "The task of the incident task"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the incident task",
                    "nullable": true
                  },
                  "priority": {
                    "type": "string",
                    "description": "The priority of the incident task",
                    "enum": [
                      "high",
                      "medium",
                      "low"
                    ]
                  }
                },
                "additionalProperties": false,
                "required": [
                  "task"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_incident_role_task": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_role_tasks"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "task": {
                    "type": "string",
                    "description": "The task of the incident task"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the incident task",
                    "nullable": true
                  },
                  "priority": {
                    "type": "string",
                    "description": "The priority of the incident task",
                    "enum": [
                      "high",
                      "medium",
                      "low"
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_role_task": {
        "type": "object",
        "properties": {
          "task": {
            "type": "string",
            "description": "The task of the incident task"
          },
          "description": {
            "type": "string",
            "description": "The description of incident task",
            "nullable": true
          },
          "priority": {
            "type": "string",
            "description": "The priority of the incident task",
            "enum": [
              "high",
              "medium",
              "low"
            ]
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "task",
          "created_at",
          "updated_at"
        ]
      },
      "incident_role_task_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the incident task"
              },
              "type": {
                "type": "string",
                "enum": [
                  "incident_role_tasks"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/incident_role_task"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_role_task_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the incident task"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "incident_role_tasks"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/incident_role_task"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "attach_alert": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "alerts"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "alert_ids": {
                    "type": "array",
                    "description": "Alert Id to attach to the incident",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "alert_ids"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "new_alert": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "alerts"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "string",
                    "description": "The source of the alert (eg: zendesk)",
                    "enum": [
                      "pagerduty",
                      "opsgenie",
                      "victorops",
                      "datadog",
                      "nobl9",
                      "zendesk",
                      "asana",
                      "jira"
                    ]
                  },
                  "summary": {
                    "type": "string",
                    "description": "The summary of the pulse"
                  },
                  "service_ids": {
                    "type": "array",
                    "description": "The Service ID's to attach to the pulse",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "environment_ids": {
                    "type": "array",
                    "description": "The Environment ID's to attach to the pulse",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "started_at": {
                    "type": "string",
                    "description": "Pulse start datetime",
                    "format": "date-time",
                    "nullable": true
                  },
                  "ended_at": {
                    "type": "string",
                    "description": "Pulse end datetime",
                    "format": "date-time",
                    "nullable": true
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "Key of the tag"
                        },
                        "value": {
                          "type": "string",
                          "description": "Value of the tag"
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ],
                      "nullable": true
                    }
                  },
                  "data": {
                    "type": "object",
                    "description": "Additional data",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "summary"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_alert": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "alerts"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "string",
                    "description": "The source of the alert (eg: zendesk)",
                    "enum": [
                      "pagerduty",
                      "opsgenie",
                      "victorops",
                      "datadog",
                      "nobl9",
                      "zendesk",
                      "asana",
                      "jira"
                    ]
                  },
                  "summary": {
                    "type": "string",
                    "description": "The summary of the alert"
                  },
                  "service_ids": {
                    "type": "array",
                    "description": "The Service ID's to attach to the alert",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "environment_ids": {
                    "type": "array",
                    "description": "The Environment ID's to attach to the alert",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "started_at": {
                    "type": "string",
                    "description": "Pulse start datetime",
                    "format": "date-time",
                    "nullable": true
                  },
                  "ended_at": {
                    "type": "string",
                    "description": "Pulse end datetime",
                    "format": "date-time",
                    "nullable": true
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "Key of the tag"
                        },
                        "value": {
                          "type": "string",
                          "description": "Value of the tag"
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ],
                      "nullable": true
                    },
                    "data": {
                      "type": "object",
                      "description": "Additional data",
                      "nullable": true
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "source",
              "summary",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "alert": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "The source of the alert (eg: zendesk)",
            "enum": [
              "pagerduty",
              "opsgenie",
              "victorops",
              "datadog",
              "nobl9",
              "zendesk",
              "asana",
              "jira"
            ]
          },
          "summary": {
            "type": "string",
            "description": "The summary of the alert"
          },
          "services": {
            "type": "array",
            "description": "Services attached to the alert",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/service"
                }
              ]
            }
          },
          "environments": {
            "type": "array",
            "description": "Environments attached to the alert",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/environment"
                }
              ]
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Key of the tag"
                },
                "value": {
                  "type": "string",
                  "description": "Value of the tag"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "nullable": true
            }
          },
          "data": {
            "type": "object",
            "description": "Additional data",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "source",
          "summary",
          "created_at",
          "updated_at"
        ]
      },
      "alert_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the alert"
              },
              "source": {
                "type": "string",
                "description": "The source of the alert (eg: zendesk)",
                "enum": [
                  "pagerduty",
                  "opsgenie",
                  "victorops",
                  "datadog",
                  "nobl9",
                  "zendesk",
                  "asana",
                  "jira"
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "alerts"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/alert"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "alert_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the alert"
                },
                "source": {
                  "type": "string",
                  "description": "The source of the alert (eg: zendesk)",
                  "enum": [
                    "pagerduty",
                    "opsgenie",
                    "victorops",
                    "datadog",
                    "nobl9",
                    "zendesk",
                    "asana",
                    "jira"
                  ]
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "alerts"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/alert"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_pulse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "pulses"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "string",
                    "description": "The source of the pulse (eg: k8s)",
                    "nullable": true
                  },
                  "summary": {
                    "type": "string",
                    "description": "The summary of the pulse"
                  },
                  "service_ids": {
                    "type": "array",
                    "description": "The Service ID's to attach to the pulse",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "environment_ids": {
                    "type": "array",
                    "description": "The Environment ID's to attach to the pulse",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "started_at": {
                    "type": "string",
                    "description": "Pulse start datetime",
                    "format": "date-time",
                    "nullable": true
                  },
                  "ended_at": {
                    "type": "string",
                    "description": "Pulse end datetime",
                    "format": "date-time",
                    "nullable": true
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "Key of the tag"
                        },
                        "value": {
                          "type": "string",
                          "description": "Value of the tag"
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ],
                      "nullable": true
                    }
                  },
                  "refs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "Key of the ref"
                        },
                        "value": {
                          "type": "string",
                          "description": "Value of the ref"
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ],
                      "nullable": true
                    }
                  },
                  "data": {
                    "type": "object",
                    "description": "Additional data",
                    "nullable": true
                  }
                },
                "additionalProperties": false,
                "required": [
                  "summary"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_pulse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "pulses"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "source": {
                    "type": "string",
                    "description": "The source of the pulse (eg: k8s)",
                    "nullable": true
                  },
                  "summary": {
                    "type": "string",
                    "description": "The summary of the pulse"
                  },
                  "service_ids": {
                    "type": "array",
                    "description": "The Service ID's to attach to the pulse",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "environment_ids": {
                    "type": "array",
                    "description": "The Environment ID's to attach to the pulse",
                    "items": {
                      "type": "string"
                    },
                    "nullable": true
                  },
                  "started_at": {
                    "type": "string",
                    "description": "Pulse start datetime",
                    "format": "date-time",
                    "nullable": true
                  },
                  "ended_at": {
                    "type": "string",
                    "description": "Pulse end datetime",
                    "format": "date-time",
                    "nullable": true
                  },
                  "labels": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "Key of the tag"
                        },
                        "value": {
                          "type": "string",
                          "description": "Value of the tag"
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ],
                      "nullable": true
                    }
                  },
                  "refs": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "key": {
                          "type": "string",
                          "description": "Key of the ref"
                        },
                        "value": {
                          "type": "string",
                          "description": "Value of the ref"
                        }
                      },
                      "required": [
                        "key",
                        "value"
                      ],
                      "nullable": true
                    }
                  },
                  "data": {
                    "type": "object",
                    "description": "Additional data",
                    "nullable": true
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "summary",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "pulse": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "The source of the pulse (eg: k8s)",
            "nullable": true
          },
          "summary": {
            "type": "string",
            "description": "The summary of the pulse"
          },
          "services": {
            "type": "array",
            "description": "Services attached to the pulse",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/service"
                }
              ]
            }
          },
          "environments": {
            "type": "array",
            "description": "Environments attached to the pulse",
            "items": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/components/schemas/environment"
                }
              ]
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Key of the tag"
                },
                "value": {
                  "type": "string",
                  "description": "Value of the tag"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "nullable": true
            }
          },
          "refs": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string",
                  "description": "Key of the ref"
                },
                "value": {
                  "type": "string",
                  "description": "Value of the ref"
                }
              },
              "required": [
                "key",
                "value"
              ],
              "nullable": true
            }
          },
          "data": {
            "type": "object",
            "description": "Additional data",
            "nullable": true
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "summary",
          "created_at",
          "updated_at"
        ]
      },
      "pulse_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the pulse"
              },
              "type": {
                "type": "string",
                "enum": [
                  "pulses"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/pulse"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "pulse_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the pulse"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "pulses"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/pulse"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_custom_field": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "custom_fields"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "The name of the custom_field"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the custom_field",
                    "nullable": true
                  },
                  "shown": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Where the custom_field is shown",
                      "enum": [
                        "incident_form",
                        "incident_mitigation_form",
                        "incident_resolution_form",
                        "incident_post_mortem_form",
                        "incident_slack_form",
                        "incident_mitigation_slack_form",
                        "incident_resolution_slack_form",
                        "incident_post_mortem"
                      ]
                    }
                  },
                  "required": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Where the custom_field is required",
                      "enum": [
                        "incident_form",
                        "incident_mitigation_form",
                        "incident_resolution_form",
                        "incident_post_mortem_form",
                        "incident_slack_form",
                        "incident_mitigation_slack_form",
                        "incident_resolution_slack_form"
                      ]
                    },
                    "nullable": true
                  },
                  "position": {
                    "type": "number",
                    "description": "The position of the custom_field"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "label"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_custom_field": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "custom_fields"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "label": {
                    "type": "string",
                    "description": "The name of the custom_field"
                  },
                  "slug": {
                    "type": "string",
                    "description": "The slug of the custom_field"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the custom_field",
                    "nullable": true
                  },
                  "shown": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Where the custom_field is shown",
                      "enum": [
                        "incident_form",
                        "incident_mitigation_form",
                        "incident_resolution_form",
                        "incident_post_mortem_form",
                        "incident_slack_form",
                        "incident_mitigation_slack_form",
                        "incident_resolution_slack_form",
                        "incident_post_mortem"
                      ]
                    }
                  },
                  "required": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Where the custom_field is required",
                      "enum": [
                        "incident_form",
                        "incident_mitigation_form",
                        "incident_resolution_form",
                        "incident_post_mortem_form",
                        "incident_slack_form",
                        "incident_mitigation_slack_form",
                        "incident_resolution_slack_form"
                      ]
                    },
                    "nullable": true
                  },
                  "position": {
                    "type": "number",
                    "description": "The position of the custom_field"
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "custom_field": {
        "type": "object",
        "properties": {
          "label": {
            "type": "string",
            "description": "The name of the custom_field"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the custom_field"
          },
          "description": {
            "type": "string",
            "description": "The description of the custom_field",
            "nullable": true
          },
          "shown": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Where the custom_field is shown",
              "enum": [
                "incident_form",
                "incident_mitigation_form",
                "incident_resolution_form",
                "incident_post_mortem_form",
                "incident_slack_form",
                "incident_mitigation_slack_form",
                "incident_resolution_slack_form",
                "incident_post_mortem"
              ]
            }
          },
          "required": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Where the custom_field is required",
              "enum": [
                "incident_form",
                "incident_mitigation_form",
                "incident_resolution_form",
                "incident_post_mortem_form",
                "incident_slack_form",
                "incident_mitigation_slack_form",
                "incident_resolution_slack_form"
              ]
            },
            "nullable": true
          },
          "position": {
            "type": "number",
            "description": "The position of the custom_field"
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "label",
          "slug",
          "shown",
          "required",
          "position",
          "created_at",
          "updated_at"
        ]
      },
      "custom_field_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the custom_field"
              },
              "type": {
                "type": "string",
                "enum": [
                  "custom_fields"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/custom_field"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "custom_field_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the custom_field"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "custom_fields"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/custom_field"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_custom_field_option": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "custom_field_options"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "The value of the custom_field_option"
                  },
                  "color": {
                    "type": "string",
                    "description": "The hex color of the custom_field_option"
                  },
                  "position": {
                    "type": "number",
                    "description": "The position of the custom_field_option"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "value"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_custom_field_option": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "custom_field_options"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "The value of the custom_field_option"
                  },
                  "color": {
                    "type": "string",
                    "description": "The hex color of the custom_field_option"
                  },
                  "position": {
                    "type": "number",
                    "description": "The position of the custom_field_option"
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "custom_field_option": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The value of the custom_field_option"
          },
          "color": {
            "type": "string",
            "description": "The hex color of the custom_field_option"
          },
          "position": {
            "type": "number",
            "description": "The position of the custom_field_option"
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "value",
          "color",
          "position",
          "created_at",
          "updated_at"
        ]
      },
      "custom_field_option_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the custom_field_option"
              },
              "type": {
                "type": "string",
                "enum": [
                  "custom_field_options"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/custom_field_option"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "custom_field_option_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the custom_field_option"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "custom_field_options"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/custom_field_option"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_incident_custom_field_selection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_custom_field_selections"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "custom_field_id": {
                    "type": "number",
                    "description": "The custom field for this selection"
                  },
                  "value": {
                    "type": "string",
                    "description": "The selected value for text kind custom fields",
                    "nullable": true
                  },
                  "selected_option_ids": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "description": "The selected option id for select and multi_select kinds"
                    }
                  }
                },
                "additionalProperties": false,
                "required": [
                  "value",
                  "custom_field_id"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_incident_custom_field_selection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_custom_field_selections"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "string",
                    "description": "The selected value for text kind custom fields",
                    "nullable": true
                  },
                  "selected_option_ids": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "description": "The selected option id for select and multi_select kinds"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_custom_field_selection": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "The value of the incident_custom_field_selection",
            "nullable": true
          },
          "selected_option_ids": {
            "type": "array",
            "items": {
              "type": "number",
              "description": "The selected option id for select and multi_select kinds"
            }
          }
        },
        "required": [
          "value",
          "selected_option_ids"
        ]
      },
      "incident_custom_field_selection_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the incident_custom_field_selection"
              },
              "type": {
                "type": "string",
                "enum": [
                  "incident_custom_field_selections"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/incident_custom_field_selection"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_custom_field_selection_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the incident_custom_field_selection"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "incident_custom_field_selections"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/incident_custom_field_selection"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_workflow": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "workflows"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The title of the workflow"
                  },
                  "slug": {
                    "type": "string",
                    "description": "The slug of the workflow"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the workflow",
                    "nullable": true
                  },
                  "command": {
                    "type": "string",
                    "description": "Workflow command.",
                    "nullable": true
                  },
                  "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.",
                    "nullable": true
                  },
                  "repeat_every_duration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.",
                    "nullable": true
                  },
                  "repeat_on": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Repeat on weekdays.",
                      "enum": [
                        "S",
                        "M",
                        "T",
                        "W",
                        "R",
                        "F",
                        "U"
                      ]
                    }
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "position": {
                    "type": "number",
                    "description": "The order which the workflow should run with other workflows."
                  },
                  "trigger_params": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/incident_trigger_params"
                      },
                      {
                        "$ref": "#/components/schemas/action_item_trigger_params"
                      },
                      {
                        "$ref": "#/components/schemas/alert_trigger_params"
                      },
                      {
                        "$ref": "#/components/schemas/pulse_trigger_params"
                      },
                      {
                        "$ref": "#/components/schemas/standalone_trigger_params"
                      }
                    ]
                  },
                  "environment_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "severity_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "incident_type_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "service_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false,
                "required": [
                  "name"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_trigger_params": {
        "type": "object",
        "properties": {
          "trigger_type": {
            "type": "string",
            "enum": [
              "incident"
            ]
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Actions that trigger the workflow.",
              "enum": [
                "incident_created",
                "incident_updated",
                "title_updated",
                "summary_updated",
                "status_updated",
                "severity_updated",
                "environments_updated",
                "incident_types_updated",
                "services_updated",
                "functionalities_updated",
                "teams_updated",
                "timeline_updated",
                "slack_command",
                "role_assignments_updated"
              ]
            }
          },
          "incident_kinds": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "example",
                "test",
                "normal",
                "scheduled"
              ]
            }
          },
          "incident_statuses": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "started",
                "detected",
                "acknowledged",
                "mitigated",
                "resolved",
                "cancelled",
                "scheduled",
                "in_progress",
                "completed"
              ]
            }
          },
          "incident_visibilities": {
            "type": "array",
            "items": {
              "type": "boolean"
            }
          },
          "incident_condition": {
            "type": "string",
            "enum": [
              "ALL",
              "NONE"
            ]
          },
          "incident_condition_visibility": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_kind": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_status": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_environment": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_severity": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_incident_type": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_service": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_functionality": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_group": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          }
        },
        "required": [
          "trigger_type"
        ]
      },
      "action_item_trigger_params": {
        "type": "object",
        "properties": {
          "trigger_type": {
            "type": "string",
            "enum": [
              "action_item"
            ]
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Actions that trigger the workflow.",
              "enum": [
                "action_item_created",
                "action_item_updated",
                "assigned_user_updated",
                "summary_updated",
                "description_updated",
                "status_updated",
                "priority_updated",
                "teams_updated",
                "slack_command"
              ]
            }
          },
          "incident_kinds": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "example",
                "test",
                "normal",
                "scheduled"
              ]
            }
          },
          "incident_statuses": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "started",
                "detected",
                "acknowledged",
                "mitigated",
                "resolved",
                "cancelled",
                "scheduled",
                "in_progress",
                "completed"
              ]
            }
          },
          "incident_visibilities": {
            "type": "array",
            "items": {
              "type": "boolean"
            }
          },
          "incident_condition": {
            "type": "string",
            "enum": [
              "ALL",
              "NONE"
            ]
          },
          "incident_condition_visibility": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_kind": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_status": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_environment": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_severity": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_incident_type": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_service": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_functionality": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_condition_group": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_action_item_kinds": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "task",
                "follow_up"
              ]
            }
          },
          "incident_action_item_statuses": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "open",
                "in_progress",
                "cancelled",
                "done"
              ]
            }
          },
          "incident_action_item_priorities": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "high",
                "medium",
                "low"
              ]
            }
          },
          "incident_action_item_condition": {
            "type": "string",
            "enum": [
              "ALL",
              "NONE"
            ]
          },
          "incident_action_item_condition_kind": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_action_item_condition_status": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_action_item_condition_priority": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "incident_action_item_condition_group": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          }
        },
        "required": [
          "trigger_type"
        ]
      },
      "alert_trigger_params": {
        "type": "object",
        "properties": {
          "trigger_type": {
            "type": "string",
            "enum": [
              "alert"
            ]
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Actions that trigger the workflow.",
              "enum": [
                "alert_created"
              ]
            }
          },
          "alert_condition": {
            "type": "string",
            "enum": [
              "ALL",
              "NONE"
            ]
          },
          "alert_condition_source": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "alert_condition_label": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          }
        },
        "required": [
          "trigger_type"
        ]
      },
      "pulse_trigger_params": {
        "type": "object",
        "properties": {
          "trigger_type": {
            "type": "string",
            "enum": [
              "pulse"
            ]
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Actions that trigger the workflow.",
              "enum": [
                "pulse_created"
              ]
            }
          },
          "pulse_condition": {
            "type": "string",
            "enum": [
              "ALL",
              "NONE"
            ]
          },
          "pulse_condition_source": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "pulse_condition_label": {
            "type": "string",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          }
        },
        "required": [
          "trigger_type"
        ]
      },
      "standalone_trigger_params": {
        "type": "object",
        "properties": {
          "trigger_type": {
            "type": "string",
            "enum": [
              "simple"
            ]
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Actions that trigger the workflow.",
              "enum": [
                "slack_command"
              ]
            }
          }
        },
        "required": [
          "trigger_type"
        ]
      },
      "update_workflow": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "workflows"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The title of the workflow"
                  },
                  "slug": {
                    "type": "string",
                    "description": "The slug of the workflow"
                  },
                  "description": {
                    "type": "string",
                    "description": "The description of the workflow",
                    "nullable": true
                  },
                  "command": {
                    "type": "string",
                    "description": "Workflow command.",
                    "nullable": true
                  },
                  "triggers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "Actions that trigger the workflow.",
                      "enum": [
                        "incident_created",
                        "incident_updated",
                        "title_updated",
                        "summary_updated",
                        "status_updated",
                        "severity_updated",
                        "environments_updated",
                        "incident_types_updated",
                        "services_updated",
                        "functionalities_updated",
                        "teams_updated",
                        "timeline_updated",
                        "slack_command",
                        "role_assignments_updated"
                      ]
                    }
                  },
                  "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.",
                    "nullable": true
                  },
                  "repeat_every_duration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.",
                    "nullable": true
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "position": {
                    "type": "number",
                    "description": "The order which the workflow should run with other workflows."
                  },
                  "trigger_params": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/incident_trigger_params"
                      },
                      {
                        "$ref": "#/components/schemas/action_item_trigger_params"
                      },
                      {
                        "$ref": "#/components/schemas/alert_trigger_params"
                      },
                      {
                        "$ref": "#/components/schemas/pulse_trigger_params"
                      },
                      {
                        "$ref": "#/components/schemas/standalone_trigger_params"
                      }
                    ]
                  },
                  "environment_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "severity_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "incident_type_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "service_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "workflow": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The title of the workflow"
          },
          "slug": {
            "type": "string",
            "description": "The slug of the workflow"
          },
          "description": {
            "type": "string",
            "description": "The description of the workflow",
            "nullable": true
          },
          "command": {
            "type": "string",
            "description": "Workflow command.",
            "nullable": true
          },
          "triggers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Actions that trigger the workflow.",
              "enum": [
                "incident_created",
                "incident_updated",
                "title_updated",
                "summary_updated",
                "status_updated",
                "severity_updated",
                "environments_updated",
                "incident_types_updated",
                "services_updated",
                "functionalities_updated",
                "teams_updated",
                "timeline_updated",
                "slack_command",
                "role_assignments_updated"
              ]
            }
          },
          "wait": {
            "type": "string",
            "description": "Wait this duration before executing.",
            "nullable": true
          },
          "repeat_every_duration": {
            "type": "string",
            "description": "Repeat workflow every duration.",
            "nullable": true
          },
          "enabled": {
            "type": "boolean"
          },
          "position": {
            "type": "number",
            "description": "The order which the workflow should run with other workflows."
          },
          "trigger_params": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/incident_trigger_params"
              },
              {
                "$ref": "#/components/schemas/action_item_trigger_params"
              },
              {
                "$ref": "#/components/schemas/alert_trigger_params"
              },
              {
                "$ref": "#/components/schemas/pulse_trigger_params"
              },
              {
                "$ref": "#/components/schemas/standalone_trigger_params"
              }
            ]
          },
          "environment_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "severity_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "incident_type_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "service_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "group_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "name",
          "created_at",
          "updated_at"
        ]
      },
      "workflow_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the workflow"
              },
              "type": {
                "type": "string",
                "enum": [
                  "workflows"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/workflow"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "workflow_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the workflow"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "workflows"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/workflow"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_workflow_custom_field_selection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "workflow_custom_field_selections"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "custom_field_id": {
                    "type": "number",
                    "description": "The custom field for this selection"
                  },
                  "incident_condition": {
                    "type": "string",
                    "description": "The trigger condition",
                    "enum": [
                      "IS",
                      "ANY",
                      "NONE",
                      "SET",
                      "UNSET"
                    ]
                  },
                  "selected_option_ids": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "description": "The selected option id for select and multi_select kinds"
                    }
                  }
                },
                "additionalProperties": false,
                "required": [
                  "incident_condition",
                  "custom_field_id"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_workflow_custom_field_selection": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "workflow_custom_field_selections"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "incident_condition": {
                    "type": "string",
                    "description": "The trigger condition",
                    "enum": [
                      "IS",
                      "ANY",
                      "NONE",
                      "SET",
                      "UNSET"
                    ]
                  },
                  "selected_option_ids": {
                    "type": "array",
                    "items": {
                      "type": "number",
                      "description": "The selected option id for select and multi_select kinds"
                    }
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "workflow_custom_field_selection": {
        "type": "object",
        "properties": {
          "custom_field_id": {
            "type": "number",
            "description": "The custom field for this selection"
          },
          "incident_condition": {
            "type": "string",
            "description": "The trigger condition",
            "enum": [
              "IS",
              "ANY",
              "NONE",
              "SET",
              "UNSET"
            ]
          },
          "selected_option_ids": {
            "type": "array",
            "items": {
              "type": "number",
              "description": "The selected option id for select and multi_select kinds"
            }
          }
        },
        "required": [
          "custom_field_id",
          "incident_condition",
          "selected_option_ids"
        ]
      },
      "workflow_custom_field_selection_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the workflow_custom_field_selection"
              },
              "type": {
                "type": "string",
                "enum": [
                  "workflow_custom_field_selections"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/workflow_custom_field_selection"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "workflow_custom_field_selection_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the workflow_custom_field_selection"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "workflow_custom_field_selections"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/workflow_custom_field_selection"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "new_workflow_task": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "workflow_tasks"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "position": {
                    "type": "number",
                    "description": "The position of the workflow task"
                  },
                  "task_params": {
                    "oneOf": [
                      {
                        "$ref": "#/components/schemas/add_action_item_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/add_role_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/add_slack_bookmark_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/add_team_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/add_to_timeline_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/archive_slack_channels_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/attach_datadog_dashboards_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/auto_assign_role_opsgenie_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/auto_assign_role_pagerduty_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/auto_assign_role_victor_ops_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/call_people_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_airtable_table_record_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_asana_subtask_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_asana_task_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_confluence_page_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_datadog_notebook_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_dropbox_paper_page_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_github_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_google_calendar_event_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_google_docs_page_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_google_meeting_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_incident_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_jira_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_jira_issue_subtask_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_linear_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_linear_subtask_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_microsoft_teams_meeting_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_notion_page_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_service_now_incident_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_shortcut_story_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_shortcut_task_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_trello_card_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_webex_meeting_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_zendesk_ticket_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_zoom_meeting_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/get_github_commits_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/get_gitlab_commits_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/get_pulses_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/http_client_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/invite_to_slack_channel_opsgenie_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/invite_to_slack_channel_pagerduty_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/invite_to_slack_channel_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/invite_to_slack_channel_victor_ops_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/page_opsgenie_on_call_responders_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/page_pagerduty_on_call_responders_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/page_victor_ops_on_call_responders_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/print_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/publish_incident_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/redis_client_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/rename_slack_channel_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/run_command_heroku_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/send_email_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/send_slack_message_params"
                      },
                      {
                        "$ref": "#/components/schemas/send_sms_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/snapshot_datadog_graph_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/snapshot_grafana_graph_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/snapshot_looker_graph_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/snapshot_new_relic_graph_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/tweet_twitter_message_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_airtable_table_record_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_asana_task_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_github_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_incident_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_jira_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_linear_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_service_now_incident_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_shortcut_story_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_shortcut_task_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_slack_channel_topic_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_status_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_trello_card_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_zendesk_ticket_task_params"
                      }
                    ]
                  }
                },
                "required": [
                  "task_params"
                ],
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_workflow_task": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "workflow_tasks"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "position": {
                    "type": "number",
                    "description": "The position of the workflow task"
                  },
                  "task_params": {
                    "anyOf": [
                      {
                        "$ref": "#/components/schemas/add_action_item_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/add_role_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/add_slack_bookmark_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/add_team_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/add_to_timeline_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/archive_slack_channels_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/attach_datadog_dashboards_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/auto_assign_role_opsgenie_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/auto_assign_role_pagerduty_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/auto_assign_role_victor_ops_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/call_people_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_airtable_table_record_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_asana_subtask_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_asana_task_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_confluence_page_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_datadog_notebook_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_dropbox_paper_page_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_github_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_google_calendar_event_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_google_docs_page_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_google_meeting_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_incident_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_jira_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_jira_issue_subtask_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_linear_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_linear_subtask_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_microsoft_teams_meeting_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_notion_page_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_service_now_incident_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_shortcut_story_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_shortcut_task_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_trello_card_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_webex_meeting_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_zendesk_ticket_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/create_zoom_meeting_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/get_github_commits_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/get_gitlab_commits_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/get_pulses_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/http_client_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/invite_to_slack_channel_opsgenie_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/invite_to_slack_channel_pagerduty_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/invite_to_slack_channel_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/invite_to_slack_channel_victor_ops_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/page_opsgenie_on_call_responders_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/page_pagerduty_on_call_responders_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/page_victor_ops_on_call_responders_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/print_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/publish_incident_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/redis_client_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/rename_slack_channel_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/run_command_heroku_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/send_email_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/send_slack_message_params"
                      },
                      {
                        "$ref": "#/components/schemas/send_sms_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/snapshot_datadog_graph_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/snapshot_grafana_graph_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/snapshot_looker_graph_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/snapshot_new_relic_graph_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/tweet_twitter_message_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_airtable_table_record_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_asana_task_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_github_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_incident_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_jira_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_linear_issue_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_service_now_incident_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_shortcut_story_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_shortcut_task_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_slack_channel_topic_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_status_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_trello_card_task_params"
                      },
                      {
                        "$ref": "#/components/schemas/update_zendesk_ticket_task_params"
                      }
                    ]
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "workflow_task": {
        "type": "object",
        "properties": {
          "workflow_id": {
            "type": "string",
            "description": "The id of the workflow"
          },
          "task_params": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/add_action_item_task_params"
              },
              {
                "$ref": "#/components/schemas/add_role_task_params"
              },
              {
                "$ref": "#/components/schemas/add_slack_bookmark_task_params"
              },
              {
                "$ref": "#/components/schemas/add_team_task_params"
              },
              {
                "$ref": "#/components/schemas/add_to_timeline_task_params"
              },
              {
                "$ref": "#/components/schemas/archive_slack_channels_task_params"
              },
              {
                "$ref": "#/components/schemas/attach_datadog_dashboards_task_params"
              },
              {
                "$ref": "#/components/schemas/auto_assign_role_opsgenie_task_params"
              },
              {
                "$ref": "#/components/schemas/auto_assign_role_pagerduty_task_params"
              },
              {
                "$ref": "#/components/schemas/auto_assign_role_victor_ops_task_params"
              },
              {
                "$ref": "#/components/schemas/call_people_task_params"
              },
              {
                "$ref": "#/components/schemas/create_airtable_table_record_task_params"
              },
              {
                "$ref": "#/components/schemas/create_asana_subtask_task_params"
              },
              {
                "$ref": "#/components/schemas/create_asana_task_task_params"
              },
              {
                "$ref": "#/components/schemas/create_confluence_page_task_params"
              },
              {
                "$ref": "#/components/schemas/create_datadog_notebook_task_params"
              },
              {
                "$ref": "#/components/schemas/create_dropbox_paper_page_task_params"
              },
              {
                "$ref": "#/components/schemas/create_github_issue_task_params"
              },
              {
                "$ref": "#/components/schemas/create_google_calendar_event_task_params"
              },
              {
                "$ref": "#/components/schemas/create_google_docs_page_task_params"
              },
              {
                "$ref": "#/components/schemas/create_google_meeting_task_params"
              },
              {
                "$ref": "#/components/schemas/create_incident_task_params"
              },
              {
                "$ref": "#/components/schemas/create_jira_issue_task_params"
              },
              {
                "$ref": "#/components/schemas/create_jira_issue_subtask_task_params"
              },
              {
                "$ref": "#/components/schemas/create_linear_issue_task_params"
              },
              {
                "$ref": "#/components/schemas/create_linear_subtask_issue_task_params"
              },
              {
                "$ref": "#/components/schemas/create_microsoft_teams_meeting_task_params"
              },
              {
                "$ref": "#/components/schemas/create_notion_page_task_params"
              },
              {
                "$ref": "#/components/schemas/create_service_now_incident_task_params"
              },
              {
                "$ref": "#/components/schemas/create_shortcut_story_task_params"
              },
              {
                "$ref": "#/components/schemas/create_shortcut_task_task_params"
              },
              {
                "$ref": "#/components/schemas/create_trello_card_task_params"
              },
              {
                "$ref": "#/components/schemas/create_webex_meeting_task_params"
              },
              {
                "$ref": "#/components/schemas/create_zendesk_ticket_task_params"
              },
              {
                "$ref": "#/components/schemas/create_zoom_meeting_task_params"
              },
              {
                "$ref": "#/components/schemas/get_github_commits_task_params"
              },
              {
                "$ref": "#/components/schemas/get_gitlab_commits_task_params"
              },
              {
                "$ref": "#/components/schemas/get_pulses_task_params"
              },
              {
                "$ref": "#/components/schemas/http_client_task_params"
              },
              {
                "$ref": "#/components/schemas/invite_to_slack_channel_opsgenie_task_params"
              },
              {
                "$ref": "#/components/schemas/invite_to_slack_channel_pagerduty_task_params"
              },
              {
                "$ref": "#/components/schemas/invite_to_slack_channel_task_params"
              },
              {
                "$ref": "#/components/schemas/invite_to_slack_channel_victor_ops_task_params"
              },
              {
                "$ref": "#/components/schemas/page_opsgenie_on_call_responders_task_params"
              },
              {
                "$ref": "#/components/schemas/page_pagerduty_on_call_responders_task_params"
              },
              {
                "$ref": "#/components/schemas/page_victor_ops_on_call_responders_task_params"
              },
              {
                "$ref": "#/components/schemas/print_task_params"
              },
              {
                "$ref": "#/components/schemas/publish_incident_task_params"
              },
              {
                "$ref": "#/components/schemas/redis_client_task_params"
              },
              {
                "$ref": "#/components/schemas/rename_slack_channel_task_params"
              },
              {
                "$ref": "#/components/schemas/run_command_heroku_task_params"
              },
              {
                "$ref": "#/components/schemas/send_email_task_params"
              },
              {
                "$ref": "#/components/schemas/send_slack_message_params"
              },
              {
                "$ref": "#/components/schemas/send_sms_task_params"
              },
              {
                "$ref": "#/components/schemas/snapshot_datadog_graph_task_params"
              },
              {
                "$ref": "#/components/schemas/snapshot_grafana_graph_task_params"
              },
              {
                "$ref": "#/components/schemas/snapshot_looker_graph_task_params"
              },
              {
                "$ref": "#/components/schemas/snapshot_new_relic_graph_task_params"
              },
              {
                "$ref": "#/components/schemas/tweet_twitter_message_task_params"
              },
              {
                "$ref": "#/components/schemas/update_airtable_table_record_task_params"
              },
              {
                "$ref": "#/components/schemas/update_asana_task_task_params"
              },
              {
                "$ref": "#/components/schemas/update_github_issue_task_params"
              },
              {
                "$ref": "#/components/schemas/update_incident_task_params"
              },
              {
                "$ref": "#/components/schemas/update_jira_issue_task_params"
              },
              {
                "$ref": "#/components/schemas/update_linear_issue_task_params"
              },
              {
                "$ref": "#/components/schemas/update_service_now_incident_task_params"
              },
              {
                "$ref": "#/components/schemas/update_shortcut_story_task_params"
              },
              {
                "$ref": "#/components/schemas/update_shortcut_task_task_params"
              },
              {
                "$ref": "#/components/schemas/update_slack_channel_topic_task_params"
              },
              {
                "$ref": "#/components/schemas/update_status_task_params"
              },
              {
                "$ref": "#/components/schemas/update_trello_card_task_params"
              },
              {
                "$ref": "#/components/schemas/update_zendesk_ticket_task_params"
              }
            ]
          },
          "position": {
            "type": "number",
            "description": "The position of the workflow task"
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "workflow_id",
          "task_params",
          "position",
          "created_at",
          "updated_at"
        ]
      },
      "workflow_task_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the workflow task"
              },
              "type": {
                "type": "string",
                "enum": [
                  "workflow_tasks"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/workflow_task"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "workflow_task_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the workflow task"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "workflow_tasks"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/workflow_task"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      },
      "add_action_item_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "add_action_item"
            ]
          },
          "assigned_to_user_id": {
            "type": "string",
            "description": "The user id this action item is assigned to"
          },
          "priority": {
            "type": "string",
            "description": "The action item priority.",
            "enum": [
              "low",
              "medium",
              "high"
            ]
          },
          "summary": {
            "type": "string",
            "description": "The action item summary."
          },
          "description": {
            "type": "string",
            "description": "The action item description."
          },
          "status": {
            "type": "string",
            "description": "The action item status.",
            "enum": [
              "open",
              "in_progress",
              "cancelled",
              "done"
            ]
          },
          "post_to_incident_timeline": {
            "type": "boolean"
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "summary",
          "status",
          "priority"
        ]
      },
      "add_role_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "add_role"
            ]
          },
          "incident_role_id": {
            "type": "string",
            "description": "The role id to add to the incident"
          },
          "assigned_to_user_id": {
            "type": "string",
            "description": "The user id this role is assigned to"
          }
        },
        "required": [
          "incident_role_id"
        ]
      },
      "add_slack_bookmark_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "add_slack_bookmark"
            ]
          },
          "playbook_id": {
            "type": "string",
            "description": "The playbook id if bookmark is of an incident playbook."
          },
          "channel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "title": {
            "type": "string",
            "description": "The bookmark title. Required if not a playbook bookmark."
          },
          "link": {
            "type": "string",
            "description": "The bookmark link. Required if not a playbook bookmark."
          },
          "emoji": {
            "type": "string",
            "description": "The bookmark emoji."
          }
        },
        "required": [
          "channel"
        ],
        "anyOf": [
          {
            "required": [
              "title",
              "link"
            ]
          },
          {
            "required": [
              "playbook_id"
            ]
          }
        ]
      },
      "add_team_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "add_team"
            ]
          },
          "group_id": {
            "type": "string",
            "description": "The team id."
          }
        },
        "required": [
          "group_id"
        ]
      },
      "add_to_timeline_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "add_to_timeline"
            ]
          },
          "event": {
            "type": "string",
            "description": "The timeline event description."
          },
          "url": {
            "type": "string",
            "description": "A URL for the timeline event."
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "event"
        ]
      },
      "archive_slack_channels_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "archive_slack_channels"
            ]
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "channels"
        ]
      },
      "attach_datadog_dashboards_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "attach_datadog_dashboards"
            ]
          },
          "dashboards": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "dashboards"
        ]
      },
      "auto_assign_role_opsgenie_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "auto_assign_role_opsgenie"
            ]
          },
          "incident_role_id": {
            "type": "string",
            "description": "The role id."
          },
          "schedule": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "incident_role_id",
          "schedule"
        ]
      },
      "auto_assign_role_pagerduty_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "auto_assign_role_pagerduty"
            ]
          },
          "incident_role_id": {
            "type": "string",
            "description": "The role id."
          },
          "schedule": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "escalation_policy": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "incident_role_id"
        ],
        "anyOf": [
          {
            "required": [
              "schedule"
            ]
          },
          {
            "required": [
              "escalation_policy"
            ]
          }
        ]
      },
      "auto_assign_role_victor_ops_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "auto_assign_role_victor_ops"
            ]
          },
          "incident_role_id": {
            "type": "string",
            "description": "The role id."
          },
          "schedule": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "incident_role_id",
          "schedule"
        ]
      },
      "call_people_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "call_people"
            ]
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "A recipient phone number"
            }
          },
          "name": {
            "type": "string",
            "description": "The name"
          },
          "content": {
            "type": "string",
            "description": "The message to be read by text-to-voice"
          }
        },
        "required": [
          "phone_numbers",
          "name",
          "content"
        ]
      },
      "create_airtable_table_record_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_airtable_table_record"
            ]
          },
          "base_key": {
            "type": "string",
            "description": "The base key"
          },
          "table_name": {
            "type": "string",
            "description": "The table name"
          },
          "custom_fields_mapping": {
            "type": "object",
            "description": "Custom field mappings JSON."
          }
        },
        "required": [
          "base_key",
          "table_name"
        ]
      },
      "create_asana_subtask_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_asana_subtask"
            ]
          },
          "parent_task_id": {
            "type": "string",
            "description": "The parent task id"
          },
          "title": {
            "type": "string",
            "description": "The subtask title"
          },
          "completion": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "parent_task_id",
          "title",
          "completion"
        ]
      },
      "create_asana_task_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_asana_task"
            ]
          },
          "workspace": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "projects": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "title": {
            "type": "string",
            "description": "The task title"
          },
          "completion": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "workspace",
          "projects",
          "title",
          "completion"
        ]
      },
      "create_confluence_page_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_confluence_page"
            ]
          },
          "space": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "ancestor": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "title": {
            "type": "string",
            "description": "The task title"
          }
        },
        "required": [
          "space",
          "title"
        ]
      },
      "create_datadog_notebook_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_datadog_notebook"
            ]
          },
          "post_mortem_template_id": {
            "type": "string",
            "description": "Post mortem template to use when creating notebook, if desired."
          },
          "title": {
            "type": "string",
            "description": "The notebook title"
          },
          "kind": {
            "type": "string",
            "description": "The notebook kind",
            "enum": [
              "postmortem",
              "runbook",
              "investigation",
              "documentation",
              "report"
            ]
          }
        },
        "required": [
          "title",
          "kind"
        ]
      },
      "create_dropbox_paper_page_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_dropbox_paper_page"
            ]
          },
          "post_mortem_template_id": {
            "type": "string",
            "description": "Post mortem template to use when creating page task, if desired."
          },
          "title": {
            "type": "string",
            "description": "The page task title"
          },
          "namespace": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "parent_folder": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "title"
        ]
      },
      "create_github_issue_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_github_issue"
            ]
          },
          "title": {
            "type": "string",
            "description": "The issue title"
          },
          "body": {
            "type": "string",
            "description": "The issue body"
          },
          "repository": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "repository",
          "title"
        ]
      },
      "create_google_calendar_event_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_google_calendar_event"
            ]
          },
          "attendees": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "days_until_meeting": {
            "type": "number",
            "description": "The days until meeting",
            "minimum": 0,
            "maximum": 31
          },
          "time_of_meeting": {
            "type": "string",
            "description": "Time of meeting in format HH:MM"
          },
          "meeting_duration": {
            "type": "string",
            "description": "Meeting duration in format like '1 hour', '30 minutes'"
          },
          "summary": {
            "type": "string",
            "description": "The event summary"
          },
          "desription": {
            "type": "string",
            "description": "The event description"
          }
        },
        "required": [
          "attendees",
          "days_until_meeting",
          "time_of_meeting",
          "meeting_duration",
          "summary",
          "description"
        ]
      },
      "create_google_docs_page_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_google_docs_page"
            ]
          },
          "post_mortem_template_id": {
            "type": "string",
            "description": "Post mortem template to use when creating page, if desired."
          },
          "title": {
            "type": "string",
            "description": "The page title"
          },
          "drive": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "parent_folder": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "content": {
            "type": "string",
            "description": "The page content"
          },
          "permissions": {
            "type": "string",
            "description": "Page permissions JSON."
          }
        },
        "required": [
          "title"
        ]
      },
      "create_google_meeting_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_google_meeting"
            ]
          },
          "summary": {
            "type": "string",
            "description": "The meeting summary"
          },
          "description": {
            "type": "string",
            "description": "The meeting description"
          },
          "post_to_incident_timeline": {
            "type": "boolean"
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "summary",
          "description"
        ]
      },
      "create_incident_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_incident"
            ]
          },
          "title": {
            "type": "string",
            "description": "The incident title"
          },
          "summary": {
            "type": "string",
            "description": "The incident summary"
          },
          "severity_id": {
            "type": "string"
          },
          "incident_type_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "service_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "functionality_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "environment_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "group_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "private": {
            "type": "boolean"
          }
        },
        "required": [
          "title"
        ]
      },
      "create_jira_issue_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_jira_issue"
            ]
          },
          "title": {
            "type": "string",
            "description": "The issue title."
          },
          "description": {
            "type": "string",
            "description": "The issue description."
          },
          "labels": {
            "type": "string",
            "description": "The issue labels."
          },
          "assign_user_email": {
            "type": "string",
            "description": "The assigned user's email."
          },
          "reporter_user_email": {
            "type": "string",
            "description": "The reporter user's email."
          },
          "project_key": {
            "type": "string",
            "description": "The project key."
          },
          "issue_type": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The issue type id and display name."
          },
          "priority": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The priority id and display name."
          },
          "status": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The status id and display name."
          },
          "custom_fields_mapping": {
            "type": "object"
          }
        },
        "required": [
          "project_key",
          "title",
          "issue_type"
        ]
      },
      "create_jira_issue_subtask_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_jira_issue_subtask"
            ]
          },
          "project_key": {
            "type": "string",
            "description": "The project key."
          },
          "parent_issue_id": {
            "type": "string",
            "description": "The parent issue."
          },
          "title": {
            "type": "string",
            "description": "The issue title."
          },
          "description": {
            "type": "string",
            "description": "The issue description."
          },
          "subtask_issue_type": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The issue type id and display name."
          },
          "labels": {
            "type": "string",
            "description": "The issue labels."
          },
          "assign_user_email": {
            "type": "string",
            "description": "The assigned user's email."
          },
          "reporter_user_email": {
            "type": "string",
            "description": "The reporter user's email."
          },
          "priority": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The priority id and display name."
          },
          "status": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The status id and display name."
          },
          "custom_fields_mapping": {
            "type": "object"
          }
        },
        "required": [
          "project_key",
          "parent_issue_id",
          "title",
          "subtask_issue_type"
        ]
      },
      "create_linear_issue_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_linear_issue"
            ]
          },
          "title": {
            "type": "string",
            "description": "The issue title."
          },
          "description": {
            "type": "string",
            "description": "The issue description."
          },
          "team": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The team id and display name."
          },
          "state": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The state id and display name."
          },
          "priority": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The priority id and display name."
          }
        },
        "required": [
          "title",
          "team",
          "state"
        ]
      },
      "create_linear_subtask_issue_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_linear_subtask_issue"
            ]
          },
          "parent_issue_id": {
            "type": "string",
            "description": "The parent issue."
          },
          "title": {
            "type": "string",
            "description": "The issue title."
          },
          "description": {
            "type": "string",
            "description": "The issue description."
          },
          "team": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The team id and display name."
          },
          "state": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The state id and display name."
          },
          "priority": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The priority id and display name."
          }
        },
        "required": [
          "parent_issue_id",
          "title",
          "team",
          "state"
        ]
      },
      "create_microsoft_teams_meeting_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_microsoft_teams_meeting"
            ]
          },
          "name": {
            "type": "string",
            "description": "The meeting name"
          },
          "subject": {
            "type": "string",
            "description": "The meeting subject"
          },
          "post_to_incident_timeline": {
            "type": "boolean"
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "name",
          "subject"
        ]
      },
      "create_notion_page_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_notion_page"
            ]
          },
          "parent_page": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The parent page id and display name."
          },
          "post_mortem_template_id": {
            "type": "string",
            "description": "Post mortem template to use when creating page task, if desired."
          }
        },
        "required": [
          "parent_page"
        ]
      },
      "create_service_now_incident_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_service_now_incident"
            ]
          },
          "title": {
            "type": "string",
            "description": "The incident title"
          },
          "description": {
            "type": "string",
            "description": "The incident description"
          },
          "priority": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The priority id and display name."
          },
          "completion": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The completion id and display name."
          }
        },
        "required": [
          "title"
        ]
      },
      "create_shortcut_story_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_shortcut_story"
            ]
          },
          "title": {
            "type": "string",
            "description": "The incident title"
          },
          "kind": {
            "type": "string",
            "enum": [
              "bug",
              "chore",
              "feature"
            ]
          },
          "description": {
            "type": "string",
            "description": "The incident description"
          },
          "labels": {
            "type": "string",
            "description": "The story labels."
          },
          "due_date": {
            "type": "string",
            "description": "The story due date (ISO8601 format)."
          },
          "archivation": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The archivation id and display name."
          },
          "project": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The project id and display name."
          }
        },
        "required": [
          "title",
          "project",
          "archivation",
          "kind"
        ]
      },
      "create_shortcut_task_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_shortcut_task"
            ]
          },
          "parent_story_id": {
            "type": "string",
            "description": "The parent story"
          },
          "description": {
            "type": "string",
            "description": "The task description"
          },
          "completion": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The completion id and display name."
          }
        },
        "required": [
          "parent_story_id",
          "description",
          "completion"
        ]
      },
      "create_trello_card_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_trello_card"
            ]
          },
          "title": {
            "type": "string",
            "description": "The card title"
          },
          "description": {
            "type": "string",
            "description": "The card description"
          },
          "due_date": {
            "type": "string",
            "description": "The due date (ISO8601 format)"
          },
          "board": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The board id and display name."
          },
          "list": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The list id and display name."
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "archivation": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The archivation id and display name."
          }
        },
        "required": [
          "title",
          "board",
          "list"
        ]
      },
      "create_webex_meeting_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_webex_meeting"
            ]
          },
          "topic": {
            "type": "string",
            "description": "The meeting topic"
          },
          "password": {
            "type": "string",
            "description": "The meeting password"
          },
          "post_to_incident_timeline": {
            "type": "boolean"
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "topic"
        ]
      },
      "create_zendesk_ticket_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_zendesk_ticket"
            ]
          },
          "kind": {
            "type": "string",
            "enum": [
              "problem",
              "incident",
              "question",
              "task"
            ]
          },
          "subject": {
            "type": "string",
            "description": "The ticket subject."
          },
          "comment": {
            "type": "string",
            "description": "The ticket comment."
          },
          "tags": {
            "type": "string",
            "description": "The ticket tags."
          },
          "priority": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The priority id and display name."
          },
          "completion": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The completion id and display name."
          }
        },
        "required": [
          "kind",
          "subject"
        ]
      },
      "create_zoom_meeting_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "create_zoom_meeting"
            ]
          },
          "topic": {
            "type": "string",
            "description": "The meeting topic"
          },
          "password": {
            "type": "string",
            "description": "The meeting password"
          },
          "create_as_email": {
            "type": "string",
            "description": "The email to use if creating as email."
          },
          "auto_recording": {
            "type": "string",
            "enum": [
              "none",
              "local",
              "cloud"
            ]
          },
          "post_to_incident_timeline": {
            "type": "boolean"
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "topic"
        ]
      },
      "get_github_commits_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "get_github_commits"
            ]
          },
          "service_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of service impacted by incident"
            }
          },
          "github_repository_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "branch": {
            "type": "string",
            "description": "The branch"
          },
          "past_duration": {
            "type": "string",
            "description": "How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)"
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "branch",
          "past_duration"
        ],
        "anyOf": [
          {
            "required": [
              "service_ids"
            ]
          },
          {
            "required": [
              "github_repository_names"
            ]
          }
        ]
      },
      "get_gitlab_commits_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "get_gitlab_commits"
            ]
          },
          "service_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of service impacted by incident"
            }
          },
          "gitlab_repository_names": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "branch": {
            "type": "string",
            "description": "The branch"
          },
          "past_duration": {
            "type": "string",
            "description": "How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)"
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "branch",
          "past_duration"
        ],
        "anyOf": [
          {
            "required": [
              "service_ids"
            ]
          },
          {
            "required": [
              "gitlab_repository_names"
            ]
          }
        ]
      },
      "get_pulses_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "get_pulses"
            ]
          },
          "service_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of service impacted by incident"
            }
          },
          "environment_ids": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "ID of environment impacted by incident"
            }
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "refs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sources": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "past_duration": {
            "type": "string",
            "description": "How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)"
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "past_duration"
        ]
      },
      "http_client_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "http_client"
            ]
          },
          "headers": {
            "type": "string",
            "description": "JSON map of HTTP headers."
          },
          "params": {
            "type": "string",
            "description": "JSON map of HTTP query parameters."
          },
          "body": {
            "type": "string",
            "description": "HTTP body."
          },
          "url": {
            "type": "string"
          },
          "event_url": {
            "type": "string"
          },
          "method": {
            "type": "string",
            "description": "HTTP method.",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "OPTIONS"
            ]
          },
          "succeed_on_status": {
            "type": "string",
            "description": "HTTP status code."
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "succeed_on_status"
        ]
      },
      "invite_to_slack_channel_opsgenie_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "invite_to_slack_channel_opsgenie"
            ]
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Slack channel ID"
            }
          },
          "schedule": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "schedule"
        ]
      },
      "invite_to_slack_channel_pagerduty_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "invite_to_slack_channel_pagerduty"
            ]
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Slack channel ID"
            }
          },
          "escalation_policy": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "schedule": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "anyOf": [
          {
            "required": [
              "escalation_policy"
            ]
          },
          {
            "required": [
              "schedule"
            ]
          }
        ]
      },
      "invite_to_slack_channel_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "invite_to_slack_channel"
            ]
          },
          "channel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "slack_users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "slack_user_groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "channel"
        ],
        "anyOf": [
          {
            "required": [
              "slack_users"
            ]
          },
          {
            "required": [
              "slack_user_groups"
            ]
          }
        ]
      },
      "invite_to_slack_channel_victor_ops_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "invite_to_slack_channel_victor_ops"
            ]
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Slack channel ID"
            }
          },
          "schedule": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "schedule"
        ]
      },
      "page_opsgenie_on_call_responders_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "page_opsgenie_on_call_responders"
            ]
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "page_pagerduty_on_call_responders_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "page_pagerduty_on_call_responders"
            ]
          },
          "schedule": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "escalation_policies": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "schedule"
        ]
      },
      "page_victor_ops_on_call_responders_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "page_victor_ops_on_call_responders"
            ]
          },
          "escalation_policies": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "anyOf": [
          {
            "required": [
              "users"
            ]
          },
          {
            "required": [
              "escalation_policies"
            ]
          }
        ]
      },
      "print_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "print"
            ]
          },
          "message": {
            "type": "string",
            "description": "The message to print"
          }
        },
        "required": [
          "message"
        ]
      },
      "publish_incident_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "publish_incident"
            ]
          },
          "incident": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "public_title": {
            "type": "string"
          },
          "event": {
            "type": "string",
            "description": "Incident event description"
          },
          "status": {
            "type": "string",
            "enum": [
              "investigating",
              "identified",
              "monitoring",
              "resolved",
              "scheduled",
              "in_progress",
              "verifying",
              "completed"
            ]
          },
          "status_page_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "incident",
          "public_title",
          "event",
          "status",
          "status_page_ids"
        ]
      },
      "redis_client_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "redis_client"
            ]
          },
          "url": {
            "type": "string"
          },
          "commands": {
            "type": "string"
          },
          "event_url": {
            "type": "string"
          },
          "event_message": {
            "type": "string"
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "url",
          "commands"
        ]
      },
      "rename_slack_channel_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "rename_slack_channel"
            ]
          },
          "channel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "title": {
            "type": "string"
          }
        },
        "required": [
          "title"
        ]
      },
      "run_command_heroku_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "run_command_heroku"
            ]
          },
          "channel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "command": {
            "type": "string"
          },
          "app_name": {
            "type": "string"
          },
          "size": {
            "type": "string",
            "enum": [
              "standard-1X",
              "standard-2X"
            ]
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "command",
          "app_name",
          "size"
        ]
      },
      "send_email_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "send_email"
            ]
          },
          "to": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The recipient"
            }
          },
          "subject": {
            "type": "string",
            "description": "The subject"
          },
          "preheader": {
            "type": "string",
            "description": "The preheader",
            "nullable": true
          },
          "body": {
            "type": "string",
            "description": "The email body",
            "nullable": true
          }
        },
        "required": [
          "to",
          "subject",
          "body"
        ]
      },
      "send_slack_message_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "send_slack_message"
            ]
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "slack_users": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "slack_user_groups": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "text": {
            "type": "string",
            "description": "The message text."
          }
        },
        "required": [
          "text"
        ],
        "anyOf": [
          {
            "required": [
              "channels"
            ]
          },
          {
            "required": [
              "slack_users"
            ]
          },
          {
            "required": [
              "slack_user_groups"
            ]
          }
        ]
      },
      "send_sms_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "send_sms"
            ]
          },
          "phone_numbers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "A recipient phone number"
            }
          },
          "name": {
            "type": "string",
            "description": "The name"
          },
          "content": {
            "type": "string",
            "description": "The SMS message"
          }
        },
        "required": [
          "phone_numbers",
          "name",
          "content"
        ]
      },
      "snapshot_datadog_graph_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "snapshot_datadog_graph"
            ]
          },
          "dashboards": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "past_duration": {
            "type": "string",
            "description": "in format '1 minute', '30 days', '3 months', etc."
          },
          "metric_queries": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "dashboards",
          "past_duration"
        ]
      },
      "snapshot_grafana_graph_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "snapshot_grafana_graph"
            ]
          },
          "dashboards": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "dashboards"
        ]
      },
      "snapshot_looker_graph_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "snapshot_looker_graph"
            ]
          },
          "dashboards": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "dashboards"
        ]
      },
      "snapshot_new_relic_graph_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "snapshot_looker_graph"
            ]
          },
          "metric_query": {
            "type": "string"
          },
          "metric_type": {
            "type": "string",
            "enum": [
              "APDEX",
              "AREA",
              "BAR",
              "BASELINE",
              "BILLBOARD",
              "BULLET",
              "EVENT_FEED",
              "FUNNEL",
              "HEATMAP",
              "HISTOGRAM",
              "LINE",
              "PIE",
              "SCATTER",
              "STACKED_HORIZONTAL_BAR",
              "TABLE",
              "VERTICAL_BAR"
            ]
          },
          "post_to_slack_channels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          }
        },
        "required": [
          "metric_query",
          "metric_types"
        ]
      },
      "tweet_twitter_message_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "tweet_twitter_message"
            ]
          },
          "message": {
            "type": "string"
          }
        },
        "required": [
          "message"
        ]
      },
      "update_airtable_table_record_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "update_airtable_table_record"
            ]
          },
          "base_key": {
            "type": "string",
            "description": "The base key"
          },
          "table_name": {
            "type": "string",
            "description": "The table name"
          },
          "record_id": {
            "type": "string",
            "description": "The record id"
          },
          "custom_fields_mapping": {
            "type": "object",
            "description": "Custom field mappings JSON."
          }
        },
        "required": [
          "base_key",
          "table_name",
          "record_id"
        ]
      },
      "update_asana_task_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "update_asana_task"
            ]
          },
          "task_id": {
            "type": "string",
            "description": "The task id"
          },
          "title": {
            "type": "string",
            "description": "The task title"
          },
          "completion": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "task_id",
          "completion"
        ]
      },
      "update_github_issue_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "update_github_issue"
            ]
          },
          "issue_id": {
            "type": "string",
            "description": "The issue id"
          },
          "title": {
            "type": "string",
            "description": "The issue title"
          },
          "body": {
            "type": "string",
            "description": "The issue body"
          },
          "completion": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "issue_id",
          "completion"
        ]
      },
      "update_incident_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "update_incident"
            ]
          },
          "title": {
            "type": "string",
            "description": "The incident title"
          },
          "summary": {
            "type": "string",
            "description": "The incident summary"
          },
          "severity_id": {
            "type": "string"
          },
          "incident_type_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "service_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "functionality_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "environment_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "group_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "private": {
            "type": "boolean"
          }
        }
      },
      "update_jira_issue_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "update_jira_issue"
            ]
          },
          "issue_id": {
            "type": "string",
            "description": "The issue id."
          },
          "title": {
            "type": "string",
            "description": "The issue title."
          },
          "description": {
            "type": "string",
            "description": "The issue description."
          },
          "labels": {
            "type": "string",
            "description": "The issue labels."
          },
          "assign_user_email": {
            "type": "string",
            "description": "The assigned user's email."
          },
          "reporter_user_email": {
            "type": "string",
            "description": "The reporter user's email."
          },
          "project_key": {
            "type": "string",
            "description": "The project key."
          },
          "priority": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The priority id and display name."
          },
          "status": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The status id and display name."
          },
          "custom_fields_mapping": {
            "type": "object"
          }
        },
        "required": [
          "issue_id",
          "project_key"
        ]
      },
      "update_linear_issue_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "update_linear_issue"
            ]
          },
          "issue_id": {
            "type": "string",
            "description": "The issue id."
          },
          "title": {
            "type": "string",
            "description": "The issue title."
          },
          "description": {
            "type": "string",
            "description": "The issue description."
          },
          "state": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The state id and display name."
          },
          "priority": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The priority id and display name."
          }
        },
        "required": [
          "issue_id"
        ]
      },
      "update_service_now_incident_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "update_service_now_incident"
            ]
          },
          "incident_id": {
            "type": "string",
            "description": "The incident id"
          },
          "title": {
            "type": "string",
            "description": "The incident title"
          },
          "description": {
            "type": "string",
            "description": "The incident description"
          },
          "priority": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The priority id and display name."
          },
          "completion": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The completion id and display name."
          }
        },
        "required": [
          "incident_id"
        ]
      },
      "update_shortcut_story_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "update_shortcut_story"
            ]
          },
          "story_id": {
            "type": "string",
            "description": "The story id"
          },
          "title": {
            "type": "string",
            "description": "The incident title"
          },
          "description": {
            "type": "string",
            "description": "The incident description"
          },
          "labels": {
            "type": "string",
            "description": "The story labels."
          },
          "due_date": {
            "type": "string",
            "description": "The story due date (ISO8601 format)."
          },
          "archivation": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The archivation id and display name."
          }
        },
        "required": [
          "story_id",
          "archivation"
        ]
      },
      "update_shortcut_task_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "update_shortcut_task"
            ]
          },
          "task_id": {
            "type": "string",
            "description": "The task id"
          },
          "parent_story_id": {
            "type": "string",
            "description": "The parent story"
          },
          "description": {
            "type": "string",
            "description": "The task description"
          },
          "completion": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The completion id and display name."
          }
        },
        "required": [
          "task_id",
          "parent_story_id",
          "completion"
        ]
      },
      "update_slack_channel_topic_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "update_slack_channel_topic"
            ]
          },
          "channel": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            }
          },
          "topic": {
            "type": "string"
          }
        },
        "required": [
          "channel",
          "topic"
        ]
      },
      "update_status_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "update_status"
            ]
          },
          "status": {
            "type": "string",
            "enum": [
              "started",
              "mitigated",
              "resolved",
              "cancelled"
            ]
          },
          "inactivity_timeout": {
            "type": "string",
            "description": "In format '1 hour', '1 day', etc."
          }
        },
        "required": [
          "status"
        ]
      },
      "update_trello_card_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "update_trello_card"
            ]
          },
          "card_id": {
            "type": "string",
            "description": "The card id"
          },
          "title": {
            "type": "string",
            "description": "The card title"
          },
          "description": {
            "type": "string",
            "description": "The card description"
          },
          "due_date": {
            "type": "string",
            "description": "The due date (ISO8601 format)"
          },
          "board": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The board id and display name."
          },
          "list": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The list id and display name."
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            }
          },
          "archivation": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The archivation id and display name."
          }
        },
        "required": [
          "card_id",
          "archivation"
        ]
      },
      "update_zendesk_ticket_task_params": {
        "type": "object",
        "properties": {
          "task_type": {
            "type": "string",
            "enum": [
              "update_zendesk_ticket"
            ]
          },
          "ticket_id": {
            "type": "string",
            "description": "The ticket id."
          },
          "subject": {
            "type": "string",
            "description": "The ticket subject."
          },
          "tags": {
            "type": "string",
            "description": "The ticket tags."
          },
          "priority": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The priority id and display name."
          },
          "completion": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "description": "The completion id and display name."
          }
        },
        "required": [
          "ticket_id"
        ]
      },
      "new_incident_feedback": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_feedbacks"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "feedback": {
                    "type": "string",
                    "description": "The feedback of the incident feedback"
                  },
                  "rating": {
                    "type": "integer",
                    "description": "The rating of the incident feedback",
                    "enum": [
                      4,
                      3,
                      2,
                      1,
                      0
                    ]
                  },
                  "anonymous": {
                    "type": "boolean",
                    "description": "Is the feedback anonymous?"
                  }
                },
                "additionalProperties": false,
                "required": [
                  "rating",
                  "feedback"
                ]
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "update_incident_feedback": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "incident_feedbacks"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "feedback": {
                    "type": "string",
                    "description": "The feedback of the incident feedback"
                  },
                  "rating": {
                    "type": "integer",
                    "description": "The rating of the incident feedback",
                    "enum": [
                      4,
                      3,
                      2,
                      1,
                      0
                    ]
                  },
                  "anonymous": {
                    "type": "boolean",
                    "description": "Is the feedback anonymous?"
                  }
                },
                "additionalProperties": false
              }
            },
            "required": [
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_feedback": {
        "type": "object",
        "properties": {
          "feedback": {
            "type": "string",
            "description": "The feedback of the incident feedback"
          },
          "rating": {
            "type": "integer",
            "description": "The rating of the incident feedback",
            "enum": [
              4,
              3,
              2,
              1,
              0
            ]
          },
          "anonymous": {
            "type": "boolean",
            "description": "Is the feedback anonymous?"
          },
          "created_at": {
            "type": "string",
            "description": "Date of creation"
          },
          "updated_at": {
            "type": "string",
            "description": "Date of last update"
          }
        },
        "required": [
          "rating",
          "feedback",
          "anonymous",
          "created_at",
          "updated_at"
        ]
      },
      "incident_feedback_response": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique ID of the incident feedback"
              },
              "type": {
                "type": "string",
                "enum": [
                  "incident_feedbacks"
                ]
              },
              "attributes": {
                "type": "object",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/incident_feedback"
                  }
                ]
              }
            },
            "required": [
              "id",
              "type",
              "attributes"
            ]
          }
        },
        "required": [
          "data"
        ]
      },
      "incident_feedback_list": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique ID of the incident feedback"
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "incident_feedbacks"
                  ]
                },
                "attributes": {
                  "type": "object",
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/incident_feedback"
                    }
                  ]
                }
              },
              "required": [
                "id",
                "type",
                "attributes"
              ]
            }
          },
          "links": {
            "type": "object",
            "allOf": [
              {
                "$ref": "#/components/schemas/links"
              }
            ]
          }
        },
        "required": [
          "data",
          "links"
        ]
      }
    }
  }
}